<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>有意思的代码</title>
    <link href="/2022/05/24/others/%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E4%BB%A3%E7%A0%81/"/>
    <url>/2022/05/24/others/%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="jsandcss/player/APlayer.min.css"><script src="/jsandcss/player/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/jsandcss/player/Meting.min.js"></script><h1 id="被注释的代码"><a href="#被注释的代码" class="headerlink" title="被注释的代码"></a>被注释的代码</h1><p><font color='blue'>源码</font></p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// \u000d System.out.println("hello");</span>        <span class="token comment">// \u000d System.out.println("hello");</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p><font color='blue'>输出</font></p><div class="code-wrapper"><pre class="language-none"><code class="language-none">hellohello</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Cpp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot使用HTTPS和HTTP2.0</title>
    <link href="/2022/03/31/%E5%BC%80%E5%8F%91/%E5%90%8E%E7%AB%AF/SpringBoot%E4%BD%BF%E7%94%A8HTTPS/"/>
    <url>/2022/03/31/%E5%BC%80%E5%8F%91/%E5%90%8E%E7%AB%AF/SpringBoot%E4%BD%BF%E7%94%A8HTTPS/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="jsandcss/player/APlayer.min.css"><script src="/jsandcss/player/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/jsandcss/player/Meting.min.js"></script><blockquote><p>HTTPS （全称：Hyper Text Transfer Protocol over SecureSocket Layer），是以安全为目标的 HTTP 通道，在HTTP的基础上通过传输加密和<a href="https://baike.baidu.com/item/%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81/5294713">身份认证</a>保证了传输过程的安全性 [1] 。HTTPS 在HTTP 的基础下加入<a href="https://baike.baidu.com/item/SSL/320778">SSL</a>，HTTPS 的安全基础是 SSL，因此加密的详细内容就需要 SSL。 HTTPS 存在不同于 HTTP 的默认端口及一个加密&#x2F;身份验证层（在 HTTP与 <a href="https://baike.baidu.com/item/TCP/33012">TCP</a> 之间）。这个系统提供了身份验证与加密通讯方法</p></blockquote><span id="more"></span><h2 id="使用Https（Tomcat）"><a href="#使用Https（Tomcat）" class="headerlink" title="使用Https（Tomcat）"></a>使用Https（Tomcat）</h2><h3 id="生成签名"><a href="#生成签名" class="headerlink" title="生成签名"></a>生成签名</h3><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">keytool -genkeypair -alias xxxxx -keyalg RSA -keypass <span class="token number">123456</span> -storepass <span class="token number">123456</span> -keysize <span class="token number">2048</span> -keystore xxxxx.jks</code></pre></div><p>比如：</p><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">keytool -genkeypair -alias <span class="token builtin class-name">test</span> -keyalg RSA -keypass <span class="token number">123456</span> -storepass <span class="token number">123456</span> -keysize <span class="token number">2048</span> -keystore D:/test.jks</code></pre></div><p>生成test.jks再D盘，将其复制到 springboot项目的 resource目录下</p><h3 id="全局文件配置"><a href="#全局文件配置" class="headerlink" title="全局文件配置"></a>全局文件配置</h3><div class="code-wrapper"><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#设置https的端口</span><span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">8081</span><span class="token comment">#SSL证书设置</span><span class="token key attr-name">server.ssl.key-store</span><span class="token punctuation">=</span><span class="token value attr-value">classpath:test.jks</span><span class="token key attr-name">server.ssl.key-store-password</span><span class="token punctuation">=</span><span class="token value attr-value">123456</span><span class="token key attr-name">server.ssl.keyStoreType</span><span class="token punctuation">=</span><span class="token value attr-value">JKS</span></code></pre></div><p>此时已可以使用https访问8081端口,如果用http访问8080端口,则无法访问。（由于证书是自己颁发的，浏览器会警告不安全）</p><h3 id="添加配置类"><a href="#添加配置类" class="headerlink" title="添加配置类"></a>添加配置类</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token class-name">TomcatServletWebServerFactory</span> <span class="token function">tomcatServletWebServerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TomcatServletWebServerFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TomcatServletWebServerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//此方法在与Tomcat服务器一起使用之前，对Tomcat Context进行后期处理。子类可以重写此方法以对Context应用附加处理。</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">postProcessContext</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">SecurityConstraint</span> constraint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecurityConstraint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                constraint<span class="token punctuation">.</span><span class="token function">setUserConstraint</span><span class="token punctuation">(</span><span class="token string">"CONFIDENTIAL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">SecurityCollection</span> collection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecurityCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                collection<span class="token punctuation">.</span><span class="token function">addPattern</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                constraint<span class="token punctuation">.</span><span class="token function">addCollection</span><span class="token punctuation">(</span>collection<span class="token punctuation">)</span><span class="token punctuation">;</span>                context<span class="token punctuation">.</span><span class="token function">addConstraint</span><span class="token punctuation">(</span>constraint<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">addAdditionalTomcatConnectors</span><span class="token punctuation">(</span><span class="token function">createTomcatConnector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> factory<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Connector</span> <span class="token function">createTomcatConnector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Connector</span> connector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Connector</span><span class="token punctuation">(</span><span class="token string">"org.apache.coyote.http11.Http11NioProtocol"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用http访问8081自动转发到8080端口</span>        connector<span class="token punctuation">.</span><span class="token function">setScheme</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connector<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connector<span class="token punctuation">.</span><span class="token function">setSecure</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connector<span class="token punctuation">.</span><span class="token function">setRedirectPort</span><span class="token punctuation">(</span><span class="token number">8081</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> connector<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>此时就可以使用http访问8080端口，会被自动转发到8081端口，并使用https协议。</p><h2 id="使用HTTP2-0-Tomcat"><a href="#使用HTTP2-0-Tomcat" class="headerlink" title="使用HTTP2.0(Tomcat)"></a>使用HTTP2.0(Tomcat)</h2><p>再先前使用https的基础上可以配置使用http2.0。</p><div class="code-wrapper"><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">8081</span><span class="token comment">#SSL证书设置</span><span class="token key attr-name">server.ssl.key-store</span><span class="token punctuation">=</span><span class="token value attr-value">classpath:aes.jks</span><span class="token key attr-name">server.ssl.key-store-password</span><span class="token punctuation">=</span><span class="token value attr-value">123456</span><span class="token key attr-name">server.ssl.keyStoreType</span><span class="token punctuation">=</span><span class="token value attr-value">JKS</span><span class="token comment">#新增了以下配置</span><span class="token key attr-name">server.ssl.protocol</span><span class="token punctuation">=</span><span class="token value attr-value">TLSv1.2</span><span class="token key attr-name">server.http2.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span><span class="token key attr-name">server.forward-headers-strategy</span><span class="token punctuation">=</span><span class="token value attr-value">framework</span></code></pre></div><p>此时tomcat可以使用https和HTTP2.0协议。可以使用PushBuilder向客户端主动推送消息</p><p>另外，也可以以使用Undertow使用https和HTTP2.0</p><h2 id="使用HTTP2-0-Undertow"><a href="#使用HTTP2-0-Undertow" class="headerlink" title="使用HTTP2.0(Undertow)"></a>使用HTTP2.0(Undertow)</h2><h3 id="首先引入依赖"><a href="#首先引入依赖" class="headerlink" title="首先引入依赖"></a>首先引入依赖</h3><p>使用undertow，移除掉了starter-web中的tomcat依赖</p><div class="code-wrapper"><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-undertow<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></div><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><div class="code-wrapper"><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">8081</span><span class="token comment">#SSL证书设置</span><span class="token key attr-name">server.ssl.key-store</span><span class="token punctuation">=</span><span class="token value attr-value">classpath:aes.jks</span><span class="token key attr-name">server.ssl.key-store-password</span><span class="token punctuation">=</span><span class="token value attr-value">123456</span><span class="token key attr-name">server.ssl.keyStoreType</span><span class="token punctuation">=</span><span class="token value attr-value">JKS</span><span class="token key attr-name">server.ssl.protocol</span><span class="token punctuation">=</span><span class="token value attr-value">TLSv1.2</span><span class="token key attr-name">server.http2.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span><span class="token key attr-name">server.forward-headers-strategy</span><span class="token punctuation">=</span><span class="token value attr-value">framework</span></code></pre></div><p>此时就已经可以使用http2.0访问自己的网站了。</p><h3 id="更改配置类"><a href="#更改配置类" class="headerlink" title="更改配置类"></a>更改配置类</h3><p>配置之后也可以使用pushBuilder主动向服务器推送资源了。</p><p>注意，以下所有关于容器的包都打包来自于Undertow，导包错误会报错。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">ServletWebServerFactory</span> <span class="token function">undertowFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">UndertowServletWebServerFactory</span> undertowFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UndertowServletWebServerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    undertowFactory<span class="token punctuation">.</span><span class="token function">addBuilderCustomizers</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Undertow<span class="token punctuation">.</span>Builder</span> builder<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        builder<span class="token punctuation">.</span><span class="token function">addHttpListener</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">,</span> <span class="token string">"0.0.0.0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 开启HTTP2</span>        builder<span class="token punctuation">.</span><span class="token function">setServerOption</span><span class="token punctuation">(</span><span class="token class-name">UndertowOptions</span><span class="token punctuation">.</span>ENABLE_HTTP2<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    undertowFactory<span class="token punctuation">.</span><span class="token function">addDeploymentInfoCustomizers</span><span class="token punctuation">(</span>deploymentInfo <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 开启HTTP自动跳转至HTTPS</span>        deploymentInfo<span class="token punctuation">.</span><span class="token function">addSecurityConstraint</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SecurityConstraint</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                             <span class="token punctuation">.</span><span class="token function">addWebResourceCollection</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebResourceCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addUrlPattern</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                             <span class="token punctuation">.</span><span class="token function">setTransportGuaranteeType</span><span class="token punctuation">(</span><span class="token class-name">TransportGuaranteeType</span><span class="token punctuation">.</span>CONFIDENTIAL<span class="token punctuation">)</span>                                             <span class="token punctuation">.</span><span class="token function">setEmptyRoleSemantic</span><span class="token punctuation">(</span><span class="token class-name">SecurityInfo<span class="token punctuation">.</span>EmptyRoleSemantic</span><span class="token punctuation">.</span>PERMIT<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setConfidentialPortManager</span><span class="token punctuation">(</span>exchange <span class="token operator">-></span> <span class="token number">8081</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> undertowFactory<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot 学习笔记</title>
    <link href="/2022/03/02/%E5%BC%80%E5%8F%91/%E5%90%8E%E7%AB%AF/Spring%20Boot%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/03/02/%E5%BC%80%E5%8F%91/%E5%90%8E%E7%AB%AF/Spring%20Boot%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="jsandcss/player/APlayer.min.css"><script src="/jsandcss/player/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/jsandcss/player/Meting.min.js"></script><h2 id="第一个Spring-Boot项目"><a href="#第一个Spring-Boot项目" class="headerlink" title="第一个Spring Boot项目"></a>第一个Spring Boot项目</h2><h3 id="配置依赖pom-xml"><a href="#配置依赖pom-xml" class="headerlink" title="配置依赖pom.xml"></a>配置依赖<code>pom.xml</code></h3><div class="code-wrapper"><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--spring-boot-start-parent依赖，父项目依赖管理--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment">&lt;!-- lookup parent from repository --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--web模块依赖启动器--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--测试类依赖--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--热部署依赖启动器--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--tomcat依赖--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--Maven 打包工具插件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.6.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre></div><h3 id="创建主程序启动类"><a href="#创建主程序启动类" class="headerlink" title="创建主程序启动类"></a>创建<code>主程序启动类</code></h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span> <span class="token comment">//标记主程序启动类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Chapter01Application</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//主程序启动方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Chapter01Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="创建处理类"><a href="#创建处理类" class="headerlink" title="创建处理类"></a>创建处理类</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>chapter01<span class="token punctuation">.</span>controller</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PostMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span> <span class="token comment">//将当前类作为控制层组件添加到Spring容器中,类中的所有方法只能返回String、Object、Json等实体对象，不能跳转到模版页面</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token comment">//设置访问路径和方法</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"hello Spring"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/hellos"</span><span class="token punctuation">)</span><span class="token comment">//Post方法路径映射</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hellos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"hello hello Spring"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>此时运行项目就可以请求<code>localhost:端口号/hello</code>,和<code>localhost:端口号/hello</code></p><p>也可以使用<code>@RequestMapping</code>注解。</p><p>关于<code>@RequestMapping</code>注解这里有相关解释<a href="https://developer.aliyun.com/article/651661">@RequestMapping注解的使用</a></p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/request"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"hello0"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello1"</span><span class="token punctuation">)</span><span class="token comment">//这里的路径相当于@GetMapping的/request/hello1</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"hello1"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"hello2"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>使用<code>@ResponseStatus</code>注解可以快速将返回对象的各种属性转换为Json</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@ResponseStatus</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResponseTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/getuser"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span><span class="token comment">//直接返回对象，会自动转换为Json</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="IDEA热部署"><a href="#IDEA热部署" class="headerlink" title="IDEA热部署"></a>IDEA热部署</h3><p>添加热部署依赖</p><div class="code-wrapper"><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></div><p><font color='red'>1.</font>在IDEA的<code>File | Settings | Build, Execution, Deployment | Compiler</code>中找到<code>Build project automatically</code>勾选。</p><p><font color='red'>2.</font>任意界面按组合键<code>Ctrl+Shift+Alt+/</code>打开Maintenance选项框，打开Registry页面，勾选<code>compiler.automake.allow.when.app.runing</code></p><p>如果在上一步中没有找到选项可以在<code>File | Settings | Advanced Settings</code>中勾选<code>Allow auto-make to start even if developed application is currently running</code></p><p>最后点击运行(是run不是debug)就可以使用热部署了</p><p><font color='blue'>tips:</font> 如果出现运行模式增长，调试模式出错，可以取消<font color='red'>1</font>的勾选，需要热部署启动时在重新勾选。</p><h3 id="测试类的使用"><a href="#测试类的使用" class="headerlink" title="测试类的使用"></a>测试类的使用</h3><p>在<code>test</code>中与主程序启动类相同的包下创建Tests类</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>chapter01<span class="token punctuation">.</span>controller<span class="token punctuation">.</span></span><span class="token class-name">HelloController</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringRunner</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token comment">//测试运行器，并加载到SpringBootTest测试注解</span><span class="token annotation punctuation">@SpringBootTest</span> <span class="token comment">//标记测试单元</span><span class="token keyword">class</span> <span class="token class-name">Chapter01ApplicationTests</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//自动创建的单元测试方法示例</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">HelloController</span> helloController<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>helloController<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>运行test类，即可在控制台查看到输出hello</p><p><font color='red'>other</font></p><details>    <summary>spring boot 各层次图解</summary>    <ul style="list-style-type:none">        <li><img src="https://dbins.gitee.io/image/others/1.png"></li>    </ul></details><h2 id="Spring-Boot-核心配置与注解"><a href="#Spring-Boot-核心配置与注解" class="headerlink" title="Spring Boot 核心配置与注解"></a>Spring Boot 核心配置与注解</h2><h3 id="全局配置文件application-properties-与-application-yaml"><a href="#全局配置文件application-properties-与-application-yaml" class="headerlink" title="全局配置文件application.properties 与 application.yaml"></a>全局配置文件<code>application.properties</code> 与 <code>application.yaml</code></h3><p>全局文件能对一些默认配置值进行修改,spring boot使用<code>application.properties</code> 与 <code>application.yaml</code>作为全局配置文件，文件放在<code>src/main/resource</code>目录或类路径的<code>config</code></p><p>为了在写配置时有相关提示，加入配置依赖。</p><div class="code-wrapper"><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></div><h4 id="application-proprities"><a href="#application-proprities" class="headerlink" title="application.proprities"></a><code>application.proprities</code></h4><div class="code-wrapper"><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#服务器应绑定到的网络地址</span><span class="token key attr-name">server.address</span><span class="token punctuation">=</span><span class="token value attr-value">80</span><span class="token comment">#服务器 HTTP 端口。</span><span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">8080 </span><span class="token comment">#JDBC 驱动程序的完全限定名。默认情况下，根据 URL 自动检测。</span><span class="token key attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.jdbc.Driver</span><span class="token comment">#除默认值外还使用的配置文件位置。</span><span class="token key attr-name">spring.config.additional-location</span><span class="token punctuation">=</span><span class="token comment">#替换默认值的配置文件位置</span><span class="token key attr-name">spring.config.location</span><span class="token punctuation">=</span><span class="token comment">#配置文件名。</span><span class="token key attr-name">spring.config.name</span><span class="token punctuation">=</span><span class="token value attr-value">application</span></code></pre></div><p>创建<code>Pet</code>类和<code>Person</code>类</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pet</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> type<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token comment">//此处略写to_string方法和各个成员变量的getter,setter</span><span class="token punctuation">&#125;</span></code></pre></div><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> family<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Pet</span> pet<span class="token punctuation">;</span>    <span class="token comment">//此处略写toString方法和各个成员变量的getter,setter</span><span class="token punctuation">&#125;</span></code></pre></div><p>在<code>application.proprities</code>中配置</p><div class="code-wrapper"><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">person.id</span><span class="token punctuation">=</span><span class="token value attr-value">1</span><span class="token key attr-name">person.name</span><span class="token punctuation">=</span><span class="token value attr-value">tomcat</span><span class="token key attr-name">person.famliy</span><span class="token punctuation">=</span><span class="token value attr-value">father</span><span class="token key attr-name">person.pet.type</span><span class="token punctuation">=</span><span class="token value attr-value">dog</span><span class="token key attr-name">person.pet.name</span><span class="token punctuation">=</span><span class="token value attr-value">bob</span><span class="token comment">#如果存在Map类型,则使用</span><span class="token comment">#person.map.key1=value2</span><span class="token comment">#person.map.key2=value2</span></code></pre></div><p>编写测试类</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Chapter02ApplicationTests</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">Person</span> person<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>运行测试类会自动调用toString()方法并输出，可发现person的各种属性已经赋值。</p><h4 id="application-yaml"><a href="#application-yaml" class="headerlink" title="application.yaml"></a><code>application.yaml</code></h4><p>编写类</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token comment">//把普通pojo实例化到spring容器中</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"relation"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Relationship</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span>  map<span class="token punctuation">;</span> <span class="token comment">//可以定义map 键和值的类型，比如String</span>    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span> <span class="token class-name">People</span><span class="token punctuation">;</span>    <span class="token comment">//省略getter,setter,toString.</span><span class="token punctuation">&#125;</span></code></pre></div><p>配置<code>yaml</code>遇到Map时<code>:</code>·后要有空格，键不能用中文，但是值可以。</p><div class="code-wrapper"><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">relation</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> 关系图1  <span class="token comment">#这种形式的配置map在键、值中都不能出现英文(半角)逗号号,中文(全角)可以,但是在键中的,?等全角或半角符号会被忽略</span>  <span class="token key atrule">map</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token key atrule">y</span><span class="token punctuation">:</span> b<span class="token punctuation">,</span> <span class="token key atrule">w</span><span class="token punctuation">:</span> m<span class="token punctuation">,</span> <span class="token key atrule">b</span><span class="token punctuation">:</span> e<span class="token punctuation">&#125;</span>  <span class="token key atrule">people</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> 爷爷    <span class="token punctuation">-</span> 爸爸    <span class="token punctuation">-</span> 妈妈    <span class="token punctuation">-</span> 儿子    <span class="token punctuation">-</span> 外公</code></pre></div><p>或者</p><div class="code-wrapper"><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">relation</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> 关系图1  <span class="token comment">#这种形式的配置map在键、值中都不能出现英文(半角)逗号号,中文(全角)可以,但是在键中的,?等全角或半角符号会被忽略</span>  <span class="token key atrule">map</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token key atrule">y</span><span class="token punctuation">:</span> b<span class="token punctuation">,</span> <span class="token key atrule">w</span><span class="token punctuation">:</span> m<span class="token punctuation">,</span> <span class="token key atrule">b</span><span class="token punctuation">:</span> e<span class="token punctuation">&#125;</span>  <span class="token key atrule">people</span><span class="token punctuation">:</span>    爸爸<span class="token punctuation">,</span>    儿子<span class="token punctuation">,</span>    爷爷</code></pre></div><p>或者</p><div class="code-wrapper"><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">relation</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> 关系图1  <span class="token comment">#这种形式的配置map在键、值中都能出现英文(半角)逗号,同样在键中会被忽略</span>  <span class="token key atrule">map</span><span class="token punctuation">:</span>    <span class="token key atrule">y</span><span class="token punctuation">:</span> 爸爸    <span class="token key atrule">w</span><span class="token punctuation">:</span> m    <span class="token key atrule">b</span><span class="token punctuation">:</span> e  <span class="token key atrule">people</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>爸爸<span class="token punctuation">,</span>爷爷<span class="token punctuation">,</span>儿子<span class="token punctuation">]</span></code></pre></div><h3 id="配置文件属性值的注入"><a href="#配置文件属性值的注入" class="headerlink" title="配置文件属性值的注入"></a>配置文件属性值的注入</h3><p>在前面的示例中，使用 <code>@Component</code> <code>@ConfigurationProperties(prefix = &quot;relation&quot;)</code>注入属性值，配置文件中的属性需要与类里面的成员变量的名称一</p><h4 id="使用-Value注入属性"><a href="#使用-Value注入属性" class="headerlink" title="使用@Value注入属性"></a>使用<code>@Value</code>注入属性</h4><p>如</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token comment">//@ConfigurationProperties(prefix = "relation")不使用该注解配置</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Relationship</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;relation.name&#125;"</span><span class="token punctuation">)</span><span class="token comment">//使用@Value注入</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span>  map<span class="token punctuation">;</span><span class="token comment">//@Value不能用于复杂类型</span>    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span> <span class="token class-name">People</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><h4 id="两种注解对比"><a href="#两种注解对比" class="headerlink" title="两种注解对比"></a>两种注解对比</h4><table><thead><tr><th align="center"></th><th align="left">@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td align="center">1.底层框架</td><td align="left">Spring Boot</td><td>Spring</td></tr><tr><td align="center">2.功能</td><td align="left">批量注入文件中的属性</td><td>单个注入</td></tr><tr><td align="center">3.setter方法</td><td align="left">需要</td><td>不需要</td></tr><tr><td align="center">4.复杂类型属性注入</td><td align="left">支持</td><td>不支持</td></tr><tr><td align="center">5.松散绑定</td><td align="left">支持</td><td>不支持</td></tr><tr><td align="center">6.JSR303 数据校验</td><td align="left">支持</td><td>不支持</td></tr><tr><td align="center">7.SpELl表达式</td><td align="left">不支持</td><td>支持</td></tr></tbody></table><p><em><strong>4</strong></em></p><p>@ConfigurationProperties支持复杂数据类型(如：Map,List)的属性注入</p><p>@Value 只支持基本数据类型</p><p><em><strong>5</strong></em></p><p>  @ConfigurationProperties 注入配置文件属性时，支持松散绑定语法,对大小写字母不敏感。</p><div class="code-wrapper"><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">PERSON.id</span><span class="token punctuation">=</span><span class="token value attr-value">1</span><span class="token key attr-name">person.name</span><span class="token punctuation">=</span><span class="token value attr-value">tomcat</span><span class="token key attr-name">person.Famliy</span><span class="token punctuation">=</span><span class="token value attr-value">father</span><span class="token key attr-name">person.pet.Type</span><span class="token punctuation">=</span><span class="token value attr-value">dog</span><span class="token key attr-name">person.PET.Name</span><span class="token punctuation">=</span><span class="token value attr-value">bob</span></code></pre></div><p>@Values使用松散绑定语法无效</p><p><em><strong>6</strong></em></p><p> @ConfigurationProperties 支持JSR303 数据校验,其主要作用时校验配置文件中注入对应Bean属性的值是否符合相关规则。如</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Validated</span> <span class="token comment">//引入Spring框架支持的数据校验规则，只有在引入该标注时配置错误才会报错</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Email</span> <span class="token comment">//若配置email的格式不是邮箱格式则会报错</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p><em><strong>7</strong></em></p><p>@Value 注解在注入是支持SpEL表达式,即”#{xx}”</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"#&#123;5*5&#125;"</span><span class="token punctuation">)</span><span class="token comment">//直接使用SpEL表达式直接为属性注入值</span><span class="token keyword">private</span> <span class="token keyword">int</span> number<span class="token punctuation">;</span></code></pre></div><h3 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h3><p>全局文件由spring boot自动加载配置，而自定义的配置文件spring boot是无法自动识别的，需要手动加载。</p><h4 id="使用-PropertySource加载配置文件"><a href="#使用-PropertySource加载配置文件" class="headerlink" title="使用@PropertySource加载配置文件"></a>使用@PropertySource加载配置文件</h4><p>如：</p><p>在resource下创建myconfig目录，再在其中创建testConfigTest.properties</p><div class="code-wrapper"><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">config1</span><span class="token punctuation">:</span><span class="token key attr-name">config1.name</span><span class="token punctuation">=</span><span class="token value attr-value">Config Test</span><span class="token key attr-name">config1.id</span><span class="token punctuation">=</span><span class="token value attr-value">1</span></code></pre></div><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token comment">//自定义配置类</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">"classpath:myConfig/testConfigTest.properties"</span><span class="token punctuation">)</span><span class="token comment">//指定配置文件的位置</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">Config01</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token comment">//开启对应配置类的属性注入</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"config1"</span><span class="token punctuation">)</span><span class="token comment">//指定配置文件注入属性前缀</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Config01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token comment">//省略setter,getter,toString</span><span class="token punctuation">&#125;</span></code></pre></div><p><code>tips</code> 如过不使用<code>Configuration</code> 注解，而使用<code>Component</code>则<code>@EnableConfigurationProperties(Config01.class)</code>可以省略。</p><h4 id="使用-ImportResource加载XML配置文件"><a href="#使用-ImportResource加载XML配置文件" class="headerlink" title="使用@ImportResource加载XML配置文件"></a>使用@ImportResource加载XML配置文件</h4><p>1创建一个MyService类</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"hello ?"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>2在resource文件夹下创建beans.xml</p><div class="code-wrapper"><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--配置myService,class为完整包路径--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.itheima.config.MyService<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre></div><p>3在启动类上添加@ImportResource(“classpath:myConfig&#x2F;beans.xml”)</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//classpath表示在resource下的myConfig文件夹下的beans.xml，这一步必须要有</span><span class="token annotation punctuation">@ImportResource</span><span class="token punctuation">(</span><span class="token string">"classpath:myConfig/beans.xml"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootApplication</span> <span class="token comment">//标记主程序启动类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Chapter01Application</span><span class="token punctuation">&#123;</span>    <span class="token comment">//.......</span><span class="token punctuation">&#125;</span></code></pre></div><p>4使用测试类测试</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Chapter02ApplicationTests</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span>MyService</span> myService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token comment">//这里可以使用完整路径，避免报错</span>    <span class="token keyword">private</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span>ApplicationContext</span> applicationContext<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//查看是否有id为myService的组件</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span><span class="token string">"myService"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myService<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h4 id="使用-Configuration编写自定义配置类"><a href="#使用-Configuration编写自定义配置类" class="headerlink" title="使用@Configuration编写自定义配置类"></a>使用@Configuration编写自定义配置类</h4><p>取消前面的第二第三配置，编写配置类MyConfig</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token comment">//定义该类为配置类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span><span class="token comment">//返回值对象作为组件添加到Spring容器中，组件名默认为方法名。</span>    <span class="token keyword">public</span> <span class="token class-name">MyService</span> <span class="token function">myService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>运行前面编写的测试类，可以看到配置成功。</p><h3 id="Profile多环境配置"><a href="#Profile多环境配置" class="headerlink" title="Profile多环境配置"></a>Profile多环境配置</h3><h4 id="使用Profile文件"><a href="#使用Profile文件" class="headerlink" title="使用Profile文件"></a>使用Profile文件</h4><p>配置文件文件名满足<code>application-&#123;profile&#125;.properties</code> <code>application-&#123;profile&#125;.yaml</code>也可以</p><p>如在resource目录创建</p><p>application-test.properties</p><div class="code-wrapper"><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">8080</span></code></pre></div><p>application-dev.properties</p><div class="code-wrapper"><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">8081</span></code></pre></div><p>application-prod.properties</p><div class="code-wrapper"><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">8082</span></code></pre></div><p>在application.properties中配置</p><div class="code-wrapper"><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">spring.profiles.active</span><span class="token punctuation">=</span><span class="token value attr-value">dev</span></code></pre></div><p>运行启动类，则可以查看相关端口的变化。</p><h4 id="使用-Profile注解"><a href="#使用-Profile注解" class="headerlink" title="使用@Profile注解"></a>使用@Profile注解</h4><p>创建接口类</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DBConnector</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>创建三个类实现接口</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Profile</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">)</span><span class="token comment">//指定多环境配置类标识</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DevDBConnector</span> <span class="token keyword">implements</span> <span class="token class-name">DBConnector</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Now is DEV development"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Profile</span><span class="token punctuation">(</span><span class="token string">"prod"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProdDBConnector</span> <span class="token keyword">implements</span> <span class="token class-name">DBConnector</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Now is Prod development"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Profile</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDBConnector</span> <span class="token keyword">implements</span> <span class="token class-name">DBConnector</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>在application.properties中更改指定的多环境配置文件，运行测试相关则会出现不同的结果。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">SpringWebApplicationTests</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">DBConnector</span> dbConnector<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dbConnector<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h4 id="随机值设置以及参数引用"><a href="#随机值设置以及参数引用" class="headerlink" title="随机值设置以及参数引用"></a>随机值设置以及参数引用</h4><div class="code-wrapper"><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#随机字符串</span><span class="token key attr-name">my.string</span> <span class="token punctuation">=</span> <span class="token value attr-value">$&#123;random.value&#125;</span><span class="token comment">#随机整数</span><span class="token key attr-name">my.number</span> <span class="token punctuation">=</span> <span class="token value attr-value">$&#123;random.int&#125;</span><span class="token comment">#随机Long型整数</span><span class="token key attr-name">my.longnumber</span> <span class="token punctuation">=</span> <span class="token value attr-value">$&#123;random.long&#125;</span><span class="token comment">#随机UUID</span><span class="token key attr-name">my.uuid</span> <span class="token punctuation">=</span> <span class="token value attr-value">$&#123;random.uuid&#125;</span><span class="token comment">#小于10的整数</span><span class="token key attr-name">my.numberlessten</span> <span class="token punctuation">=</span> <span class="token value attr-value">$&#123;random.int(10)&#125;</span><span class="token comment">#1024-65536之间的数</span><span class="token key attr-name">mu.numberinrangs</span> <span class="token punctuation">=</span> <span class="token value attr-value">$&#123;random.int[1024,65536]&#125;</span></code></pre></div><p>例如：</p><p>创建类</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token comment">//使用全局文件可以不用指定配置文件位置等</span><span class="token comment">//@PropertySource("classpath:")//指定配置文件的位置</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"boy"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Boy</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> uuid<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> description<span class="token punctuation">;</span>    <span class="token comment">//省略setter</span><span class="token punctuation">&#125;</span></code></pre></div><p>这里使用yaml，如果使用properties可能中文乱码，解决方案可百度</p><div class="code-wrapper"><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">boy</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>random.value<span class="token punctuation">&#125;</span>  <span class="token key atrule">age</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>random.int<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>  <span class="token key atrule">uuid</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span>random.uuid<span class="token punctuation">&#125;</span>  <span class="token key atrule">description</span><span class="token punctuation">:</span> 一个叫$<span class="token punctuation">&#123;</span>boy.name<span class="token punctuation">&#125;</span>的男孩的UUID是$<span class="token punctuation">&#123;</span>boy.uuid<span class="token punctuation">&#125;</span>他已经$<span class="token punctuation">&#123;</span>boy.age<span class="token punctuation">&#125;</span>岁了.</code></pre></div><details>    <summary>properties</summary>    <ul style="list-style-type:none">        <li>boy.name = ${random.value}</li>        <li>boy.age = ${random.int[10,20]}</li>        <li>boy.uuid = ${random.uuid}</li>        <li>boy.description = 一个叫:${boy.name}的男孩的UUID是${boy.uuid}他已经${boy.age}岁了.</li>    </ul></details>## SpringBoot数据访问<p>Spring提供了用于简化数据库访问、支持云服务的开源框架Spring Data。其提供了各种类型数据库的支持，SpringBoot对Data支持的数据库进行整合管理，提供了各种依赖启动器。</p><table><thead><tr><th align="left">名称</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">spring-boot-starter-data-jpa</td><td align="left">Spring Data JPA 与 Hibernate的启动器</td></tr><tr><td align="left">spring-boot-starter-data-mongodb</td><td align="left">MongoDB和Spring Data MongoDB的启动器</td></tr><tr><td align="left">spring-boot-starter-data-neo4j</td><td align="left">Neo4j 图数据库和 Spring Data Neo4j的启动器</td></tr><tr><td align="left">spring-boot-starter-data-radis</td><td align="left">Redis键值数据储存与Sping Data Redis 和 Jedis 客户端的启动器</td></tr></tbody></table><p>MyBatis 适配了Spring Boot框架,提供了 <code>mybatis-spring-boot-starter</code>依赖启动器</p><p>使用Mybatis访问数据库</p><h3 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h3><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><p>在pom.xml中添加依赖</p><div class="code-wrapper"><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- MyBatis依赖启动器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--阿里巴巴Druid数据源依赖启动器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- MySQL数据库连接驱动 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></div><h4 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h4><p>全局文件<code>application.properties</code>配置</p><div class="code-wrapper"><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://localhost:3306/springbootdata?serverTimezone=UTC</span><span class="token key attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token key attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token key attr-name">spring.datasource.type</span> <span class="token punctuation">=</span> <span class="token value attr-value">com.alibaba.druid.pool.DruidDataSource</span><span class="token comment">#下面的参数需要配置类配置</span><span class="token key attr-name">spring.datasource.initialSize</span><span class="token punctuation">=</span><span class="token value attr-value">20</span><span class="token key attr-name">spring.datasource.minIdle</span><span class="token punctuation">=</span><span class="token value attr-value">10</span><span class="token key attr-name">spring.datasource.maxActive</span><span class="token punctuation">=</span><span class="token value attr-value">100</span></code></pre></div><h4 id="创建配置类"><a href="#创建配置类" class="headerlink" title="创建配置类"></a>创建配置类</h4><p>SpringBoot提供的数据源自动配置类DataSourceProperties中没有与这些参数对应的默认属性，所以需要编写一个自定义配置类。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">getDruid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h4 id="创建和数据库中数据类型对应的类"><a href="#创建和数据库中数据类型对应的类" class="headerlink" title="创建和数据库中数据类型对应的类"></a>创建和数据库中数据类型对应的类</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Comment</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> author<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> a_id<span class="token punctuation">;</span>    <span class="token comment">//省略getter，setter,toString</span><span class="token punctuation">&#125;</span></code></pre></div><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Article</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Comment</span><span class="token punctuation">></span></span> commentList<span class="token punctuation">;</span>    <span class="token comment">//省略setter,getter,toString</span><span class="token punctuation">&#125;</span></code></pre></div><h4 id="使用注解整合MyBatis"><a href="#使用注解整合MyBatis" class="headerlink" title="使用注解整合MyBatis"></a>使用注解整合MyBatis</h4><h5 id="创建Mapper接口文件"><a href="#创建Mapper接口文件" class="headerlink" title="创建Mapper接口文件"></a>创建Mapper接口文件</h5><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CommentMapper</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from t_comment where id=#&#123;id&#125;;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Comment</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into t_comment(id,content,author,a_id) values(#&#123;id&#125;,#&#123;content&#125;,#&#123;author&#125;,#&#123;a_id&#125;);"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">insertComment</span><span class="token punctuation">(</span><span class="token class-name">Comment</span> comment<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Update</span><span class="token punctuation">(</span><span class="token string">"update t_comment set content=#&#123;content&#125; where id=#&#123;a_id&#125;;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">updateComment</span><span class="token punctuation">(</span><span class="token class-name">Comment</span> comment<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Delete</span><span class="token punctuation">(</span><span class="token string">"delete from"</span> <span class="token operator">+</span>            <span class="token string">" t_comment where id=#&#123;id&#125;;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">deleteComment</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//使用存储过程</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"&#123;call passed(#&#123;passId&#125;,#&#123;map.return_,mode=OUT,jdbcType=INTEGER&#125;)&#125;"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Options</span><span class="token punctuation">(</span>statementType <span class="token operator">=</span> <span class="token class-name">StatementType</span><span class="token punctuation">.</span>CALLABLE<span class="token punctuation">)</span><span class="token comment">//这段话一定要加，否则报没有设置参数的错误。</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">passed</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">,</span><span class="token class-name">Map</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><h5 id="使用测试类测试"><a href="#使用测试类测试" class="headerlink" title="使用测试类测试"></a>使用测试类测试</h5><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>chapter03<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Comment</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>chapter03<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">CommentMapper</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token comment">//导包不要导成另外一个相似的包。</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringRunner</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token comment">//测试运行器，并加载到SpringBootTest测试注解</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Chapter03ApplicationTests</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">CommentMapper</span> commentMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectComment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Comment</span> comment <span class="token operator">=</span> commentMapper<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>comment<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>代码中的名称可以与数据库中的一样，也可以采用驼峰命名,然后在配置文件中添加驼峰匹配映射设置</p><div class="code-wrapper"><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">mybatis.configuration.map-underscore-to-camel-case</span><span class="token punctuation">=</span><span class="token value attr-value">true</span></code></pre></div><h4 id="使用配置文件整合MyBatis"><a href="#使用配置文件整合MyBatis" class="headerlink" title="使用配置文件整合MyBatis"></a>使用配置文件整合MyBatis</h4><h4 id="创建ArticleMapper接口"><a href="#创建ArticleMapper接口" class="headerlink" title="创建ArticleMapper接口"></a>创建ArticleMapper接口</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ArticleMapper</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Article</span> <span class="token function">selectArticle</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">updateArticle</span><span class="token punctuation">(</span><span class="token class-name">Article</span> article<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><h4 id="创建映射文件"><a href="#创建映射文件" class="headerlink" title="创建映射文件"></a>创建映射文件</h4><div class="code-wrapper"><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.chapter03.mapper.ArticleMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--namespace为ArticleMapper所在位置--></span>    <span class="token comment">&lt;!-- 1、查询文章详细（包括评论信息） --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectArticle<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>articleWithComment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        SELECT a.*,c.id c_id,c.content c_content,c.author        FROM t_article a,t_comment c        WHERE a.id=c.a_id AND a.id = #&#123;id&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--属性映射--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>articleWithComment<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Article<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>commentList<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Comment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c_id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c_content<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 2、根据文章id更新文章信息 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateArticle<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Article<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>        UPDATE t_article        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title !=null and title !=<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                title=#&#123;title&#125;,            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content !=null and content !=<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                content=#&#123;content&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>        WHERE id=#&#123;id&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre></div><h4 id="配置全局文件，配置XML映射文件路径"><a href="#配置全局文件，配置XML映射文件路径" class="headerlink" title="配置全局文件，配置XML映射文件路径"></a>配置全局文件，配置XML映射文件路径</h4><div class="code-wrapper"><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#配置MyBatis的XML文件路径</span><span class="token key attr-name">mybatis.mapper-locations</span><span class="token punctuation">=</span><span class="token value attr-value">classpath:mapper/*xml</span><span class="token comment">#配置XML文件中指定的实体类名路径精确到包名</span><span class="token key attr-name">mybatis.type-aliases-package</span><span class="token punctuation">=</span><span class="token value attr-value">com.chapter03.domain</span></code></pre></div><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">ArticleMapper</span> articleMapper<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">ArticleTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Article</span> article <span class="token operator">=</span> articleMapper<span class="token punctuation">.</span><span class="token function">selectArticle</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="整合JPA"><a href="#整合JPA" class="headerlink" title="整合JPA"></a>整合JPA</h3><h4 id="添加依赖-1"><a href="#添加依赖-1" class="headerlink" title="添加依赖"></a>添加依赖</h4><div class="code-wrapper"><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--阿里巴巴Druid数据源依赖启动器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- MySQL数据库连接驱动 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--jpa依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-jpa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></div><h4 id="配置参数-1"><a href="#配置参数-1" class="headerlink" title="配置参数"></a>配置参数</h4><p>全局文件<code>application.properties</code>配置</p><div class="code-wrapper"><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://localhost:3306/springbootdata?serverTimezone=UTC</span><span class="token key attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token key attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token key attr-name">spring.datasource.type</span> <span class="token punctuation">=</span> <span class="token value attr-value">com.alibaba.druid.pool.DruidDataSource</span><span class="token comment">#下面的参数需要配置类配置</span><span class="token key attr-name">spring.datasource.initialSize</span><span class="token punctuation">=</span><span class="token value attr-value">20</span><span class="token key attr-name">spring.datasource.minIdle</span><span class="token punctuation">=</span><span class="token value attr-value">10</span><span class="token key attr-name">spring.datasource.maxActive</span><span class="token punctuation">=</span><span class="token value attr-value">100</span></code></pre></div><h4 id="创建配置类-1"><a href="#创建配置类-1" class="headerlink" title="创建配置类"></a>创建配置类</h4><p>SpringBoot提供的数据源自动配置类DataSourceProperties中没有与这些参数对应的默认属性，所以需要编写一个自定义配置类。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">getDruid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h4 id="编写实体类"><a href="#编写实体类" class="headerlink" title="编写实体类"></a>编写实体类</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token comment">//import lombok.Data; 自动配置setter和getter</span><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token comment">//实体类与test表对应。</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JpaTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Id</span><span class="token comment">//@Id标识这成员变量是主键。</span><span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span>IDENTITY<span class="token punctuation">)</span> <span class="token comment">//主键生成策略,可以省略</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"mes"</span><span class="token punctuation">)</span><span class="token comment">//@Column标注标识该成员变量和数据表中的字段名相对应</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"date"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> date<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p><code>@GeneratedValue</code>主键生成策略有：<code>TABLE</code>(使用一个特定的表保存主键),<code>SEQUENCE</code> 不支持主键自动增长的数据库主键生成策略, <code>IDENTITY</code>主键自增，<code>AUTO</code>自动选择。</p><h4 id="编写Repository接口"><a href="#编写Repository接口" class="headerlink" title="编写Repository接口"></a>编写Repository接口</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//&lt;JpaTest,String>JpaTest标识实体类，String表示主键类型。</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DiscussRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">JpaTest</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">JpaTest</span><span class="token punctuation">></span></span> <span class="token function">findByDateNotNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//JPA支持的方法名关键词查询</span>    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"select c from test c where c.id=?1"</span><span class="token punctuation">)</span><span class="token comment">//通过@Query注解引入SQL语句,用于分页查询.</span>    <span class="token keyword">public</span> <span class="token class-name">List</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">JpaTest</span><span class="token punctuation">></span></span> <span class="token function">getTestPaged</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">,</span> <span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"select * from test where test.id=?1"</span><span class="token punctuation">,</span>nativeQuery <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment">//支持原生的SQL语句查询</span>    <span class="token keyword">public</span> <span class="token class-name">List</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">JpaTest</span><span class="token punctuation">></span></span> <span class="token function">getTestPage2</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">,</span><span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Transactional</span><span class="token comment">//支持事务管理</span>    <span class="token annotation punctuation">@Modifying</span><span class="token comment">//支持数据变更</span>    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"update test c set c.message=?1 where c.id=?2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span><span class="token class-name">String</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p><a href="https://blog.csdn.net/u010918876/article/details/80434790">Spring Data JPA 在方法名关键字</a></p><p>测试效果</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">DiscussRepository</span> repository<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token class-name">TestJpa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">JpaTest</span><span class="token punctuation">></span></span> optional <span class="token operator">=</span> repository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token string">"1234"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>optional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>optional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">JpaTest</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> repository<span class="token punctuation">.</span><span class="token function">findByDateNotNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"> <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">DiscussRepository</span> repository<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">TestJpa2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//使用Example精准匹配结果</span>        <span class="token class-name">JpaTest</span> jpaTest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JpaTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jpaTest<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"23412"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Example</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">JpaTest</span><span class="token punctuation">></span></span> example <span class="token operator">=</span> <span class="token class-name">Example</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>jpaTest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">JpaTest</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> repository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>example<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">JpaTest</span> j<span class="token operator">:</span>list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token comment">//使用Example模糊匹配结果</span>        <span class="token class-name">ExampleMatcher</span> matcher <span class="token operator">=</span> <span class="token class-name">ExampleMatcher</span><span class="token punctuation">.</span><span class="token function">matching</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withMatcher</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Example</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">JpaTest</span><span class="token punctuation">></span></span> example1 <span class="token operator">=</span> <span class="token class-name">Example</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>jpaTest<span class="token punctuation">,</span>matcher<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">JpaTest</span><span class="token punctuation">></span></span> list1 <span class="token operator">=</span> repository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>example1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">JpaTest</span> j<span class="token operator">:</span>list1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre></div><p>再下面这个类中有更多的匹配规则。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">ExampleMatcher<span class="token punctuation">.</span>GenericPropertyMatchers</span><span class="token punctuation">.</span></code></pre></div><h3 id="整合Redis"><a href="#整合Redis" class="headerlink" title="整合Redis"></a>整合Redis</h3><p>Redis 是一个开源（BSD许可）的、内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件，并提供多种语言的API。</p><h4 id="下载安装开启Redis"><a href="#下载安装开启Redis" class="headerlink" title="下载安装开启Redis"></a>下载安装开启Redis</h4><p><a href="https://github.com/tporadowski/redis/releases">Releases · tporadowski&#x2F;redis · GitHub</a></p><p>下载对应版本的zip文件并解压,点击redis-server.exe就可以运行redis服务.</p><h4 id="添加redis依赖"><a href="#添加redis依赖" class="headerlink" title="添加redis依赖"></a>添加redis依赖</h4><div class="code-wrapper"><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></div><h4 id="文件配置"><a href="#文件配置" class="headerlink" title="文件配置"></a>文件配置</h4><div class="code-wrapper"><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#服务器地址</span><span class="token key attr-name">spring.redis.host</span><span class="token punctuation">=</span><span class="token value attr-value">127.0.0.1</span><span class="token comment">#端口</span><span class="token key attr-name">spring.redis.port</span><span class="token punctuation">=</span><span class="token value attr-value">6379</span><span class="token comment">#密码默认空</span><span class="token key attr-name">spring.redis.password</span><span class="token punctuation">=</span></code></pre></div><h4 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Family</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Indexed</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> type<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Indexed</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Family</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">,</span><span class="token class-name">String</span> username<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Indexed</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Indexed</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> country<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token class-name">String</span> city<span class="token punctuation">,</span><span class="token class-name">String</span> country<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>city <span class="token operator">=</span> city<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>country <span class="token operator">=</span> country<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@RedisHash</span><span class="token punctuation">(</span><span class="token string">"persons"</span><span class="token punctuation">)</span><span class="token comment">//指定操作实体类对象再Redis数据库中的存储空间。</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Id</span><span class="token comment">//标识实体类主键</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Indexed</span><span class="token comment">//标识对应属性再Redis数据库中生成的耳机索引。</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> firstname<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Indexed</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> lastname<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Address</span> address<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Family</span><span class="token punctuation">></span></span> familyList<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> firstname<span class="token punctuation">,</span><span class="token class-name">String</span> lastname<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>firstname <span class="token operator">=</span> firstname<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lastname <span class="token operator">=</span> lastname<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationTests</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">PersonRepository</span> <span class="token class-name">RedisRepository</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">savePerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"有才"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"james"</span><span class="token punctuation">,</span><span class="token string">"Harden"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Address</span> address <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token string">"北京"</span><span class="token punctuation">,</span><span class="token string">"China"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Family</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Family</span><span class="token punctuation">(</span><span class="token string">"父亲"</span><span class="token punctuation">,</span><span class="token string">"张良"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Family</span><span class="token punctuation">(</span><span class="token string">"母亲"</span><span class="token punctuation">,</span><span class="token string">"李香君"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">setFamilyList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> save <span class="token operator">=</span> <span class="token class-name">RedisRepository</span><span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> save2 <span class="token operator">=</span> <span class="token class-name">RedisRepository</span><span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>save<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>save2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">RedisRepository</span><span class="token punctuation">.</span><span class="token function">findByAddress_City</span><span class="token punctuation">(</span><span class="token string">"北京"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updatePerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token class-name">RedisRepository</span><span class="token punctuation">.</span><span class="token function">findByFirstnameAndLastname</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"有才"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">setFirstname</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> update <span class="token operator">=</span> <span class="token class-name">RedisRepository</span><span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deletePerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token class-name">RedisRepository</span><span class="token punctuation">.</span><span class="token function">findByFirstnameAndLastname</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">,</span><span class="token string">"有才"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RedisRepository</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">RedisRepository</span><span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>再Redis Service开启的情况下，依次运行测试方法就可以看到效果</p><h2 id="Spring-boot-视图技术"><a href="#Spring-boot-视图技术" class="headerlink" title="Spring boot 视图技术"></a>Spring boot 视图技术</h2><h3 id="Thymeleaf基本语法"><a href="#Thymeleaf基本语法" class="headerlink" title="Thymeleaf基本语法"></a>Thymeleaf基本语法</h3><p>Thymeleaf依赖</p><div class="code-wrapper"><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></div><div class="code-wrapper"><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--xmlns:th=引入Thymeleaf模板引擎--></span><span class="token comment">&lt;!--th标签是Thymeleaf提供的模板标签--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre></div><p>Thymeleaf常用标签</p><table><thead><tr><th><strong>th:insert</strong></th><th><strong>页面片段包含（类似</strong>JSP中的include标签）</th></tr></thead><tbody><tr><td>th:replace</td><td>页面片段包含（类似JSP中的include标签）</td></tr><tr><td>th:each</td><td>元素遍历（类似JSP中的c:forEach标签）</td></tr><tr><td>th:if</td><td>条件判断，如果为真</td></tr><tr><td>th:unless</td><td>条件判断，如果为假</td></tr><tr><td>th:switch</td><td>条件判断，进行选择性匹配</td></tr><tr><td>th:case</td><td>条件判断，进行选择性匹配</td></tr><tr><td>th:object</td><td>变量声明</td></tr><tr><td>th:with</td><td>变量声明</td></tr><tr><td>th:attr</td><td>通用属性修改</td></tr><tr><td>th:attrprepend</td><td>通用属性修改，将计算结果追加前缀到现有属性值</td></tr><tr><td>th:attrappend</td><td>通用属性修改，将计算结果追加后缀到现有属性值</td></tr><tr><td>th:value</td><td>属性值修改，指定标签属性值</td></tr><tr><td>th:href</td><td>用于设定链接地址</td></tr><tr><td>th:src</td><td>用于设定链接地址</td></tr><tr><td>th:text</td><td>用于指定标签显示的文本内容</td></tr><tr><td>th:utext</td><td>用于指定标签显示的文本内容，对特殊标签不转义</td></tr><tr><td>th:fragment</td><td>声明片段</td></tr><tr><td>th:remove</td><td>移除片段</td></tr></tbody></table><p>如：</p><div class="code-wrapper"><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mb-4<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/img/img.jpg&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>72<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>72<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre></div><h4 id="标准表达式"><a href="#标准表达式" class="headerlink" title="标准表达式"></a>标准表达式</h4><table><thead><tr><th><strong>说明</strong></th><th><strong>表达式语法</strong></th></tr></thead><tbody><tr><td>变量表达式</td><td>${…}</td></tr><tr><td>选择变量表达式</td><td>*{…}</td></tr><tr><td>消息表达式</td><td>#{…}</td></tr><tr><td>链接URL表达式</td><td>@{…}</td></tr><tr><td>片段表达式</td><td>~{…}</td></tr></tbody></table><p>Thymeleaf为所在变量所在域提供了一些内置对象</p><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>#ctx</td><td>上下文对象</td></tr><tr><td>#vars</td><td>上下文变量</td></tr><tr><td>#locale</td><td>上下文区域设置</td></tr><tr><td>#request</td><td>（仅限Web Context）HttpServletRequest对象</td></tr><tr><td>#response</td><td>（仅限Web Context）HttpServletResponse对象</td></tr><tr><td>#session</td><td>（仅限Web Context）HttpSession对象</td></tr><tr><td>#servletContext</td><td>（仅限Web Context）ServletContext对象</td></tr></tbody></table><h4 id="选择变量表达式"><a href="#选择变量表达式" class="headerlink" title="选择变量表达式"></a>选择变量表达式</h4><p><a name="m1">例如</a></p><div class="code-wrapper"><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>object</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;session.user&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!--从session中获取User对象,User对象在之前已经添加到了session中</span>    <span class="token attr-name">&lt;p</span><span class="token punctuation">></span></span>地区:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;#locale.country&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--获取国家--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>firstName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;#object.firstName&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--获取user的firstName--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>lastName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;session.user.lastName&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--获取user的lastName--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>性别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*&#123;sex&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--获取user的sex--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></div><h4 id="连接表达式"><a href="#连接表达式" class="headerlink" title="连接表达式"></a>连接表达式</h4><div class="code-wrapper"><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;https://www.baidu.com&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre></div><h4 id="片段表达式"><a href="#片段表达式" class="headerlink" title="片段表达式"></a>片段表达式</h4><div class="code-wrapper"><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>insert</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>~&#123;test::p&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--通过inser插入classpath:/resources/templates/下test.html用p标签包含的片段--></span></code></pre></div><h3 id="Thymeleaf基本使用"><a href="#Thymeleaf基本使用" class="headerlink" title="Thymeleaf基本使用"></a>Thymeleaf基本使用</h3><h4 id="静态页面的访问"><a href="#静态页面的访问" class="headerlink" title="静态页面的访问"></a>静态页面的访问</h4><p><code>classpath</code>是springboot项目的resources目录。生成target时就是target下的classes</p><p><code>classpath:/META-INF/resources/</code> <code>classpath:/resources/</code> <code>closspath:/static/</code> <code>classpath:/public/</code>下都可以存放静态资源，对于这些文件夹下的静态资源可以直接通过<code>域名:端口/</code>+<code>路径</code>访问</p><h4 id="使用Thymeleaf"><a href="#使用Thymeleaf" class="headerlink" title="使用Thymeleaf"></a>使用Thymeleaf</h4><p>配置模板参数</p><div class="code-wrapper"><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># 是否启用模板缓存,开发是false,运营是true</span><span class="token key attr-name">spring.thymeleaf.cache</span><span class="token punctuation">=</span><span class="token value attr-value">false</span><span class="token comment">#模板编码</span><span class="token key attr-name">spring.thymeleaf.encoding</span><span class="token punctuation">=</span><span class="token value attr-value">utf-8</span><span class="token comment">#应用于模板的模板模式</span><span class="token key attr-name">spring.thymeleaf.mode</span><span class="token punctuation">=</span><span class="token value attr-value">HTML5</span><span class="token comment">#指定模板页面存放路径,默认是在resources/templates/</span><span class="token key attr-name">spring.thymeleaf.prefix</span><span class="token punctuation">=</span><span class="token value attr-value">classpath:/templates/</span><span class="token comment">#指定模板页面名称后缀</span><span class="token key attr-name">spring.thymeleaf.suffix</span><span class="token punctuation">=</span><span class="token value attr-value">.html</span></code></pre></div><p>创建Web控制类</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Index</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//@ResponseBody</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/index"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token class-name">HttpSession</span> session<span class="token punctuation">,</span> <span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//将User对象加入session,用于模板页面的使用</span>        session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Parker"</span><span class="token punctuation">,</span><span class="token string">"Petter"</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span><span class="token comment">//跳转templates下的index.html</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>一个User类</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>    <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>    <span class="token class-name">String</span> sex<span class="token punctuation">;</span>    <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">String</span> firstName<span class="token punctuation">,</span><span class="token class-name">String</span> lastName<span class="token punctuation">,</span><span class="token class-name">String</span> sex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//省略getter和setter</span><span class="token punctuation">&#125;</span></code></pre></div><p>在resources目录下的templates下创建模板页面<code>index.html</code></p><div class="code-wrapper"><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>object</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;session.user&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!--从session中获取User对象,User对象在之前已经添加到了session中</span>    <span class="token attr-name">&lt;p</span><span class="token punctuation">></span></span>地区:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;#locale.country&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--获取国家--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>firstName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;#object.firstName&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--获取user的firstName--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>lastName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;session.user.lastName&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--获取user的lastName--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>性别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*&#123;sex&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--获取user的sex--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;https://www.baidu.com&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这里是连接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>insert</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>~&#123;test::p&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></div><p>运行项目，访问index就会显示模板页面的内容。</p><h4 id="使用Thymeleaf配置国际化页面"><a href="#使用Thymeleaf配置国际化页面" class="headerlink" title="使用Thymeleaf配置国际化页面"></a>使用Thymeleaf配置国际化页面</h4><p>略…</p><h2 id="Spring-Boot-实现Web的常用功能"><a href="#Spring-Boot-实现Web的常用功能" class="headerlink" title="Spring Boot 实现Web的常用功能"></a>Spring Boot 实现Web的常用功能</h2><h3 id="Spring-MVC功能扩展实现"><a href="#Spring-MVC功能扩展实现" class="headerlink" title="Spring MVC功能扩展实现"></a>Spring MVC功能扩展实现</h3><h4 id="路径映射"><a href="#路径映射" class="headerlink" title="路径映射"></a>路径映射</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token comment">//标注是必须的</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MVCConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 映射路径到index.html ,访问/index和、index.html时     *都会到事先准备好的theamleaf页面 index.html     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span><span class="token class-name">ViewControllerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/index"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/index.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h4 id="自定义一个拦截器"><a href="#自定义一个拦截器" class="headerlink" title="自定义一个拦截器"></a>自定义一个拦截器</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFilter</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//拦截请求</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"filter it"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//返回响应使调用(只有在preHandle返回true时调用)</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">ModelAndView</span> modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"response it"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//本次请求响应结束后调用，用于清理占用资源等(只有在preHandle返回true时调用)</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"free"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>在上面的<code>MVCConfig</code>配置类添加重写方法。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>myFilter<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token comment">//添加过滤路径</span>                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/NANA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//排除路径(放行)</span>    <span class="token punctuation">&#125;</span></code></pre></div><p>以上配置让访问除了<code>/NANA</code>路径的所有请求都会触发自定义的过滤器。</p><h3 id="Spring-Boot-整合Servlet三大组件"><a href="#Spring-Boot-整合Servlet三大组件" class="headerlink" title="Spring Boot 整合Servlet三大组件"></a>Spring Boot 整合Servlet三大组件</h3><h4 id="组件注册整合Servlet三组件"><a href="#组件注册整合Servlet三组件" class="headerlink" title="组件注册整合Servlet三组件"></a>组件注册整合Servlet三组件</h4><h5 id="整合Servlet"><a href="#整合Servlet" class="headerlink" title="整合Servlet"></a>整合Servlet</h5><p>编写servlet类</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        req<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html; charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>编写配置类</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ServletRegistrationBean</span> <span class="token function">getServlet</span><span class="token punctuation">(</span><span class="token class-name">TestServlet</span> servlet<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">ServletRegistrationBean</span> registrationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span>servlet<span class="token punctuation">,</span><span class="token string">"/servletTest1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置路径映射</span>        registrationBean<span class="token punctuation">.</span><span class="token function">addUrlMappings</span><span class="token punctuation">(</span><span class="token string">"/servletTest11"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加路径映射</span>        <span class="token keyword">return</span> registrationBean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>访问<code>/servletTest1</code>和<code>/servletTest11</code>都将会交给编写的这个Servlet类处理</p><h5 id="组合Filter"><a href="#组合Filter" class="headerlink" title="组合Filter"></a>组合Filter</h5><p>编写Servlet类</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestFilter</span> <span class="token keyword">extends</span> <span class="token class-name">HttpFilter</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户访问了"</span><span class="token operator">+</span>request<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>编写配置类</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">FilterRegistrationBean</span> <span class="token function">getFilter</span><span class="token punctuation">(</span><span class="token class-name">TestFilter</span> filter<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">FilterRegistrationBean</span> registrationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">;</span>        registrationBean<span class="token punctuation">.</span><span class="token function">setUrlPatterns</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registrationBean<span class="token punctuation">.</span><span class="token function">addUrlPatterns</span><span class="token punctuation">(</span><span class="token string">"/tests"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> registrationBean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>访问<code>tests</code>和<code>test</code>就会被自定义的filter过滤</p><h5 id="组合Listener"><a href="#组合Listener" class="headerlink" title="组合Listener"></a>组合Listener</h5><p>编写Listenner类</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestListener</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextListener</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> sce<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"创建了对象"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> sce<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"销毁了对象"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>配置类</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListenerConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ServletListenerRegistrationBean</span> <span class="token function">getListener</span><span class="token punctuation">(</span><span class="token class-name">TestListener</span> listener<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">ServletListenerRegistrationBean</span> listenerRegistrationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletListenerRegistrationBean</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> listenerRegistrationBean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h4 id="使用路径扫描整合Servlet组件"><a href="#使用路径扫描整合Servlet组件" class="headerlink" title="使用路径扫描整合Servlet组件"></a>使用路径扫描整合Servlet组件</h4><p>将前面的<code>Servlet</code>类<code>Filter</code>类<code>Listener</code>类的<code>Component</code>注解注释调,使用<code>@WebServlet</code> <code>@WebFilter</code> <code>@WebListener</code>注解,然后再主程序启动类调价<code>@ServletComponentScan</code>注解。</p><h3 id="文件的上传下载"><a href="#文件的上传下载" class="headerlink" title="文件的上传下载"></a>文件的上传下载</h3><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><p>文件的上传可以使用Springboot整合Servlet实现，下面是使用Springboot的方法上传文件。</p><p>编写前端thymeleaf页面</p><div class="code-wrapper"><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>文件上传<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/upload<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--这个input的name很重要,需要与后端相同--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>files<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--通过后端设置的参数显示是否上传成功--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;uploadStatus&#125;<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;uploadStatus&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></div><p>编写控制类</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token comment">//指定配置文件中的名称。</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"upload"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileController</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> dirPath<span class="token punctuation">;</span><span class="token comment">//文件上传的跟路径,再配置文件中配置</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDirPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> dirPath<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDirPath</span><span class="token punctuation">(</span><span class="token class-name">String</span> dirPath<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dirPath <span class="token operator">=</span> dirPath<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//返回上传文件的前端界面</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/toupload"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toUploadPage</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"upload"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//处理上传的文件,MultipartFile[] 的参数名一定要与前端的name一致</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getFile</span><span class="token punctuation">(</span><span class="token class-name">MultipartFile</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files<span class="token punctuation">,</span><span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dirPath<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string">"error"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//为model加入象征是否上传成功的参数，供thymeleaf使用</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"uploadStatus"</span><span class="token punctuation">,</span><span class="token string">"上传成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>files<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"uploadStatus"</span><span class="token punctuation">,</span><span class="token string">"上传失败,无法收到文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"upload"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//可以处理批量上传，在本实例中只处理了一个文件上传。</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> file<span class="token operator">:</span>files<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> name <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            name <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"_"</span><span class="token operator">+</span>name<span class="token punctuation">;</span>            <span class="token class-name">File</span> filepath <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dirPath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>filepath<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                filepath<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">try</span><span class="token punctuation">&#123;</span>                file<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dirPath<span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">/*                //一下方法也可以保存文件，但是复杂写                FileOutputStream os = new FileOutputStream(dirPath+name);                InputStream is = file.getInputStream();                byte[] buffer = new byte[1024];                int length = 0;                while((length=is.read(buffer))!=-1)&#123;                    os.write(buffer,0,length);                &#125;                os.close();                is.close();//记得关闭流                */</span>            <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//异常则返回失败</span>                model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"uploadStatus"</span><span class="token punctuation">,</span><span class="token string">"上传失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token string">"upload"</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token string">"upload"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>再配置文件中配置</p><div class="code-wrapper"><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#thymeleaf配置</span><span class="token key attr-name">spring.thymeleaf.cache</span><span class="token punctuation">=</span><span class="token value attr-value">false</span><span class="token key attr-name">spring.thymeleaf.mode</span><span class="token punctuation">=</span><span class="token value attr-value">HTML</span><span class="token comment">#文件最大大小限制</span><span class="token key attr-name">spring.servlet.multipart.max-file-size</span><span class="token punctuation">=</span><span class="token value attr-value">3MB</span><span class="token comment">#请求大小限制</span><span class="token key attr-name">spring.servlet.multipart.max-request-size</span><span class="token punctuation">=</span><span class="token value attr-value">10MB</span><span class="token comment">#配置路径,如果不想错，配置成文件夹，/结尾</span><span class="token key attr-name">upload.dirPath</span><span class="token punctuation">=</span><span class="token value attr-value">E:/Zfile/</span></code></pre></div><p>访问<code>toupload</code>跳转到<code>upload.html</code>上传文件即可。保存到配置的文件夹</p><p>如果文件上传超过配置的大小，我在网络找到一下解决方案。</p><p>可以通过捕捉全局异常显示异常信息</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Error</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">exceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"出现错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"捕捉到异常>>"</span><span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p><a href="https://juejin.cn/post/6959520793063587848">Spring Boot项目优雅的处理全局异常</a></p><p><a href="https://blog.csdn.net/qq_41835496/article/details/97429517"> 解决 SpringBoot 文件上传 MultipartException 异常问题</a></p><h4 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h4><p>英文名称的下载</p><p>没错，中英文文件下载是有差异的。</p><p>再上面文件上传控制类中添加</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/download"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token function">download</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//File.separator是文件路径的分隔符,不同操作系统不同的分隔符。</span>    <span class="token comment">//dirPath是在上面的例子中配置文件中配置的</span>    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dirPath<span class="token operator">+</span><span class="token class-name">File</span><span class="token punctuation">.</span>separator<span class="token operator">+</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HttpHeaders</span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置内容处理格式</span>    headers<span class="token punctuation">.</span><span class="token function">setContentDispositionFormData</span><span class="token punctuation">(</span><span class="token string">"attachment"</span><span class="token punctuation">,</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置内容类型</span>    headers<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span>APPLICATION_OCTET_STREAM<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">&#123;</span>        <span class="token comment">//返回文件</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">readFileToByteArray</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">,</span>headers<span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//出现异常,如找不到文件,返回错误信息.</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>EXPECTATION_FAILED<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>访问<code>/download?filname=文件名</code>则可以下载dirPath下的相关文件。</p><p>如果文件名是中文,下载的文件名会出现乱码，全部为<code>____</code></p><p>解决方案,针对不同的浏览器进行不同的文件名编码。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>filename<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span> <span class="token string">"utf-8"</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token string">"ISO8859-1"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    filename <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>headers<span class="token punctuation">.</span><span class="token function">setContentDispositionFormData</span><span class="token punctuation">(</span><span class="token string">"attachment"</span><span class="token punctuation">,</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><h2 id="SpringBoot缓存管理"><a href="#SpringBoot缓存管理" class="headerlink" title="SpringBoot缓存管理"></a>SpringBoot缓存管理</h2><h3 id="体验默认缓存"><a href="#体验默认缓存" class="headerlink" title="体验默认缓存"></a>体验默认缓存</h3><h4 id="在配置文件中配置"><a href="#在配置文件中配置" class="headerlink" title="在配置文件中配置"></a>在配置文件中配置</h4><div class="code-wrapper"><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#展示JPA进行数据库查询的SQL语句</span><span class="token key attr-name">spring.jpa.show-sql</span><span class="token punctuation">=</span><span class="token value attr-value">true</span></code></pre></div><h4 id="创建Server类"><a href="#创建Server类" class="headerlink" title="创建Server类"></a>创建Server类</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JpaService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">DiscussRepository</span> repository<span class="token punctuation">;</span>    <span class="token class-name">JpaService</span><span class="token punctuation">(</span><span class="token class-name">DiscussRepository</span> repository<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>repository <span class="token operator">=</span> repository<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">JpaTest</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">JpaTest</span><span class="token punctuation">></span></span> optional <span class="token operator">=</span> repository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JSONObject</span> object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>optional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> optional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h4 id="创建Controller类"><a href="#创建Controller类" class="headerlink" title="创建Controller类"></a>创建Controller类</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CacheTest</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">JpaService</span> service<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token class-name">CacheTest</span><span class="token punctuation">(</span><span class="token class-name">JpaService</span> service<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>service <span class="token operator">=</span> service<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/get"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">JpaTest</span> test <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token string">"1234"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JSONObject</span> object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        object<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>test<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> object<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>运行项目,访问&#x2F;get,刷新一次页面就会在控制台输出一次SQL语句。</p><h4 id="在启动类上添加"><a href="#在启动类上添加" class="headerlink" title="在启动类上添加"></a>在启动类上添加</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableCaching</span><span class="token comment">//开启Springboot缓存管理支持</span></code></pre></div><h4 id="再Service类的查询方法添加"><a href="#再Service类的查询方法添加" class="headerlink" title="再Service类的查询方法添加"></a>再Service类的查询方法添加</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">"jpatest"</span><span class="token punctuation">)</span><span class="token comment">//将查询结果存放再SpringBoot的默认缓存为comment的名称空间。</span></code></pre></div><p>在没有添加其他其他的缓存组件的情况下，Springboot会开启默认缓存管理组件,此时再访问相关页面，无论刷新多少次都只会有一条sql语句被打印，说明只查询了依次数据库，后面的数据都来自于缓存。</p><h3 id="SpringBoot缓存注解"><a href="#SpringBoot缓存注解" class="headerlink" title="SpringBoot缓存注解"></a>SpringBoot缓存注解</h3><p><font color="blue"><code>@EnableCaching</code></font> 由Spring框架提供,配置再类上开启基于注解的缓存支持</p><p><font color="blue"><code>@Cacheable</code></font>  有Spring框架提供，作用于类或方法，用于对方法的查询结果缓存储存。</p><h4 id="Cacheable注解"><a href="#Cacheable注解" class="headerlink" title="@Cacheable注解"></a>@Cacheable注解</h4><table><thead><tr><th><strong>属性名</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>value&#x2F;cacheNames</td><td>指定缓存空间的名称，必配属性。这两个属性二选一使用</td></tr><tr><td>key</td><td>指定缓存数据的key，默认使用方法参数值，可以使用SpEL表达式</td></tr><tr><td>keyGenerator</td><td>指定缓存数据的key的生成器，与key属性二选一使用</td></tr><tr><td>cacheManager</td><td>指定缓存管理器</td></tr><tr><td>cacheResolver</td><td>指定缓存解析器，与cacheManager属性二选一使用</td></tr><tr><td>condition</td><td>指定在符合某条件下，进行数据缓存</td></tr><tr><td>unless</td><td>指定在符合某条件下，不进行数据缓存</td></tr><tr><td>sync</td><td>指定是否使用异步缓存。默认false</td></tr></tbody></table><p>value&#x2F;cacheNames  的作用相同可以同时指定多个名称空间。</p><p>key 属性的作用是指定缓存数据对应的唯一标识，默认使用注解标记的方法参数值。缓存的本质是Map,key用于指定唯一标识,value用于指定缓存数据。</p><p>可以手动设置key属性的值,或者使用Spring框架提供的SpEL表达式</p><table><thead><tr><th>名称</th><th>位置</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>methodName</td><td>root对象</td><td>当前被调用的方法名</td><td>#root.methodname</td></tr><tr><td>method</td><td>root对象</td><td>当前被调用的方法</td><td>#root.method.name</td></tr><tr><td>target</td><td>root对象</td><td>当前被调用的目标对象实例</td><td>#root.target</td></tr><tr><td>targetClass</td><td>root对象</td><td>当前被调用的目标对象的类</td><td>#root.targetClass</td></tr><tr><td>args</td><td>root对象</td><td>当前被调用的方法的参数列表</td><td>#root.args[0]</td></tr><tr><td>caches</td><td>root对象</td><td>当前方法调用使用的缓存列表</td><td>#root.caches[0].name</td></tr><tr><td>Argument Name</td><td>执行上下文</td><td>当前被调用的方法的参数，如findArtisan(Artisan artisan),可以通过#artsian.id获得参数</td><td>#artsian.id</td></tr><tr><td>result</td><td>执行上下文</td><td>方法执行后的返回值（仅当方法执行后的判断有效，如 unless cacheEvict的beforeInvocation&#x3D;false）</td><td>#result</td></tr></tbody></table><p>@CachePut注解是由Spring框架提供的，可以作用于类或方法（通常用在数据更新方法上），该注解的作用是更新缓存数据。@CachePut注解的执行顺序是，先进行方法调用，然后将方法结果更新到缓存中。</p><p>@CachePut注解也提供了多个属性，这些属性与@Cacheable注解的属性完全相同。</p><h4 id="CacheEvict注解"><a href="#CacheEvict注解" class="headerlink" title="@CacheEvict注解"></a>@CacheEvict注解</h4><p>@CacheEvict注解是由Spring框架提供的，可以作用于类或方法（通常用在数据删除方法上），该注解的作用是删除缓存数据。@CacheEvict注解的默认执行顺序是，先进行方法调用，然后将缓存进行清除。</p><p>@CacheEvict注解也提供了多个属性，这些属性与@Cacheable注解的属性基本相同，除此之外，还额外提供了两个特殊属性allEntries和beforeInvocation</p><p>（1）allEntries属性<br>   allEntries属性表示是否清除指定缓存空间中的所有缓存数据，默认值为false（即默认只删除指定key对应的缓存数据）。<br>（2）beforeInvocation属性<br>   beforeInvocation属性表示是否在方法执行之前进行缓存清除，默认值为false（即默认在执行方法后再进行缓存清除）。</p><h4 id="Caching注解"><a href="#Caching注解" class="headerlink" title="@Caching注解"></a>@Caching注解</h4><p>@Caching注解用于针对复杂规则的数据缓存管理，可以作用于类或方法，在@Caching注解内部包含有Cacheable、put和evict三个属性，分别对应于@Cacheable、@CachePut和@CacheEvict三个注解。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Caching</span><span class="token punctuation">(</span>cacheable<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span><span class="token string">"comment"</span><span class="token punctuation">,</span>key <span class="token operator">=</span> <span class="token string">"#id"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>put <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">"comment"</span><span class="token punctuation">,</span>key <span class="token operator">=</span> <span class="token string">"#result.author"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Comment</span> <span class="token function">getComment</span><span class="token punctuation">(</span><span class="token keyword">int</span> comment_id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> commentRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>comment_id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>对Comment对象进行缓存,分别使用#id和#result.author.</p><h4 id="CacheConfig注解"><a href="#CacheConfig注解" class="headerlink" title="@CacheConfig注解"></a>@CacheConfig注解</h4><p>@CacheConfig注解使用在类上，主要用于统筹管理类中所有使用@Cacheable、@CachePut和@CacheEvict注解标注方法中的公共属性，这些公共属性包括有cacheNames、keyGenerator、cacheManager和cacheResolver。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@CacheConfig</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">"comment"</span><span class="token punctuation">)</span><span class="token comment">//同意指定缓存空间</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommentService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">CommentRepository</span> commentRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Cacheable</span><span class="token comment">//如果单独设置cacheNames会采用就近设置的缓存空间。</span>    <span class="token keyword">public</span> <span class="token class-name">Comment</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token keyword">int</span> comment_id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Comment</span> comment <span class="token operator">=</span> commentRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>comment_id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> comment<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="SpringBoot-Redis缓存"><a href="#SpringBoot-Redis缓存" class="headerlink" title="SpringBoot Redis缓存"></a>SpringBoot Redis缓存</h3><p>SpringBoot 支持的缓存组件</p><p>（1）Generic<br>（2）JCache (JSR-107) (EhCache 3、Hazelcast、Infinispan等)<br>（3）EhCache 2.x<br>（4）Hazelcast<br>（5）Infinispan<br>（6）Couchbase<br>（7）Redis<br>（8）Caffeine<br>（9）Simple（默认）</p><h4 id="基于注解Redis缓存实现"><a href="#基于注解Redis缓存实现" class="headerlink" title="基于注解Redis缓存实现"></a>基于注解Redis缓存实现</h4><h5 id="添加redis依赖-1"><a href="#添加redis依赖-1" class="headerlink" title="添加redis依赖"></a>添加redis依赖</h5><div class="code-wrapper"><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></div><h5 id="文件配置-1"><a href="#文件配置-1" class="headerlink" title="文件配置"></a>文件配置</h5><div class="code-wrapper"><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#服务器地址</span><span class="token key attr-name">spring.redis.host</span><span class="token punctuation">=</span><span class="token value attr-value">127.0.0.1</span><span class="token comment">#端口</span><span class="token key attr-name">spring.redis.port</span><span class="token punctuation">=</span><span class="token value attr-value">6379</span><span class="token comment">#密码默认空</span><span class="token key attr-name">spring.redis.password</span><span class="token punctuation">=</span></code></pre></div><h5 id="编写Service类"><a href="#编写Service类" class="headerlink" title="编写Service类"></a>编写Service类</h5><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommentService</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">DiscussRepository</span> repository<span class="token punctuation">;</span><span class="token comment">//jpa的repository</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">CommentService</span><span class="token punctuation">(</span><span class="token class-name">DiscussRepository</span> repository<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>repository <span class="token operator">=</span> repository<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">"comment"</span><span class="token punctuation">,</span>unless <span class="token operator">=</span> <span class="token string">"#result==null"</span><span class="token punctuation">)</span><span class="token comment">//结果为空不缓存</span>    <span class="token keyword">public</span> <span class="token class-name">JpaTest</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Optional</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">JpaTest</span><span class="token punctuation">></span></span> optional <span class="token operator">=</span> repository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>optional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> optional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">return</span> optional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//更新缓存，由于@Cacheable标注会默认使用主键作为key，所以再更新缓存时使用相同的key</span>    <span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">"comment"</span><span class="token punctuation">,</span>key<span class="token operator">=</span><span class="token string">"#result.id"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">JpaTest</span> <span class="token function">updataTest</span><span class="token punctuation">(</span><span class="token class-name">JpaTest</span> test<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        repository<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>test<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> test<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//删除缓存</span>    <span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">"comment"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteTest</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        repository<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h5 id="编写Controller类"><a href="#编写Controller类" class="headerlink" title="编写Controller类"></a>编写Controller类</h5><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"> <span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">CommentService</span> service1<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/get2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">get2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">JpaTest</span> jpaTest <span class="token operator">=</span> service1<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token string">"1234"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> jpaTest<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p><font color='red'>打开Redis服务。</font></p><p>如果直接启动项目会抱错<code>DefaultSerializer requires a Serializable payload but received an object of type</code>，是由于没有将对象序列化的缘故,简单来说就是没有将对象如何转存到数据库中进行数据处理.</p><h5 id="修改实体类"><a href="#修改实体类" class="headerlink" title="修改实体类"></a>修改实体类</h5><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JpaTest</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span><span class="token comment">//实现JDK自带的序列化接口</span>    <span class="token annotation punctuation">@Id</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"mes"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"date"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> date<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>此时重新启动项目，访问相关连接，刷新多次，也只会执行依次JPA数据库查询,后面的数据都来自于Redi缓存。</p><h3 id="基于API缓存机制"><a href="#基于API缓存机制" class="headerlink" title="基于API缓存机制"></a>基于API缓存机制</h3><h5 id="创建Service类"><a href="#创建Service类" class="headerlink" title="创建Service类"></a>创建Service类</h5><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApiService</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span>    <span class="token class-name">DiscussRepository</span> repository<span class="token punctuation">;</span><span class="token comment">//jpa repository</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token class-name">ApiService</span><span class="token punctuation">(</span><span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">,</span><span class="token class-name">DiscussRepository</span> repository<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate <span class="token operator">=</span> redisTemplate<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>repository <span class="token operator">=</span> repository<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">JpaTest</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//从缓存中查询</span>        <span class="token class-name">Object</span> object <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">/</span>缓存中有就返回        <span class="token keyword">if</span><span class="token punctuation">(</span>object<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">JpaTest</span><span class="token punctuation">)</span>object<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">JpaTest</span><span class="token punctuation">></span></span> optional <span class="token operator">=</span> repository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>optional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//写入缓存，(key，缓存存活时间，单位)</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>optional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>DAYS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> optional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//删除缓存。</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        repository<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h5 id="Controller类方法"><a href="#Controller类方法" class="headerlink" title="Controller类方法"></a>Controller类方法</h5><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">ApiService</span> apiService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/get3"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">get3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">JpaTest</span> jpaTest <span class="token operator">=</span> apiService<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token string">"1234"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>jpaTest<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> jpaTest<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/delete"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">boolean</span> is <span class="token operator">=</span> apiService<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token string">"1234"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string">"ok"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token string">"no"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div><h2 id="Spring-Security"><a href="#Spring-Security" class="headerlink" title="Spring Security"></a>Spring Security</h2><p>在项目中添加spring-boot-startsecurity依赖</p><div class="code-wrapper"><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></div><p>此时启动启动类，会在控制台窗口生成password，访问任何页面都需要先登录才可以访问，登录的默认用户名是<code>user</code></p><p>MVC Securty安全管理功能在引入依赖后自动生效,其默认的安全配置是<code>SecurityAutoConfiguration</code>和<code>UserDetailsServiceConfiguration</code>中实现的，其中<code>SecurityAutoConfiguration</code>自动化配置<code>SpringBootWebSecurityConfiguration</code>用于启用Web安全管理。<code>UserDetailsServiceConfiguration</code>则用于配置用户信息。</p><h3 id="用户自定义认证"><a href="#用户自定义认证" class="headerlink" title="用户自定义认证"></a>用户自定义认证</h3><p>通过自定义<code>WebSecurtyConfigurationAdapter</code>类型的Bean组件可以完全关闭Security提供的Web应用默认配置或覆盖默认访问规则，但是不会关闭<code>UserDetailsService</code>用户信息自动配置类.可以自定义<code>UserDetailsService</code>、<code>AuthenticationProvider</code>或<code>AuthenticationManage</code>类型的Bean组件关闭<code>UserDetailsService</code></p><p>WebSecurityConfigurationAdapter类的主要方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>configure(AuthenticationManageBuilder auth)</td><td>定制用户认证管理器来实现用户认证</td></tr><tr><td>configure(HttpSecurity http)</td><td>定制基于Http请求的用户访问控制</td></tr></tbody></table><p>SpringSecurity提供多种自定义认证方式：内存身份认证，JDBC身份认证，LDAP身份认证，身份认证提供商，身份详情服务。</p><h4 id="内存身份认证"><a href="#内存身份认证" class="headerlink" title="内存身份认证"></a>内存身份认证</h4><h5 id="自定义WebSecurityConfigurerAdapter配置类"><a href="#自定义WebSecurityConfigurerAdapter配置类" class="headerlink" title="自定义WebSecurityConfigurerAdapter配置类"></a>自定义WebSecurityConfigurerAdapter配置类</h5><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token comment">//开启MVC Security支持</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationManagerBuilder</span> auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//设置密码的默认编码器</span>        <span class="token class-name">BCryptPasswordEncoder</span> encoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用内存用户信息</span>        auth<span class="token punctuation">.</span><span class="token function">inMemoryAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">passwordEncoder</span><span class="token punctuation">(</span>encoder<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"shitou"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span>encoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"common"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"ddd"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span>encoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"vip"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>以上配置了两个用户的用户名，密码和角色。</p><p>SpringSecurity提供多种密码编辑器：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">BCryptPasswordEncoder</span><span class="token class-name">Pbkdf2PasswordEncoder</span><span class="token class-name">SCryptPasswordEncoder</span></code></pre></div><p>使用roles(“common”)和authorities(“ROLE_common”)是等效的(当前代码的规则还没有生效)。</p><p>内存认证只用于开发中。</p><p>再次启动项目，访问相关页面，输入密码就可以登录。</p><h4 id="JDBC认证"><a href="#JDBC认证" class="headerlink" title="JDBC认证"></a>JDBC认证</h4><h5 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h5><div class="code-wrapper"><pre class="language-54xml" data-language="54xml"><code class="language-54xml">&lt;!--数据库连接驱动--&gt;&lt;dependency&gt;    &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;&lt;&#x2F;dependency&gt;&lt;!--数据库连接启动器--&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;spring-boot-starter-jdbc&lt;&#x2F;artifactId&gt;&lt;&#x2F;dependency&gt;</code></pre></div><h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><div class="code-wrapper"><pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://localhost:3306/test?serverTimezone=UTC</span><span class="token key attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token value attr-value">myproject</span><span class="token key attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token value attr-value">project</span></code></pre></div><h5 id="依次创建MySQL表"><a href="#依次创建MySQL表" class="headerlink" title="依次创建MySQL表"></a>依次创建MySQL表</h5><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SET</span> NAMES utf8mb4<span class="token punctuation">;</span><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Table structure for t_customer</span><span class="token comment">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>t_customer<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>t_customer<span class="token punctuation">`</span></span>  <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>username<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>password<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>valid<span class="token punctuation">`</span></span> <span class="token keyword">tinyint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>username<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">,</span>  <span class="token keyword">INDEX</span> <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> utf8 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8_general_ci ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Records of t_customer</span><span class="token comment">-- ----------------------------</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>t_customer<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span> <span class="token string">'$2a$10$Bg0S7sbxO5Fbobk1Rj2VsuT5nRrhrCu2roqY5ObsC432T/ugW8c7G'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>t_customer<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'lisi'</span><span class="token punctuation">,</span> <span class="token string">'$2a$10$Bg0S7sbxO5Fbobk1Rj2VsuT5nRrhrCu2roqY5ObsC432T/ugW8c7G'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre></div><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SET</span> NAMES utf8mb4<span class="token punctuation">;</span><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Table structure for t_authority</span><span class="token comment">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>t_authority<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>t_authority<span class="token punctuation">`</span></span>  <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>authority<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> utf8 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8_general_ci ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Records of t_authority</span><span class="token comment">-- ----------------------------</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>t_authority<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'ROLE_common'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>t_authority<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'ROLE_vip'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre></div><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SET</span> NAMES utf8mb4<span class="token punctuation">;</span><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Table structure for t_customer_authority</span><span class="token comment">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>t_customer_authority<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>t_customer_authority<span class="token punctuation">`</span></span>  <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>customer_id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>authority_id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">,</span>  <span class="token keyword">INDEX</span> <span class="token identifier"><span class="token punctuation">`</span>t1<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>customer_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">,</span>  <span class="token keyword">INDEX</span> <span class="token identifier"><span class="token punctuation">`</span>t2<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>authority_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">,</span>  <span class="token keyword">CONSTRAINT</span> <span class="token identifier"><span class="token punctuation">`</span>t1<span class="token punctuation">`</span></span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>customer_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token identifier"><span class="token punctuation">`</span>t_customer<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">CASCADE</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">,</span>  <span class="token keyword">CONSTRAINT</span> <span class="token identifier"><span class="token punctuation">`</span>t2<span class="token punctuation">`</span></span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>authority_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token identifier"><span class="token punctuation">`</span>t_authority<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">CASCADE</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> utf8 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8_general_ci ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span><span class="token comment">-- ----------------------------</span><span class="token comment">-- Records of t_customer_authority</span><span class="token comment">-- ----------------------------</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>t_customer_authority<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>t_customer_authority<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre></div><h5 id="编写配置类"><a href="#编写配置类" class="headerlink" title="编写配置类"></a>编写配置类</h5><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationManagerBuilder</span> auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">BCryptPasswordEncoder</span> encoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//username和password的字段名可以是其他.</span>        <span class="token class-name">String</span> userSql<span class="token operator">=</span><span class="token string">"select username,`password`,valid from t_customer "</span><span class="token operator">+</span><span class="token string">"where username=?"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> authoritySql <span class="token operator">=</span> <span class="token string">"select username,t_authority.authority from "</span> <span class="token operator">+</span>                <span class="token string">"t_customer,t_authority,t_customer_authority where "</span> <span class="token operator">+</span>                <span class="token string">"t_customer_authority.authority_id=t_authority.id and "</span> <span class="token operator">+</span>                <span class="token string">"t_customer_authority.customer_id=t_customer.id and "</span> <span class="token operator">+</span>                <span class="token string">"t_customer.username=?"</span><span class="token punctuation">;</span>        auth<span class="token punctuation">.</span><span class="token function">jdbcAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">passwordEncoder</span><span class="token punctuation">(</span>encoder<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">dataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">usersByUsernameQuery</span><span class="token punctuation">(</span>userSql<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">authoritiesByUsernameQuery</span><span class="token punctuation">(</span>authoritySql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>以上代码Springboot会根据前端输入的username和password验证身份.</p><p>由于jdbc验证每次都要查询数据库,会降低网站性能。</p><h3 id="UserDetailsService身份认证"><a href="#UserDetailsService身份认证" class="headerlink" title="UserDetailsService身份认证"></a>UserDetailsService身份认证</h3><p>创建一个Service类</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDetailsServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetailsService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">ReadUsers</span> readUsers<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token class-name">UserDetailsServiceImpl</span><span class="token punctuation">(</span><span class="token class-name">ReadUsers</span> readUsers<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>readUsers <span class="token operator">=</span> readUsers<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">UserDetails</span> <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UsernameNotFoundException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//User user = readUsers.getUserInfo(username);//这里用于查询一个User，有用户名和密码权限即可</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>user<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UsernameNotFoundException</span><span class="token punctuation">(</span><span class="token string">"no this user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SimpleGrantedAuthority</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取权限有前缀ROLE_</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleGrantedAuthority</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UserDetails</span> userDetails <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span></span>User</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userDetails<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>添加一个</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">UserDetailsServiceImpl</span> userDetailsService<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">LoginFilter</span> loginFilter<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token class-name">SecurityConfig</span><span class="token punctuation">(</span><span class="token class-name">UserDetailsServiceImpl</span> userDetailsService<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userDetailsService <span class="token operator">=</span> userDetailsService<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationManagerBuilder</span> auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">BCryptPasswordEncoder</span> encoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        auth<span class="token punctuation">.</span><span class="token function">userDetailsService</span><span class="token punctuation">(</span>userDetailsService<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">passwordEncoder</span><span class="token punctuation">(</span>encoder<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置密码编码器</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        http<span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">frameOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sameOrigin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">//主页放行,注册页面放行</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">//静态资源放行            </span>            <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/js"</span><span class="token punctuation">,</span><span class="token string">"/js/**"</span><span class="token punctuation">,</span><span class="token string">"/css"</span><span class="token punctuation">,</span><span class="token string">"/css/**"</span><span class="token punctuation">,</span><span class="token string">"/jpg"</span><span class="token punctuation">,</span><span class="token string">"/jpg/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">,</span><span class="token string">"/user/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token comment">//用户页面必须登录，权限为ROLE_0;</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">,</span><span class="token string">"/login/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        http<span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">loginPage</span><span class="token punctuation">(</span><span class="token string">"/login.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//登录页面</span>                <span class="token punctuation">.</span><span class="token function">loginProcessingUrl</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//接受登录请求的链接</span>                <span class="token punctuation">.</span><span class="token function">defaultSuccessUrl</span><span class="token punctuation">(</span><span class="token string">"/user/home.html"</span><span class="token punctuation">)</span><span class="token comment">//成功后跳转</span>                <span class="token punctuation">.</span><span class="token function">usernameParameter</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span><span class="token comment">//默认为username,如果前端name是email则改为email</span>                <span class="token punctuation">.</span><span class="token function">passwordParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token comment">//默认password</span>                <span class="token punctuation">.</span><span class="token function">failureUrl</span><span class="token punctuation">(</span><span class="token string">"/login.html?error=2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        http<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logoutUrl</span><span class="token punctuation">(</span><span class="token string">"/logout"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logoutSuccessUrl</span><span class="token punctuation">(</span><span class="token string">"/index.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//登出页面和登出后跳转页面。</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>简单实现用户注册自动登录：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOline</span><span class="token punctuation">(</span><span class="token class-name">String</span> email<span class="token punctuation">,</span><span class="token class-name">String</span> password<span class="token punctuation">,</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">UsernamePasswordAuthenticationToken</span> authenticationToken <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        authenticationToken<span class="token punctuation">.</span><span class="token function">setDetails</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebAuthenticationDetails</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Authentication</span> authentication <span class="token operator">=</span> authenticationToken<span class="token punctuation">;</span>        <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAuthentication</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><h2 id="SpringBoot任务管理"><a href="#SpringBoot任务管理" class="headerlink" title="SpringBoot任务管理"></a>SpringBoot任务管理</h2><h3 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h3><h4 id="没有返回值的异步任务"><a href="#没有返回值的异步任务" class="headerlink" title="没有返回值的异步任务"></a>没有返回值的异步任务</h4><p>在启动类添加@EnableAsync注解启动异步任务支持</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableAsync</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2Application</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Demo2Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>创建Service类</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAsyncService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Async</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendSMS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发送短信验证码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Long</span> endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"短信业务话费时间"</span><span class="token operator">+</span><span class="token punctuation">(</span>endTime<span class="token operator">-</span>startTime<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>创建一个Controller测试</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAsyncController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">MyAsyncService</span> myAsyncService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/sendSMS"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sendSMS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            myAsyncService<span class="token punctuation">.</span><span class="token function">sendSMS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Long</span> endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主进程花费时间"</span><span class="token operator">+</span><span class="token punctuation">(</span>endTime<span class="token operator">-</span>startTime<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>访问<code>/sendSMS</code> 当主进程已经完成后一会，短信业务进程才输出结果已完成。</p><h4 id="有返回值的异步任务"><a href="#有返回值的异步任务" class="headerlink" title="有返回值的异步任务"></a>有返回值的异步任务</h4><p>再刚才的Service类中添加</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Async</span>    <span class="token keyword">public</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">processA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2222</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Long</span> endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A End:"</span><span class="token operator">+</span><span class="token punctuation">(</span>endTime<span class="token operator">-</span>startTime<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AsyncResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Async</span>    <span class="token keyword">public</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">processB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2222</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Long</span> endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B end:"</span><span class="token operator">+</span><span class="token punctuation">(</span>endTime<span class="token operator">-</span>startTime<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AsyncResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div><p>Controller类中添加</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/process"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">Long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Future</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token class-name">A</span> <span class="token operator">=</span> myAsyncService<span class="token punctuation">.</span><span class="token function">processA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Future</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token class-name">B</span> <span class="token operator">=</span> myAsyncService<span class="token punctuation">.</span><span class="token function">processB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"all return = "</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token class-name">B</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token class-name">Long</span> endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主进程花费时间"</span><span class="token operator">+</span><span class="token punctuation">(</span>endTime<span class="token operator">-</span>startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre></div><p>访问process界面，主进程花费的时间并不是两个子进程的和，说明两个子进程是异步执行，且返回值也正确。</p><p>关于<a href="https://blog.csdn.net/u014209205/article/details/80598209"> JAVA Future类</a></p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>开发</tag>
      
      <tag>Servlet</tag>
      
      <tag>Spring Boot</tag>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MongoDB Java Driver</title>
    <link href="/2022/02/24/%E5%BC%80%E5%8F%91/%E5%90%8E%E7%AB%AF/MongoDB%20Java%20Driver/"/>
    <url>/2022/02/24/%E5%BC%80%E5%8F%91/%E5%90%8E%E7%AB%AF/MongoDB%20Java%20Driver/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="jsandcss/player/APlayer.min.css"><script src="/jsandcss/player/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/jsandcss/player/Meting.min.js"></script><h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><p>ConnectionString</p><p>表示一个连接字符串。连接字符串描述了要使用的主机和选项。</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">mongodb:<span class="token comment">//[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database.collection][?options]]</span></code></pre></div><details>    <summary><font color="blue">参数详情</font></summary><ul>    <li>    <b><font color="white" style="background:#808080">mongodb://</font></b> : 是必需的前缀，以标识这是标准连接格式的字符串。    </li>    <li>    <b><font color="white" style="background:#808080">username:password@</font></b> : 用户名:密码:可选:@。如果给出，驱动程序将尝试登录到数据库服务器连接后的数据库。对于某些身份验证机制，只指定用户名而不指定密码，在这种情况下，用户名之后的“:”也会被删除        </li>    <li>    <b><font color="white" style="background:#808080">host1</font></b> : 是连接字符串中唯一必需的部分。它标识要连接的服务器地址。            </li>    <li>    <b><font color="white" style="background:#808080">:portX</font></b> : 是可选的，如果没有提供，默认为:27017。            </li>    <li>    <b><font color="white" style="background:#808080">/database</font></b> : /database是要登录的数据库名，因此只有在使用`username:password@`语法时才相关。如果不指定，默认使用“admin”数据库。            </li>    <li>    <b><font color="white" style="background:#808080">?options</font></b> : 连接选项。注意，如果数据库不在，在最后一个主机和`?`之间仍然需要 `/`。选项为“名称=值”对，用“&”分隔。为了向后兼容，";"可以作为除"&"之外的分隔符接受，但应视为已弃用。        </li></ul></details><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">mongodb<span class="token operator">+</span>srv:<span class="token comment">//[username:password@]host[/[database][?options]]</span></code></pre></div><details><summary><font color="blue">参数详情</font></summary><ul>    <li>        <b><font color="white" style="background:#808080">mongodb+srv://</font></b>是此格式所需的前缀。    </li>    <li>        <b><font color="white" style="background:#808080">username:password@</font></b>如果给出，驱动程序将尝试登录到数据库服务器连接后的数据库。对于某些身份验证机制，只指定用户名而不指定密码，在这种情况下，用户名之后的“:”也会被删除    </li>    <li>        <b><font color="white" style="background:#808080">host</font></b>是URI中唯一必需的部分。它标识一个主机名，在主机名前面加上“_mongodb._tcp”，然后从域名服务器查找SRV记录。每个SRV记录的主机/端口成为用来连接的种子列表，就像使用正常的mongodb协议在URI中提供的每个主机/端口对一样。    </li>    <li>        <b><font color="white" style="background:#808080">/database</font></b>/database是要登录的数据库名，因此只有在使用“用户名:密码@”语法时才相关。如果不指定，默认使用“admin”数据库。    </li>    <li>        <b><font color="white" style="background:#808080">?options</font></b>连接选项。注意，如果数据库不在，在最后一个主机和`?`之间仍然需要 `/`。选项为“名称=值”对，用“&”分隔。为了向后兼容，";"可以作为除"&"之外的分隔符接受，但应视为已弃用。    </li></ul></details><h2 id="连接到数据库"><a href="#连接到数据库" class="headerlink" title="连接到数据库"></a>连接到数据库</h2><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ConnectionString</span> connectionString <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionString</span><span class="token punctuation">(</span><span class="token string">"....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">MongoClientSettings</span> settings <span class="token operator">=</span>     <span class="token comment">//返回'MongoClientSettings.Builder',一个MongoclientSettings的构建器，这样MongoclientSettings可以是不可变的，并且通过链接支持更简单的构造。</span>    <span class="token class-name">MongoClientSettings</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//返回'MongoClientSettings.Builder',从给定的ConnectionString获取设置，并将它们应用到构建器</span>        <span class="token punctuation">.</span><span class="token function">applyConnectionString</span><span class="token punctuation">(</span>connectionString<span class="token punctuation">)</span>    <span class="token comment">//返回'MongoClientSettings',构建一个MongoClientSettings实例。</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//为使用settings创建一个新连接</span><span class="token class-name">MongoClient</span> mongoClient <span class="token operator">=</span> <span class="token class-name">MongoClients</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取给定数据库名称的 Mongo 数据库实例。</span><span class="token class-name">MongoDatabase</span> database <span class="token operator">=</span> mongoClient<span class="token punctuation">.</span><span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><details><summary>☟MongoClient的一些方法☟,  官方文档☞<a herf="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/mongodb-driver-sync/com/mongodb/client/MongoClient.html">♡♡♡</a>☚</summary>    <table><tr><th class="colFirst" scope="col" _msthash="4258514" _msttexthash="20502521">修饰符和类型</th><th class="colSecond" scope="col" _msthash="4258644" _msttexthash="5267275">方法</th><th class="colLast" scope="col" _msthash="4258774" _msttexthash="6157333">描述</th></tr><tr id="i0" class="altColor"><td class="colFirst"><code>void</code></td><th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#close()">close</a></span>()</code></th><td class="colLast"><div class="block" _msthash="176111" _msttexthash="318034314">关闭客户端，这将关闭所有基础缓存资源，例如，包括套接字和后台监视线程。</div></td></tr><tr id="i1" class="rowColor"><td class="colFirst"><code><a href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/mongodb-driver-core/com/mongodb/connection/ClusterDescription.html?is-external=true" title="class or interface in com.mongodb.connection" class="externalLink">ClusterDescription</a></code></td><th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getClusterDescription()">getClusterDescription</a></span>()</code></th><td class="colLast"><div class="block" _msthash="176358" _msttexthash="34794968">获取当前群集说明。</div></td></tr><tr id="i2" class="altColor"><td class="colFirst"><code><a href="MongoDatabase.html" title="interface in com.mongodb.client">MongoDatabase</a></code></td><th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getDatabase(java.lang.String)">getDatabase</a></span>&ZeroWidthSpace;(<a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>&nbsp;databaseName)</code></th><td class="colLast"><div class="block" _msthash="176605" _msttexthash="81775863">获取给定数据库名称的 <a href="MongoDatabase.html" title="interface in com.mongodb.client" _istranslated="1"><code _istranslated="1">Mongo 数据库</code></a>实例。</div></td></tr><tr id="i3" class="rowColor"><td class="colFirst"><code><a href="MongoIterable.html" title="interface in com.mongodb.client">MongoIterable</a>&lt;<a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>&gt;</code></td><th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#listDatabaseNames()">listDatabaseNames</a></span>()</code></th><td class="colLast"><div class="block" _msthash="176852" _msttexthash="34376212">获取数据库名称列表</div></td></tr><tr id="i4" class="altColor"><td class="colFirst"><code><a href="MongoIterable.html" title="interface in com.mongodb.client">MongoIterable</a>&lt;<a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html?is-external=true" title="class or interface in java.lang" class="externalLink">String</a>&gt;</code></td><th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#listDatabaseNames(com.mongodb.client.ClientSession)">listDatabaseNames</a></span>&ZeroWidthSpace;(<a href="ClientSession.html" title="interface in com.mongodb.client">ClientSession</a>&nbsp;clientSession)</code></th><td class="colLast"><div class="block" _msthash="177099" _msttexthash="34376212">获取数据库名称列表</div></td></tr><tr id="i5" class="rowColor"><td class="colFirst"><code><a href="ListDatabasesIterable.html" title="interface in com.mongodb.client">ListDatabasesIterable</a>&lt;<a href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/bson/org/bson/Document.html?is-external=true" title="class or interface in org.bson" class="externalLink">Document</a>&gt;</code></td><th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#listDatabases()">listDatabases</a></span>()</code></th><td class="colLast"><div class="block" _msthash="177346" _msttexthash="29749941">获取数据库的列表</div></td></tr><tr id="i6" class="altColor"><td class="colFirst"><code><a href="ListDatabasesIterable.html" title="interface in com.mongodb.client">ListDatabasesIterable</a>&lt;<a href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/bson/org/bson/Document.html?is-external=true" title="class or interface in org.bson" class="externalLink">Document</a>&gt;</code></td><th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#listDatabases(com.mongodb.client.ClientSession)">listDatabases</a></span>&ZeroWidthSpace;(<a href="ClientSession.html" title="interface in com.mongodb.client">ClientSession</a>&nbsp;clientSession)</code></th><td class="colLast"><div class="block" _msthash="177593" _msttexthash="29749941">获取数据库的列表</div></td></tr><tr id="i7" class="rowColor"><td class="colFirst"><code>&lt;TResult&gt;&nbsp;<a href="ListDatabasesIterable.html" title="interface in com.mongodb.client">ListDatabasesIterable</a>&lt;TResult&gt;</code></td><th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#listDatabases(com.mongodb.client.ClientSession,java.lang.Class)">listDatabases</a></span>&ZeroWidthSpace;(<a href="ClientSession.html" title="interface in com.mongodb.client">ClientSession</a>&nbsp;clientSession,             <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html?is-external=true" title="class or interface in java.lang" class="externalLink">Class</a>&lt;TResult&gt;&nbsp;resultClass)</code></th><td class="colLast"><div class="block" _msthash="177840" _msttexthash="29749941">获取数据库的列表</div></td></tr><tr id="i8" class="altColor"><td class="colFirst"><code>&lt;TResult&gt;&nbsp;<a href="ListDatabasesIterable.html" title="interface in com.mongodb.client">ListDatabasesIterable</a>&lt;TResult&gt;</code></td><th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#listDatabases(java.lang.Class)">listDatabases</a></span>&ZeroWidthSpace;(<a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html?is-external=true" title="class or interface in java.lang" class="externalLink">Class</a>&lt;TResult&gt;&nbsp;resultClass)</code></th><td class="colLast"><div class="block" _msthash="178087" _msttexthash="29749941">获取数据库的列表</div></td></tr><tr id="i9" class="rowColor"><td class="colFirst"><code><a href="ClientSession.html" title="interface in com.mongodb.client">ClientSession</a></code></td><th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#startSession()">startSession</a></span>()</code></th><td class="colLast"><div class="block" _msthash="178334" _msttexthash="76420214">创建具有默认选项的客户端会话。</div></td></tr><tr id="i10" class="altColor"><td class="colFirst"><code><a href="ClientSession.html" title="interface in com.mongodb.client">ClientSession</a></code></td><th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#startSession(com.mongodb.ClientSessionOptions)">startSession</a></span>&ZeroWidthSpace;(<a href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/mongodb-driver-core/com/mongodb/ClientSessionOptions.html?is-external=true" title="class or interface in com.mongodb" class="externalLink">ClientSessionOptions</a>&nbsp;options)</code></th><td class="colLast"><div class="block" _msthash="188838" _msttexthash="26401739">创建客户端会话。</div></td></tr><tr id="i11" class="rowColor"><td class="colFirst"><code><a href="ChangeStreamIterable.html" title="interface in com.mongodb.client">ChangeStreamIterable</a>&lt;<a href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/bson/org/bson/Document.html?is-external=true" title="class or interface in org.bson" class="externalLink">Document</a>&gt;</code></td><th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#watch()">watch</a></span>()</code></th><td class="colLast"><div class="block" _msthash="189098" _msttexthash="40966562">为此客户端创建更改流。</div></td></tr><tr id="i12" class="altColor"><td class="colFirst"><code><a href="ChangeStreamIterable.html" title="interface in com.mongodb.client">ChangeStreamIterable</a>&lt;<a href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/bson/org/bson/Document.html?is-external=true" title="class or interface in org.bson" class="externalLink">Document</a>&gt;</code></td><th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#watch(com.mongodb.client.ClientSession)">watch</a></span>&ZeroWidthSpace;(<a href="ClientSession.html" title="interface in com.mongodb.client">ClientSession</a>&nbsp;clientSession)</code></th><td class="colLast"><div class="block" _msthash="189358" _msttexthash="40966562">为此客户端创建更改流。</div></td></tr><tr id="i13" class="rowColor"><td class="colFirst"><code>&lt;TResult&gt;&nbsp;<a href="ChangeStreamIterable.html" title="interface in com.mongodb.client">ChangeStreamIterable</a>&lt;TResult&gt;</code></td><th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#watch(com.mongodb.client.ClientSession,java.lang.Class)">watch</a></span>&ZeroWidthSpace;(<a href="ClientSession.html" title="interface in com.mongodb.client">ClientSession</a>&nbsp;clientSession,     <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html?is-external=true" title="class or interface in java.lang" class="externalLink">Class</a>&lt;TResult&gt;&nbsp;resultClass)</code></th><td class="colLast"><div class="block" _msthash="189618" _msttexthash="40966562">为此客户端创建更改流。</div></td></tr><tr id="i14" class="altColor"><td class="colFirst"><code><a href="ChangeStreamIterable.html" title="interface in com.mongodb.client">ChangeStreamIterable</a>&lt;<a href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/bson/org/bson/Document.html?is-external=true" title="class or interface in org.bson" class="externalLink">Document</a>&gt;</code></td><th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#watch(com.mongodb.client.ClientSession,java.util.List)">watch</a></span>&ZeroWidthSpace;(<a href="ClientSession.html" title="interface in com.mongodb.client">ClientSession</a>&nbsp;clientSession,     <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/List.html?is-external=true" title="class or interface in java.util" class="externalLink">List</a>&lt;? extends <a href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/bson/org/bson/conversions/Bson.html?is-external=true" title="class or interface in org.bson.conversions" class="externalLink">Bson</a>&gt;&nbsp;pipeline)</code></th><td class="colLast"><div class="block" _msthash="189878" _msttexthash="40966562">为此客户端创建更改流。</div></td></tr><tr id="i15" class="rowColor"><td class="colFirst"><code>&lt;TResult&gt;&nbsp;<a href="ChangeStreamIterable.html" title="interface in com.mongodb.client">ChangeStreamIterable</a>&lt;TResult&gt;</code></td><th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#watch(com.mongodb.client.ClientSession,java.util.List,java.lang.Class)">watch</a></span>&ZeroWidthSpace;(<a href="ClientSession.html" title="interface in com.mongodb.client">ClientSession</a>&nbsp;clientSession,     <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/List.html?is-external=true" title="class or interface in java.util" class="externalLink">List</a>&lt;? extends <a href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/bson/org/bson/conversions/Bson.html?is-external=true" title="class or interface in org.bson.conversions" class="externalLink">Bson</a>&gt;&nbsp;pipeline,     <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html?is-external=true" title="class or interface in java.lang" class="externalLink">Class</a>&lt;TResult&gt;&nbsp;resultClass)</code></th><td class="colLast"><div class="block" _msthash="190138" _msttexthash="40966562">为此客户端创建更改流。</div></td></tr><tr id="i16" class="altColor"><td class="colFirst"><code>&lt;TResult&gt;&nbsp;<a href="ChangeStreamIterable.html" title="interface in com.mongodb.client">ChangeStreamIterable</a>&lt;TResult&gt;</code></td><th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#watch(java.lang.Class)">watch</a></span>&ZeroWidthSpace;(<a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html?is-external=true" title="class or interface in java.lang" class="externalLink">Class</a>&lt;TResult&gt;&nbsp;resultClass)</code></th><td class="colLast"><div class="block" _msthash="190398" _msttexthash="40966562">为此客户端创建更改流。</div></td></tr><tr id="i17" class="rowColor"><td class="colFirst"><code><a href="ChangeStreamIterable.html" title="interface in com.mongodb.client">ChangeStreamIterable</a>&lt;<a href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/bson/org/bson/Document.html?is-external=true" title="class or interface in org.bson" class="externalLink">Document</a>&gt;</code></td><th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#watch(java.util.List)">watch</a></span>&ZeroWidthSpace;(<a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/List.html?is-external=true" title="class or interface in java.util" class="externalLink">List</a>&lt;? extends <a href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/bson/org/bson/conversions/Bson.html?is-external=true" title="class or interface in org.bson.conversions" class="externalLink">Bson</a>&gt;&nbsp;pipeline)</code></th><td class="colLast"><div class="block" _msthash="190658" _msttexthash="40966562">为此客户端创建更改流。</div></td></tr><tr id="i18" class="altColor"><td class="colFirst"><code>&lt;TResult&gt;&nbsp;<a href="ChangeStreamIterable.html" title="interface in com.mongodb.client">ChangeStreamIterable</a>&lt;TResult&gt;</code></td><th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#watch(java.util.List,java.lang.Class)">watch</a></span>&ZeroWidthSpace;(<a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/List.html?is-external=true" title="class or interface in java.util" class="externalLink">List</a>&lt;? extends <a href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/bson/org/bson/conversions/Bson.html?is-external=true" title="class or interface in org.bson.conversions" class="externalLink">Bson</a>&gt;&nbsp;pipeline,     <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html?is-external=true" title="class or interface in java.lang" class="externalLink">Class</a>&lt;TResult&gt;&nbsp;resultClass)</code></th><td class="colLast"><div class="block" _msthash="190918" _msttexthash="40966562">为此客户端创建更改流。</div></td></tr>        </table></details><details><summary>☟MongoDatabase的一些方法☟,  官方文档☞<a herf="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/mongodb-driver-sync/com/mongodb/client/MongoDatabase.html">♡♡♡</a>☚</summary><table>    <tbody>        <tr>            <th class="colFirst" scope="col" _msthash="4258514" _msttexthash="20502521">修饰符和类型</th>            <th class="colSecond" scope="col" _msthash="4258644" _msttexthash="5267275">方法</th>            <th class="colLast" scope="col" _msthash="4258774" _msttexthash="6157333">描述</th>        </tr>        <tr id="i0" class="altColor">            <td class="colFirst"><code><a href="AggregateIterable.html"                        title="interface in com.mongodb.client">AggregateIterable</a>&lt;<a                        href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/bson/org/bson/Document.html?is-external=true"                        title="class or interface in org.bson" class="externalLink">Document</a>&gt;</code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#aggregate(com.mongodb.client.ClientSession,java.util.List)">aggregate</a></span>​(<a                        href="ClientSession.html"                        title="interface in com.mongodb.client">ClientSession</a>&nbsp;clientSession,                    <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/List.html?is-external=true"                        title="class or interface in java.util" class="externalLink">List</a>&lt;? extends <a                        href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/bson/org/bson/conversions/Bson.html?is-external=true"                        title="class or interface in org.bson.conversions"                        class="externalLink">Bson</a>&gt;&nbsp;pipeline)</code></th>            <td class="colLast">                <div class="block">                    <font _mstmutation="1" _msthash="176111" _msttexthash="300271686">在数据库上运行聚合框架管道，用于不需要基础集合的管道阶段，例如 和                        。</font><code>$currentOp</code><code>$listLocalSessions</code>                </div>            </td>        </tr>        <tr id="i1" class="rowColor">            <td class="colFirst"><code>&lt;TResult&gt;&nbsp;<a href="AggregateIterable.html"                        title="interface in com.mongodb.client">AggregateIterable</a>&lt;TResult&gt;</code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#aggregate(com.mongodb.client.ClientSession,java.util.List,java.lang.Class)">aggregate</a></span>​(<a                        href="ClientSession.html"                        title="interface in com.mongodb.client">ClientSession</a>&nbsp;clientSession,                    <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/List.html?is-external=true"                        title="class or interface in java.util" class="externalLink">List</a>&lt;? extends <a                        href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/bson/org/bson/conversions/Bson.html?is-external=true"                        title="class or interface in org.bson.conversions"                        class="externalLink">Bson</a>&gt;&nbsp;pipeline,                    <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html?is-external=true"                        title="class or interface in java.lang"                        class="externalLink">Class</a>&lt;TResult&gt;&nbsp;resultClass)</code></th>            <td class="colLast">                <div class="block">                    <font _mstmutation="1" _msthash="176358" _msttexthash="300271686">在数据库上运行聚合框架管道，用于不需要基础集合的管道阶段，例如 和                        。</font><code>$currentOp</code><code>$listLocalSessions</code>                </div>            </td>        </tr>        <tr id="i2" class="altColor">            <td class="colFirst"><code><a href="AggregateIterable.html"                        title="interface in com.mongodb.client">AggregateIterable</a>&lt;<a                        href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/bson/org/bson/Document.html?is-external=true"                        title="class or interface in org.bson" class="externalLink">Document</a>&gt;</code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#aggregate(java.util.List)">aggregate</a></span>​(<a                        href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/List.html?is-external=true"                        title="class or interface in java.util" class="externalLink">List</a>&lt;? extends <a                        href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/bson/org/bson/conversions/Bson.html?is-external=true"                        title="class or interface in org.bson.conversions"                        class="externalLink">Bson</a>&gt;&nbsp;pipeline)</code></th>            <td class="colLast">                <div class="block">                    <font _mstmutation="1" _msthash="176605" _msttexthash="300271686">在数据库上运行聚合框架管道，用于不需要基础集合的管道阶段，例如 和                        。</font><code>$currentOp</code><code>$listLocalSessions</code>                </div>            </td>        </tr>        <tr id="i3" class="rowColor">            <td class="colFirst"><code>&lt;TResult&gt;&nbsp;<a href="AggregateIterable.html"                        title="interface in com.mongodb.client">AggregateIterable</a>&lt;TResult&gt;</code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#aggregate(java.util.List,java.lang.Class)">aggregate</a></span>​(<a                        href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/List.html?is-external=true"                        title="class or interface in java.util" class="externalLink">List</a>&lt;? extends <a                        href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/bson/org/bson/conversions/Bson.html?is-external=true"                        title="class or interface in org.bson.conversions"                        class="externalLink">Bson</a>&gt;&nbsp;pipeline,                    <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html?is-external=true"                        title="class or interface in java.lang"                        class="externalLink">Class</a>&lt;TResult&gt;&nbsp;resultClass)</code></th>            <td class="colLast">                <div class="block">                    <font _mstmutation="1" _msthash="176852" _msttexthash="300271686">在数据库上运行聚合框架管道，用于不需要基础集合的管道阶段，例如 和                        。</font><code>$currentOp</code><code>$listLocalSessions</code>                </div>            </td>        </tr>        <tr id="i4" class="altColor">            <td class="colFirst"><code>void</code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#createCollection(com.mongodb.client.ClientSession,java.lang.String)">createCollection</a></span>​(<a                        href="ClientSession.html"                        title="interface in com.mongodb.client">ClientSession</a>&nbsp;clientSession,                    <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html?is-external=true"                        title="class or interface in java.lang"                        class="externalLink">String</a>&nbsp;collectionName)</code></th>            <td class="colLast">                <div class="block" _msthash="177099" _msttexthash="59092644">使用给定名称创建一个新集合。</div>            </td>        </tr>        <tr id="i5" class="rowColor">            <td class="colFirst"><code>void</code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#createCollection(com.mongodb.client.ClientSession,java.lang.String,com.mongodb.client.model.CreateCollectionOptions)">createCollection</a></span>​(<a                        href="ClientSession.html"                        title="interface in com.mongodb.client">ClientSession</a>&nbsp;clientSession,                    <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html?is-external=true"                        title="class or interface in java.lang" class="externalLink">String</a>&nbsp;collectionName,                    <a href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/mongodb-driver-core/com/mongodb/client/model/CreateCollectionOptions.html?is-external=true"                        title="class or interface in com.mongodb.client.model"                        class="externalLink">CreateCollectionOptions</a>&nbsp;createCollectionOptions)</code></th>            <td class="colLast">                <div class="block" _msthash="177346" _msttexthash="55427398">使用所选选项创建新收藏夹</div>            </td>        </tr>        <tr id="i6" class="altColor">            <td class="colFirst"><code>void</code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#createCollection(java.lang.String)">createCollection</a></span>​(<a                        href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html?is-external=true"                        title="class or interface in java.lang"                        class="externalLink">String</a>&nbsp;collectionName)</code></th>            <td class="colLast">                <div class="block" _msthash="177593" _msttexthash="59092644">使用给定名称创建一个新集合。</div>            </td>        </tr>        <tr id="i7" class="rowColor">            <td class="colFirst"><code>void</code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#createCollection(java.lang.String,com.mongodb.client.model.CreateCollectionOptions)">createCollection</a></span>​(<a                        href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html?is-external=true"                        title="class or interface in java.lang" class="externalLink">String</a>&nbsp;collectionName,                    <a href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/mongodb-driver-core/com/mongodb/client/model/CreateCollectionOptions.html?is-external=true"                        title="class or interface in com.mongodb.client.model"                        class="externalLink">CreateCollectionOptions</a>&nbsp;createCollectionOptions)</code></th>            <td class="colLast">                <div class="block" _msthash="177840" _msttexthash="55427398">使用所选选项创建新收藏夹</div>            </td>        </tr>        <tr id="i8" class="altColor">            <td class="colFirst"><code>void</code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#createView(com.mongodb.client.ClientSession,java.lang.String,java.lang.String,java.util.List)">createView</a></span>​(<a                        href="ClientSession.html"                        title="interface in com.mongodb.client">ClientSession</a>&nbsp;clientSession,                    <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html?is-external=true"                        title="class or interface in java.lang" class="externalLink">String</a>&nbsp;viewName,                    <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html?is-external=true"                        title="class or interface in java.lang" class="externalLink">String</a>&nbsp;viewOn,                    <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/List.html?is-external=true"                        title="class or interface in java.util" class="externalLink">List</a>&lt;? extends <a                        href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/bson/org/bson/conversions/Bson.html?is-external=true"                        title="class or interface in org.bson.conversions"                        class="externalLink">Bson</a>&gt;&nbsp;pipeline)</code></th>            <td class="colLast">                <div class="block" _msthash="178087" _msttexthash="236789982">使用给定名称、支持集合/视图名称以及定义视图的聚合管道创建视图。</div>            </td>        </tr>        <tr id="i9" class="rowColor">            <td class="colFirst"><code>void</code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#createView(com.mongodb.client.ClientSession,java.lang.String,java.lang.String,java.util.List,com.mongodb.client.model.CreateViewOptions)">createView</a></span>​(<a                        href="ClientSession.html"                        title="interface in com.mongodb.client">ClientSession</a>&nbsp;clientSession,                    <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html?is-external=true"                        title="class or interface in java.lang" class="externalLink">String</a>&nbsp;viewName,                    <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html?is-external=true"                        title="class or interface in java.lang" class="externalLink">String</a>&nbsp;viewOn,                    <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/List.html?is-external=true"                        title="class or interface in java.util" class="externalLink">List</a>&lt;? extends <a                        href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/bson/org/bson/conversions/Bson.html?is-external=true"                        title="class or interface in org.bson.conversions"                        class="externalLink">Bson</a>&gt;&nbsp;pipeline,                    <a href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/mongodb-driver-core/com/mongodb/client/model/CreateViewOptions.html?is-external=true"                        title="class or interface in com.mongodb.client.model"                        class="externalLink">CreateViewOptions</a>&nbsp;createViewOptions)</code></th>            <td class="colLast">                <div class="block" _msthash="178334" _msttexthash="269903569">使用给定名称、支持集合/视图名称、聚合管道和定义视图的选项创建视图。</div>            </td>        </tr>        <tr id="i10" class="altColor">            <td class="colFirst"><code>void</code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#createView(java.lang.String,java.lang.String,java.util.List)">createView</a></span>​(<a                        href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html?is-external=true"                        title="class or interface in java.lang" class="externalLink">String</a>&nbsp;viewName,                    <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html?is-external=true"                        title="class or interface in java.lang" class="externalLink">String</a>&nbsp;viewOn,                    <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/List.html?is-external=true"                        title="class or interface in java.util" class="externalLink">List</a>&lt;? extends <a                        href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/bson/org/bson/conversions/Bson.html?is-external=true"                        title="class or interface in org.bson.conversions"                        class="externalLink">Bson</a>&gt;&nbsp;pipeline)</code></th>            <td class="colLast">                <div class="block" _msthash="188838" _msttexthash="236789982">使用给定名称、支持集合/视图名称以及定义视图的聚合管道创建视图。</div>            </td>        </tr>        <tr id="i11" class="rowColor">            <td class="colFirst"><code>void</code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#createView(java.lang.String,java.lang.String,java.util.List,com.mongodb.client.model.CreateViewOptions)">createView</a></span>​(<a                        href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html?is-external=true"                        title="class or interface in java.lang" class="externalLink">String</a>&nbsp;viewName,                    <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html?is-external=true"                        title="class or interface in java.lang" class="externalLink">String</a>&nbsp;viewOn,                    <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/List.html?is-external=true"                        title="class or interface in java.util" class="externalLink">List</a>&lt;? extends <a                        href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/bson/org/bson/conversions/Bson.html?is-external=true"                        title="class or interface in org.bson.conversions"                        class="externalLink">Bson</a>&gt;&nbsp;pipeline,                    <a href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/mongodb-driver-core/com/mongodb/client/model/CreateViewOptions.html?is-external=true"                        title="class or interface in com.mongodb.client.model"                        class="externalLink">CreateViewOptions</a>&nbsp;createViewOptions)</code></th>            <td class="colLast">                <div class="block" _msthash="189098" _msttexthash="269903569">使用给定名称、支持集合/视图名称、聚合管道和定义视图的选项创建视图。</div>            </td>        </tr>        <tr id="i12" class="altColor">            <td class="colFirst"><code>void</code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#drop()">drop</a></span>()</code></th>            <td class="colLast">                <div class="block" _msthash="189358" _msttexthash="22003436">删除此数据库。</div>            </td>        </tr>        <tr id="i13" class="rowColor">            <td class="colFirst"><code>void</code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#drop(com.mongodb.client.ClientSession)">drop</a></span>​(<a href="ClientSession.html"                        title="interface in com.mongodb.client">ClientSession</a>&nbsp;clientSession)</code></th>            <td class="colLast">                <div class="block" _msthash="189618" _msttexthash="22003436">删除此数据库。</div>            </td>        </tr>        <tr id="i14" class="altColor">            <td class="colFirst"><code><a                        href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/bson/org/bson/codecs/configuration/CodecRegistry.html?is-external=true"                        title="class or interface in org.bson.codecs.configuration"                        class="externalLink">CodecRegistry</a></code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#getCodecRegistry()">getCodecRegistry</a></span>()</code></th>            <td class="colLast">                <div class="block" _msthash="189878" _msttexthash="87777456">获取 MongoDatabase 的编解码器注册表。</div>            </td>        </tr>        <tr id="i15" class="rowColor">            <td class="colFirst"><code><a href="MongoCollection.html"                        title="interface in com.mongodb.client">MongoCollection</a>&lt;<a                        href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/bson/org/bson/Document.html?is-external=true"                        title="class or interface in org.bson" class="externalLink">Document</a>&gt;</code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#getCollection(java.lang.String)">getCollection</a></span>​(<a                        href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html?is-external=true"                        title="class or interface in java.lang"                        class="externalLink">String</a>&nbsp;collectionName)</code></th>            <td class="colLast">                <div class="block" _msthash="190138" _msttexthash="14370473">获取集合。</div>            </td>        </tr>        <tr id="i16" class="altColor">            <td class="colFirst"><code>&lt;TDocument&gt;<br><a href="MongoCollection.html"                        title="interface in com.mongodb.client">MongoCollection</a>&lt;TDocument&gt;</code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#getCollection(java.lang.String,java.lang.Class)">getCollection</a></span>​(<a                        href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html?is-external=true"                        title="class or interface in java.lang" class="externalLink">String</a>&nbsp;collectionName,                    <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html?is-external=true"                        title="class or interface in java.lang"                        class="externalLink">Class</a>&lt;TDocument&gt;&nbsp;documentClass)</code></th>            <td class="colLast">                <div class="block" _msthash="190398" _msttexthash="75647481">获取具有特定默认文档类的集合。</div>            </td>        </tr>        <tr id="i17" class="rowColor">            <td class="colFirst"><code><a                        href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html?is-external=true"                        title="class or interface in java.lang" class="externalLink">String</a></code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#getName()">getName</a></span>()</code></th>            <td class="colLast">                <div class="block" _msthash="190658" _msttexthash="31557201">获取数据库的名称。</div>            </td>        </tr>        <tr id="i18" class="altColor">            <td class="colFirst"><code><a                        href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/mongodb-driver-core/com/mongodb/ReadConcern.html?is-external=true"                        title="class or interface in com.mongodb" class="externalLink">ReadConcern</a></code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#getReadConcern()">getReadConcern</a></span>()</code></th>            <td class="colLast">                <div class="block" _msthash="190918" _msttexthash="62446124">获取 MongoDatabase 的读取关注点。</div>            </td>        </tr>        <tr id="i19" class="rowColor">            <td class="colFirst"><code><a                        href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/mongodb-driver-core/com/mongodb/ReadPreference.html?is-external=true"                        title="class or interface in com.mongodb" class="externalLink">ReadPreference</a></code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#getReadPreference()">getReadPreference</a></span>()</code></th>            <td class="colLast">                <div class="block" _msthash="191178" _msttexthash="75059309">获取 MongoDatabase 的读取首选项。</div>            </td>        </tr>        <tr id="i20" class="altColor">            <td class="colFirst"><code><a                        href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/mongodb-driver-core/com/mongodb/WriteConcern.html?is-external=true"                        title="class or interface in com.mongodb" class="externalLink">WriteConcern</a></code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#getWriteConcern()">getWriteConcern</a></span>()</code></th>            <td class="colLast">                <div class="block" _msthash="189085" _msttexthash="57782270">获取 MongoDatabase 的写入关注点。</div>            </td>        </tr>        <tr id="i21" class="rowColor">            <td class="colFirst"><code><a href="MongoIterable.html"                        title="interface in com.mongodb.client">MongoIterable</a>&lt;<a                        href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html?is-external=true"                        title="class or interface in java.lang" class="externalLink">String</a>&gt;</code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#listCollectionNames()">listCollectionNames</a></span>()</code></th>            <td class="colLast">                <div class="block" _msthash="189345" _msttexthash="69081220">获取此数据库中所有集合的名称。</div>            </td>        </tr>        <tr id="i22" class="altColor">            <td class="colFirst"><code><a href="MongoIterable.html"                        title="interface in com.mongodb.client">MongoIterable</a>&lt;<a                        href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html?is-external=true"                        title="class or interface in java.lang" class="externalLink">String</a>&gt;</code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#listCollectionNames(com.mongodb.client.ClientSession)">listCollectionNames</a></span>​(<a                        href="ClientSession.html"                        title="interface in com.mongodb.client">ClientSession</a>&nbsp;clientSession)</code></th>            <td class="colLast">                <div class="block" _msthash="189605" _msttexthash="69081220">获取此数据库中所有集合的名称。</div>            </td>        </tr>        <tr id="i23" class="rowColor">            <td class="colFirst"><code><a href="ListCollectionsIterable.html"                        title="interface in com.mongodb.client">ListCollectionsIterable</a>&lt;<a                        href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/bson/org/bson/Document.html?is-external=true"                        title="class or interface in org.bson" class="externalLink">Document</a>&gt;</code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#listCollections()">listCollections</a></span>()</code></th>            <td class="colLast">                <div class="block" _msthash="189865" _msttexthash="54946554">查找此数据库中的所有集合。</div>            </td>        </tr>        <tr id="i24" class="altColor">            <td class="colFirst"><code><a href="ListCollectionsIterable.html"                        title="interface in com.mongodb.client">ListCollectionsIterable</a>&lt;<a                        href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/bson/org/bson/Document.html?is-external=true"                        title="class or interface in org.bson" class="externalLink">Document</a>&gt;</code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#listCollections(com.mongodb.client.ClientSession)">listCollections</a></span>​(<a                        href="ClientSession.html"                        title="interface in com.mongodb.client">ClientSession</a>&nbsp;clientSession)</code></th>            <td class="colLast">                <div class="block" _msthash="190125" _msttexthash="54946554">查找此数据库中的所有集合。</div>            </td>        </tr>        <tr id="i25" class="rowColor">            <td class="colFirst"><code>&lt;TResult&gt;&nbsp;<a href="ListCollectionsIterable.html"                        title="interface in com.mongodb.client">ListCollectionsIterable</a>&lt;TResult&gt;</code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#listCollections(com.mongodb.client.ClientSession,java.lang.Class)">listCollections</a></span>​(<a                        href="ClientSession.html"                        title="interface in com.mongodb.client">ClientSession</a>&nbsp;clientSession,                    <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html?is-external=true"                        title="class or interface in java.lang"                        class="externalLink">Class</a>&lt;TResult&gt;&nbsp;resultClass)</code></th>            <td class="colLast">                <div class="block" _msthash="190385" _msttexthash="54946554">查找此数据库中的所有集合。</div>            </td>        </tr>        <tr id="i26" class="altColor">            <td class="colFirst"><code>&lt;TResult&gt;&nbsp;<a href="ListCollectionsIterable.html"                        title="interface in com.mongodb.client">ListCollectionsIterable</a>&lt;TResult&gt;</code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#listCollections(java.lang.Class)">listCollections</a></span>​(<a                        href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html?is-external=true"                        title="class or interface in java.lang"                        class="externalLink">Class</a>&lt;TResult&gt;&nbsp;resultClass)</code></th>            <td class="colLast">                <div class="block" _msthash="190645" _msttexthash="54946554">查找此数据库中的所有集合。</div>            </td>        </tr>        <tr id="i27" class="rowColor">            <td class="colFirst"><code><a                        href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/bson/org/bson/Document.html?is-external=true"                        title="class or interface in org.bson" class="externalLink">Document</a></code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#runCommand(com.mongodb.client.ClientSession,org.bson.conversions.Bson)">runCommand</a></span>​(<a                        href="ClientSession.html"                        title="interface in com.mongodb.client">ClientSession</a>&nbsp;clientSession,                    <a href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/bson/org/bson/conversions/Bson.html?is-external=true"                        title="class or interface in org.bson.conversions"                        class="externalLink">Bson</a>&nbsp;command)</code></th>            <td class="colLast">                <div class="block" _msthash="190905" _msttexthash="286185055">在当前数据库的上下文中执行给定的命令，读取首选项为 <a                        href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/mongodb-driver-core/com/mongodb/ReadPreference.html?is-external=true#primary()"                        title="class or interface in com.mongodb" class="externalLink" _istranslated="1"><code                            _istranslated="1">ReadPreference.primary（）</code></a>。</div>            </td>        </tr>        <tr id="i28" class="altColor">            <td class="colFirst"><code><a                        href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/bson/org/bson/Document.html?is-external=true"                        title="class or interface in org.bson" class="externalLink">Document</a></code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#runCommand(com.mongodb.client.ClientSession,org.bson.conversions.Bson,com.mongodb.ReadPreference)">runCommand</a></span>​(<a                        href="ClientSession.html"                        title="interface in com.mongodb.client">ClientSession</a>&nbsp;clientSession,                    <a href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/bson/org/bson/conversions/Bson.html?is-external=true"                        title="class or interface in org.bson.conversions" class="externalLink">Bson</a>&nbsp;command,                    <a href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/mongodb-driver-core/com/mongodb/ReadPreference.html?is-external=true"                        title="class or interface in com.mongodb"                        class="externalLink">ReadPreference</a>&nbsp;readPreference)</code></th>            <td class="colLast">                <div class="block" _msthash="191165" _msttexthash="202775131">使用给定的读取首选项在当前数据库的上下文中执行给定的命令。</div>            </td>        </tr>        <tr id="i29" class="rowColor">            <td class="colFirst"><code>&lt;TResult&gt;&nbsp;TResult</code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#runCommand(com.mongodb.client.ClientSession,org.bson.conversions.Bson,com.mongodb.ReadPreference,java.lang.Class)">runCommand</a></span>​(<a                        href="ClientSession.html"                        title="interface in com.mongodb.client">ClientSession</a>&nbsp;clientSession,                    <a href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/bson/org/bson/conversions/Bson.html?is-external=true"                        title="class or interface in org.bson.conversions" class="externalLink">Bson</a>&nbsp;command,                    <a href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/mongodb-driver-core/com/mongodb/ReadPreference.html?is-external=true"                        title="class or interface in com.mongodb"                        class="externalLink">ReadPreference</a>&nbsp;readPreference,                    <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html?is-external=true"                        title="class or interface in java.lang"                        class="externalLink">Class</a>&lt;TResult&gt;&nbsp;resultClass)</code></th>            <td class="colLast">                <div class="block" _msthash="191425" _msttexthash="202775131">使用给定的读取首选项在当前数据库的上下文中执行给定的命令。</div>            </td>        </tr>        <tr id="i30" class="altColor">            <td class="colFirst"><code>&lt;TResult&gt;&nbsp;TResult</code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#runCommand(com.mongodb.client.ClientSession,org.bson.conversions.Bson,java.lang.Class)">runCommand</a></span>​(<a                        href="ClientSession.html"                        title="interface in com.mongodb.client">ClientSession</a>&nbsp;clientSession,                    <a href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/bson/org/bson/conversions/Bson.html?is-external=true"                        title="class or interface in org.bson.conversions" class="externalLink">Bson</a>&nbsp;command,                    <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html?is-external=true"                        title="class or interface in java.lang"                        class="externalLink">Class</a>&lt;TResult&gt;&nbsp;resultClass)</code></th>            <td class="colLast">                <div class="block" _msthash="189332" _msttexthash="286185055">在当前数据库的上下文中执行给定的命令，读取首选项为 <a                        href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/mongodb-driver-core/com/mongodb/ReadPreference.html?is-external=true#primary()"                        title="class or interface in com.mongodb" class="externalLink" _istranslated="1"><code                            _istranslated="1">ReadPreference.primary（）</code></a>。</div>            </td>        </tr>        <tr id="i31" class="rowColor">            <td class="colFirst"><code><a                        href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/bson/org/bson/Document.html?is-external=true"                        title="class or interface in org.bson" class="externalLink">Document</a></code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#runCommand(org.bson.conversions.Bson)">runCommand</a></span>​(<a                        href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/bson/org/bson/conversions/Bson.html?is-external=true"                        title="class or interface in org.bson.conversions"                        class="externalLink">Bson</a>&nbsp;command)</code></th>            <td class="colLast">                <div class="block" _msthash="189592" _msttexthash="286185055">在当前数据库的上下文中执行给定的命令，读取首选项为 <a                        href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/mongodb-driver-core/com/mongodb/ReadPreference.html?is-external=true#primary()"                        title="class or interface in com.mongodb" class="externalLink" _istranslated="1"><code                            _istranslated="1">ReadPreference.primary（）</code></a>。</div>            </td>        </tr>        <tr id="i32" class="altColor">            <td class="colFirst"><code><a                        href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/bson/org/bson/Document.html?is-external=true"                        title="class or interface in org.bson" class="externalLink">Document</a></code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#runCommand(org.bson.conversions.Bson,com.mongodb.ReadPreference)">runCommand</a></span>​(<a                        href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/bson/org/bson/conversions/Bson.html?is-external=true"                        title="class or interface in org.bson.conversions" class="externalLink">Bson</a>&nbsp;command,                    <a href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/mongodb-driver-core/com/mongodb/ReadPreference.html?is-external=true"                        title="class or interface in com.mongodb"                        class="externalLink">ReadPreference</a>&nbsp;readPreference)</code></th>            <td class="colLast">                <div class="block" _msthash="189852" _msttexthash="202775131">使用给定的读取首选项在当前数据库的上下文中执行给定的命令。</div>            </td>        </tr>        <tr id="i33" class="rowColor">            <td class="colFirst"><code>&lt;TResult&gt;&nbsp;TResult</code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#runCommand(org.bson.conversions.Bson,com.mongodb.ReadPreference,java.lang.Class)">runCommand</a></span>​(<a                        href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/bson/org/bson/conversions/Bson.html?is-external=true"                        title="class or interface in org.bson.conversions" class="externalLink">Bson</a>&nbsp;command,                    <a href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/mongodb-driver-core/com/mongodb/ReadPreference.html?is-external=true"                        title="class or interface in com.mongodb"                        class="externalLink">ReadPreference</a>&nbsp;readPreference,                    <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html?is-external=true"                        title="class or interface in java.lang"                        class="externalLink">Class</a>&lt;TResult&gt;&nbsp;resultClass)</code></th>            <td class="colLast">                <div class="block" _msthash="190112" _msttexthash="202775131">使用给定的读取首选项在当前数据库的上下文中执行给定的命令。</div>            </td>        </tr>        <tr id="i34" class="altColor">            <td class="colFirst"><code>&lt;TResult&gt;&nbsp;TResult</code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#runCommand(org.bson.conversions.Bson,java.lang.Class)">runCommand</a></span>​(<a                        href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/bson/org/bson/conversions/Bson.html?is-external=true"                        title="class or interface in org.bson.conversions" class="externalLink">Bson</a>&nbsp;command,                    <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html?is-external=true"                        title="class or interface in java.lang"                        class="externalLink">Class</a>&lt;TResult&gt;&nbsp;resultClass)</code></th>            <td class="colLast">                <div class="block" _msthash="190372" _msttexthash="286185055">在当前数据库的上下文中执行给定的命令，读取首选项为 <a                        href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/mongodb-driver-core/com/mongodb/ReadPreference.html?is-external=true#primary()"                        title="class or interface in com.mongodb" class="externalLink" _istranslated="1"><code                            _istranslated="1">ReadPreference.primary（）</code></a>。</div>            </td>        </tr>        <tr id="i35" class="rowColor">            <td class="colFirst"><code><a href="ChangeStreamIterable.html"                        title="interface in com.mongodb.client">ChangeStreamIterable</a>&lt;<a                        href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/bson/org/bson/Document.html?is-external=true"                        title="class or interface in org.bson" class="externalLink">Document</a>&gt;</code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#watch()">watch</a></span>()</code></th>            <td class="colLast">                <div class="block" _msthash="190632" _msttexthash="40262482">为此数据库创建更改流。</div>            </td>        </tr>        <tr id="i36" class="altColor">            <td class="colFirst"><code><a href="ChangeStreamIterable.html"                        title="interface in com.mongodb.client">ChangeStreamIterable</a>&lt;<a                        href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/bson/org/bson/Document.html?is-external=true"                        title="class or interface in org.bson" class="externalLink">Document</a>&gt;</code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#watch(com.mongodb.client.ClientSession)">watch</a></span>​(<a                        href="ClientSession.html"                        title="interface in com.mongodb.client">ClientSession</a>&nbsp;clientSession)</code></th>            <td class="colLast">                <div class="block" _msthash="190892" _msttexthash="40262482">为此数据库创建更改流。</div>            </td>        </tr>        <tr id="i37" class="rowColor">            <td class="colFirst"><code>&lt;TResult&gt;&nbsp;<a href="ChangeStreamIterable.html"                        title="interface in com.mongodb.client">ChangeStreamIterable</a>&lt;TResult&gt;</code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#watch(com.mongodb.client.ClientSession,java.lang.Class)">watch</a></span>​(<a                        href="ClientSession.html"                        title="interface in com.mongodb.client">ClientSession</a>&nbsp;clientSession,                    <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html?is-external=true"                        title="class or interface in java.lang"                        class="externalLink">Class</a>&lt;TResult&gt;&nbsp;resultClass)</code></th>            <td class="colLast">                <div class="block" _msthash="191152" _msttexthash="40262482">为此数据库创建更改流。</div>            </td>        </tr>        <tr id="i38" class="altColor">            <td class="colFirst"><code><a href="ChangeStreamIterable.html"                        title="interface in com.mongodb.client">ChangeStreamIterable</a>&lt;<a                        href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/bson/org/bson/Document.html?is-external=true"                        title="class or interface in org.bson" class="externalLink">Document</a>&gt;</code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#watch(com.mongodb.client.ClientSession,java.util.List)">watch</a></span>​(<a                        href="ClientSession.html"                        title="interface in com.mongodb.client">ClientSession</a>&nbsp;clientSession,                    <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/List.html?is-external=true"                        title="class or interface in java.util" class="externalLink">List</a>&lt;? extends <a                        href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/bson/org/bson/conversions/Bson.html?is-external=true"                        title="class or interface in org.bson.conversions"                        class="externalLink">Bson</a>&gt;&nbsp;pipeline)</code></th>            <td class="colLast">                <div class="block" _msthash="191412" _msttexthash="40262482">为此数据库创建更改流。</div>            </td>        </tr>        <tr id="i39" class="rowColor">            <td class="colFirst"><code>&lt;TResult&gt;&nbsp;<a href="ChangeStreamIterable.html"                        title="interface in com.mongodb.client">ChangeStreamIterable</a>&lt;TResult&gt;</code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#watch(com.mongodb.client.ClientSession,java.util.List,java.lang.Class)">watch</a></span>​(<a                        href="ClientSession.html"                        title="interface in com.mongodb.client">ClientSession</a>&nbsp;clientSession,                    <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/List.html?is-external=true"                        title="class or interface in java.util" class="externalLink">List</a>&lt;? extends <a                        href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/bson/org/bson/conversions/Bson.html?is-external=true"                        title="class or interface in org.bson.conversions"                        class="externalLink">Bson</a>&gt;&nbsp;pipeline,                    <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html?is-external=true"                        title="class or interface in java.lang"                        class="externalLink">Class</a>&lt;TResult&gt;&nbsp;resultClass)</code></th>            <td class="colLast">                <div class="block" _msthash="191672" _msttexthash="40262482">为此数据库创建更改流。</div>            </td>        </tr>        <tr id="i40" class="altColor">            <td class="colFirst"><code>&lt;TResult&gt;&nbsp;<a href="ChangeStreamIterable.html"                        title="interface in com.mongodb.client">ChangeStreamIterable</a>&lt;TResult&gt;</code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#watch(java.lang.Class)">watch</a></span>​(<a                        href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html?is-external=true"                        title="class or interface in java.lang"                        class="externalLink">Class</a>&lt;TResult&gt;&nbsp;resultClass)</code></th>            <td class="colLast">                <div class="block" _msthash="189579" _msttexthash="40262482">为此数据库创建更改流。</div>            </td>        </tr>        <tr id="i41" class="rowColor">            <td class="colFirst"><code><a href="ChangeStreamIterable.html"                        title="interface in com.mongodb.client">ChangeStreamIterable</a>&lt;<a                        href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/bson/org/bson/Document.html?is-external=true"                        title="class or interface in org.bson" class="externalLink">Document</a>&gt;</code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#watch(java.util.List)">watch</a></span>​(<a                        href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/List.html?is-external=true"                        title="class or interface in java.util" class="externalLink">List</a>&lt;? extends <a                        href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/bson/org/bson/conversions/Bson.html?is-external=true"                        title="class or interface in org.bson.conversions"                        class="externalLink">Bson</a>&gt;&nbsp;pipeline)</code></th>            <td class="colLast">                <div class="block" _msthash="189839" _msttexthash="40262482">为此数据库创建更改流。</div>            </td>        </tr>        <tr id="i42" class="altColor">            <td class="colFirst"><code>&lt;TResult&gt;&nbsp;<a href="ChangeStreamIterable.html"                        title="interface in com.mongodb.client">ChangeStreamIterable</a>&lt;TResult&gt;</code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#watch(java.util.List,java.lang.Class)">watch</a></span>​(<a                        href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/List.html?is-external=true"                        title="class or interface in java.util" class="externalLink">List</a>&lt;? extends <a                        href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/bson/org/bson/conversions/Bson.html?is-external=true"                        title="class or interface in org.bson.conversions"                        class="externalLink">Bson</a>&gt;&nbsp;pipeline,                    <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Class.html?is-external=true"                        title="class or interface in java.lang"                        class="externalLink">Class</a>&lt;TResult&gt;&nbsp;resultClass)</code></th>            <td class="colLast">                <div class="block" _msthash="190099" _msttexthash="40262482">为此数据库创建更改流。</div>            </td>        </tr>        <tr id="i43" class="rowColor">            <td class="colFirst"><code><a href="MongoDatabase.html"                        title="interface in com.mongodb.client">MongoDatabase</a></code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#withCodecRegistry(org.bson.codecs.configuration.CodecRegistry)">withCodecRegistry</a></span>​(<a                        href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/bson/org/bson/codecs/configuration/CodecRegistry.html?is-external=true"                        title="class or interface in org.bson.codecs.configuration"                        class="externalLink">CodecRegistry</a>&nbsp;codecRegistry)</code></th>            <td class="colLast">                <div class="block" _msthash="190359" _msttexthash="122738005">使用不同的编解码器注册表创建一个新的 MongoDatabase 实例。</div>            </td>        </tr>        <tr id="i44" class="altColor">            <td class="colFirst"><code><a href="MongoDatabase.html"                        title="interface in com.mongodb.client">MongoDatabase</a></code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#withReadConcern(com.mongodb.ReadConcern)">withReadConcern</a></span>​(<a                        href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/mongodb-driver-core/com/mongodb/ReadConcern.html?is-external=true"                        title="class or interface in com.mongodb"                        class="externalLink">ReadConcern</a>&nbsp;readConcern)</code></th>            <td class="colLast">                <div class="block" _msthash="190619" _msttexthash="174426018">创建一个新的 MongoDatabase 实例，具有不同的读取关注点。</div>            </td>        </tr>        <tr id="i45" class="rowColor">            <td class="colFirst"><code><a href="MongoDatabase.html"                        title="interface in com.mongodb.client">MongoDatabase</a></code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#withReadPreference(com.mongodb.ReadPreference)">withReadPreference</a></span>​(<a                        href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/mongodb-driver-core/com/mongodb/ReadPreference.html?is-external=true"                        title="class or interface in com.mongodb"                        class="externalLink">ReadPreference</a>&nbsp;readPreference)</code></th>            <td class="colLast">                <div class="block" _msthash="190879" _msttexthash="103762516">创建一个具有不同读取首选项的新 MongoDatabase 实例。</div>            </td>        </tr>        <tr id="i46" class="altColor">            <td class="colFirst"><code><a href="MongoDatabase.html"                        title="interface in com.mongodb.client">MongoDatabase</a></code></td>            <th class="colSecond" scope="row"><code><span class="memberNameLink"><a                            href="#withWriteConcern(com.mongodb.WriteConcern)">withWriteConcern</a></span>​(<a                        href="http://mongodb.github.io/mongo-java-driver/4.0/apidocs/mongodb-driver-core/com/mongodb/WriteConcern.html?is-external=true"                        title="class or interface in com.mongodb"                        class="externalLink">WriteConcern</a>&nbsp;writeConcern)</code></th>            <td class="colLast">                <div class="block" _msthash="191139" _msttexthash="92019005">创建一个具有不同写入关注点的新 MongoDatabase 实例。</div>            </td>        </tr>    </tbody></table></details><h2 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h2><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">database<span class="token punctuation">.</span><span class="token function">createCollection</span><span class="token punctuation">(</span><span class="token string">"tutorial"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><h2 id="使用集合"><a href="#使用集合" class="headerlink" title="使用集合"></a>使用集合</h2><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">MongoCollection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">></span></span> collection <span class="token operator">=</span> database<span class="token punctuation">.</span><span class="token function">getCollection</span><span class="token punctuation">(</span><span class="token string">"TEST"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><h2 id="创建文档"><a href="#创建文档" class="headerlink" title="创建文档"></a>创建文档</h2><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Document</span> document <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span><span class="token string">"MongoDBTest"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"time"</span><span class="token punctuation">,</span><span class="token string">"2022,02,22"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"author"</span><span class="token punctuation">,</span><span class="token string">"me"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><h2 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h2><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">collection<span class="token punctuation">.</span><span class="token function">insertOne</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><p>插入多条文档</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Document</span> document1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span><span class="token string">"title1"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"time"</span><span class="token punctuation">,</span><span class="token string">"2021,01,11"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"author"</span><span class="token punctuation">,</span><span class="token string">"me"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Document</span> document2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span><span class="token string">"title2"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"time"</span><span class="token punctuation">,</span><span class="token string">"2019,09,19"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"author"</span><span class="token punctuation">,</span><span class="token string">"you?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>document1<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>document2<span class="token punctuation">)</span><span class="token punctuation">;</span>collection<span class="token punctuation">.</span><span class="token function">insertMany</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><h2 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h2><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取 iterable 对象</span><span class="token class-name">FindIterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">></span></span> iterables <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取迭代器</span><span class="token class-name">Iterator</span> iterator <span class="token operator">=</span> iterables<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><h2 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h2><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">collection<span class="token punctuation">.</span><span class="token function">updateOne</span><span class="token punctuation">(</span><span class="token class-name">Filters</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span><span class="token string">"title1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Updates</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span><span class="token string">"TITLE1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果更新的键已存在则更新，不存在则插入新的键值对。        </span></code></pre></div><h2 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h2><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">collection<span class="token punctuation">.</span><span class="token function">deleteOne</span><span class="token punctuation">(</span><span class="token class-name">Filters</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span><span class="token string">"TITLE1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><h2 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a>删除集合</h2><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">collection<span class="token punctuation">.</span><span class="token function">drop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NoSQL</tag>
      
      <tag>MongoDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MongoDB 学习笔记</title>
    <link href="/2022/02/23/SQL/MongoDB%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/02/23/SQL/MongoDB%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="jsandcss/player/APlayer.min.css"><script src="/jsandcss/player/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/jsandcss/player/Meting.min.js"></script><div class="info"><blockquote><p>内容摘抄至<a href="http://c.biancheng.net/mongodb2/what-is-nosql.html">这里</a></p></blockquote></div><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="NoSQL是什么"><a href="#NoSQL是什么" class="headerlink" title="NoSQL是什么"></a>NoSQL是什么</h3><p>NoSQL，NoSQL 全称为“Not only SQL”，它仅仅是一个概念，用来表示非关系型数据库。</p><span id="more"></span><p>最常见的数据库可以分为下面的两种类型：</p><ul><li>RDBMS（关系型数据库）：常见的关系型数据库有 Oracle、DB2、Microsoft SQL Server、Microsoft Access、MySQL；</li><li>NoSQL（非关系型数据库）：常见的非关系型数据库有 MongoDB、Redis、Voldemort、Cassandra、Riak、Couchbase、CouchDB 等。</li></ul><p>相对于 RDBMS（关系型数据库），NoSQL 具有以下优点：</p><ul><li>易扩展：NoSQL 数据库种类繁多，但它们都有一个共同的特点，那就是都去掉了关系型数据库的关系型特性，数据与数据之间没有关系，这样就非常容易扩展，无形之间也在架构的层面上带来了可扩展的能力；</li><li>大数据量，高性能：NoSQL 数据库都具有非常高的读写性能，尤其是在处理庞大数据时表现优秀；</li><li>灵活：NoSQL 随时都可以存储任意类型的数据，无须提前为要存储的数据建立字段；</li><li>高可用：NoSQL 在不太影响性能的情况下，就可以方便地实现高可用的架构，比如 Cassandra、HBase 模型，通过复制模型也能实现高可用。</li></ul><h3 id="MongoDB是什么"><a href="#MongoDB是什么" class="headerlink" title="MongoDB是什么"></a>MongoDB是什么</h3><p>MongoDB 是一个开源的、可扩展的、跨平台的、面向文档的非关系型数据库，它由 C++ 语言编写，旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。</p><p>在 MongoDB 中支持以类似 json 的 bson（一种计算机数据交换格式）格式来存储数据，因此可以存储比较复杂的数据类型。MongoDB 最大的特点是它支持的查询语言非常强大，其语法有点类似于面向对象语言中函数调用，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还可以对数据建立索引。</p><p>MongoDB 官网：<a href="https://www.mongodb.com/">https://www.mongodb.com/</a></p><h2 id="关于MongoDB"><a href="#关于MongoDB" class="headerlink" title="关于MongoDB"></a>关于MongoDB</h2><p><a href="https://blog.csdn.net/weixin_44519083/article/details/119610881">获得一个免费的 Cloud MongoDB</a></p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>数据库是用于存储数据的物理容器，每个数据库在文件系统中都有属于自己的文件集。一台 MongoDB 服务器中可以创建多个数据库，并且每个数据库都是独立的，都有属于自己的集合和权限，而且不同数据库中的数据会放置在不同的文件中。</p><p>MongoDB 的默认数据库为“test”，该数据库存储在 data 目录中，您可以使用<code>show dbs</code></p><div class="code-wrapper"><pre class="language-SQL" data-language="SQL"><code class="language-SQL">show dbs</code></pre></div><p>在使用<code>show dbs</code>命令时，若数据库中没有存储任何数据，则不会在列表中显示出来，也就是说只有非空数据库才能通过<code>show dbs</code>命令查看。</p><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p>集合就是一组 MongoDB 文档的组合，类似于关系型数据库（例如 MySQL）中的数据表。集合存在于数据库中，且没有固定的结构，您可以向集合中插入不同格式或类型的数据。</p><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p>文档是 MongoDB 中数据的基本单位，由 BSON 格式（一种计算机数据交换格式，类似于 JSON）的键&#x2F;值对组成，类似于关系型数据库中的一行行数据，但要相对复杂一些。</p><p>文档具有动态模式，所谓动态模式就是同一集合中的文档不需要具有相同的字段，即使是相同的字段也可以是不同的类型，这与关系型数据库有很大的区别，也是 MongoDB 最突出的特点之一。</p><table><thead><tr><th>关系型数据库</th><th>MongoDB</th><th>解释说明</th></tr></thead><tbody><tr><td>database</td><td>database</td><td>数据库</td></tr><tr><td>table</td><td>collection</td><td>数据表&#x2F;集合</td></tr><tr><td>row</td><td>document</td><td>数据行&#x2F;文档</td></tr><tr><td>column</td><td>field</td><td>字段&#x2F;域</td></tr><tr><td>index</td><td>index</td><td>索引</td></tr><tr><td>table joins</td><td></td><td>表连接，MongoDB 中不支持</td></tr><tr><td>primary key</td><td>primary key</td><td>主键，MongoDB 会自动将 _id 字段设置为主键</td></tr></tbody></table><h2 id="MongoDB数据类型"><a href="#MongoDB数据类型" class="headerlink" title="MongoDB数据类型"></a>MongoDB数据类型</h2><h3 id="常用类型"><a href="#常用类型" class="headerlink" title="常用类型"></a>常用类型</h3><p>下表中列举了 MongoDB 中常用的几种数据类型：</p><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>String</td><td>字符串类型，是最常用的数据类型，不过在 MongoDB 中，只有 UTF-8 编码的字符串才是合法的</td></tr><tr><td>Integer</td><td>整型，用于存储数值。根据您使用服务器的不同，整型可以分为 32 位或 64 位两种</td></tr><tr><td>Boolean</td><td>布尔型，用于存储布尔类型的值（true&#x2F;false）</td></tr><tr><td>Double</td><td>双精度浮点型，用于存储浮点型（小数）数据</td></tr><tr><td>Min&#x2F;Max keys</td><td>将一个值与 BSON 元素的最低值和最高值相对比</td></tr><tr><td>Array</td><td>数组类型，用于将数组、列表或多个值存储在一个键中</td></tr><tr><td>Timestamp</td><td>时间戳，记录文档修改或添加的具体时间</td></tr><tr><td>Object</td><td>用于内嵌文档</td></tr><tr><td>Null</td><td>用于创建空值</td></tr><tr><td>Symbol</td><td>符号，该数据类型于字符串类型类似，不同的是，它一般用于采用特殊符号类型的语言</td></tr><tr><td>Date</td><td>日期时间，用 UNIX 时间格式来存储当前日期或时间，您可以创建 Date 对象并将 date、month、year 的值传递给 Date 对象来指定自己的日期时间</td></tr><tr><td>Object ID</td><td>对象 ID，用于创建文档的 ID</td></tr><tr><td>Binary Data</td><td>二进制数据，用于存储二进制数据</td></tr><tr><td>Code</td><td>代码类型，用于在文档中存储 JavaScript 代码</td></tr><tr><td>Regular expression</td><td>正则表达式类型，用于存储正则表达式</td></tr></tbody></table><h3 id="Object-ID"><a href="#Object-ID" class="headerlink" title="Object ID"></a>Object ID</h3><p>Object ID 类似于关系型数据库中的主键 ID，在 MongoDB 中 Object ID 由 12 字节的字符组成，其中：</p><ul><li>前 4 个字节表示当前的 Unix 时间戳；</li><li>之后的 3 个字节是当前设备的机器标识码；</li><li>再之后的 2 个字节是 MongoDB 服务器的进程 id；</li><li>最后 3 个字节为计数器，计数器的起始值随机获得。</li></ul><div class="code-wrapper"><pre class="language-none"><code class="language-none">601e2b6b aa203c c89f 2d31aa  ↑      ↑     ↑     ↑时间戳  机器码 进程id 计数器</code></pre></div><h3 id="Timestamps"><a href="#Timestamps" class="headerlink" title="Timestamps"></a>Timestamps</h3><p>Timestamps（时间戳）类型用来在 MongoDB 的内部使用，与 Date 类型不同，Timestamps 由一个 64 位的值构成，其中：</p><ul><li>前 32 位是一个 Unix 时间戳（由 Unix 纪元（1970.1.1）开始到现在经过的秒数）；</li><li>后 32 位是一秒内的操作序数。</li></ul><p>在一个 MongoDB 实例中，时间戳是唯一的，而且主要在 MongoDB 内部使用，在应用开发中，您可以使用 Date 类型来定义时间日期。</p><h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><p>Date 类型是一个 64 位的对象，其中存放了从 Unix 纪元（1970.1.1）开始到现在经历的毫秒数，Date 类型是有符号的，负值则表示 1970.1.1 之前的时间。</p><h2 id="MongoDB数据模型"><a href="#MongoDB数据模型" class="headerlink" title="MongoDB数据模型 "></a><a href="http://c.biancheng.net/mongodb2/data-model.html">MongoDB数据模型 </a></h2><h2 id="MongoDB连接数据库"><a href="#MongoDB连接数据库" class="headerlink" title="MongoDB连接数据库 "></a><a href="http://c.biancheng.net/mongodb2/connection.html">MongoDB连接数据库 </a></h2><h2 id="MongoDB创建数据库"><a href="#MongoDB创建数据库" class="headerlink" title="MongoDB创建数据库"></a>MongoDB创建数据库</h2><p><code>use</code>命令使用数据库，若没有该库，则创建数据库</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">use</span> database_name</code></pre></div><p>查看正在使用的数据库</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">db</code></pre></div><p>查看所有数据库(只显示有数据的数据库)</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> dbs</code></pre></div><h2 id="MongoDB删除数据库"><a href="#MongoDB删除数据库" class="headerlink" title="MongoDB删除数据库"></a>MongoDB删除数据库</h2><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">use</span> database_name <span class="token comment">#先使用要删除的数据库</span>db<span class="token punctuation">.</span>dropDatabase<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#删除数据库</span></code></pre></div><h2 id="MongoDB创建集合"><a href="#MongoDB创建集合" class="headerlink" title="MongoDB创建集合"></a>MongoDB创建集合</h2><p>创建集合</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>createCollection<span class="token punctuation">(</span>name<span class="token punctuation">,</span>options<span class="token punctuation">)</span></code></pre></div><p>创建固定集合”mytest”,集合空间大小为20480KB,文档最大个数为1000个</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>createCollection<span class="token punctuation">(</span><span class="token string">"mytest"</span><span class="token punctuation">,</span>&#123;capped:<span class="token boolean">true</span><span class="token punctuation">,</span>autoIndexId:<span class="token boolean">true</span><span class="token punctuation">,</span>size:<span class="token number">20480</span><span class="token punctuation">,</span>max:<span class="token number">1000</span>&#125;<span class="token punctuation">)</span></code></pre></div><p>查看集合</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> collections</code></pre></div><p>或者</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">tables</span></code></pre></div><p>虽然 MongoDB 中提供了单独的创建集合的方法，但通常我们不需要手动创建集合，因为在插入文档时，MongoDB 会自动创建集合</p><p>如：</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>website<span class="token punctuation">.</span><span class="token keyword">insert</span><span class="token punctuation">(</span>&#123;name:<span class="token string">"牛逼"</span><span class="token punctuation">,</span>描述:<span class="token string">"66666"</span>&#125;<span class="token punctuation">)</span></code></pre></div><h2 id="MongoDB删除集合"><a href="#MongoDB删除集合" class="headerlink" title="MongoDB删除集合"></a>MongoDB删除集合</h2><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>collection_name<span class="token punctuation">.</span><span class="token keyword">drop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div><p>collection_name为集合的名字</p><h2 id="MongoDB集合重命名"><a href="#MongoDB集合重命名" class="headerlink" title="MongoDB集合重命名"></a>MongoDB集合重命名</h2><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>Old_name<span class="token punctuation">.</span>renameCollection<span class="token punctuation">(</span><span class="token string">"new_name"</span><span class="token punctuation">)</span></code></pre></div><h2 id="MongoDB插入文档"><a href="#MongoDB插入文档" class="headerlink" title="MongoDB插入文档"></a>MongoDB插入文档</h2><p>使用 MongoDB 中的 insert() 或 save() 方法向集合中插入文档</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>collection_name<span class="token punctuation">.</span><span class="token keyword">insert</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span>db<span class="token punctuation">.</span>collection_name<span class="token punctuation">.</span><span class="token keyword">save</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span></code></pre></div><ul><li>save()：如果 _id 主键存在则更新数据，如果不存在就插入数据。不过该方法在新版本的 MongoDB 中已废弃，可以使用 insertOne() 或 replaceOne() 方法来代替；</li><li>insert(): 若插入的数据主键已经存在，则会抛 org.springframework.dao.DuplicateKeyException 异常，并提示主键重复，不保存当前数据。</li></ul><h3 id="insert方法"><a href="#insert方法" class="headerlink" title="insert方法"></a><code>insert</code>方法</h3><p>如在user集合中插入文档</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span><span class="token keyword">insert</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> &#123;id:<span class="token number">1234</span><span class="token punctuation">,</span>phone:<span class="token string">"1234"</span>&#125;<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> &#123;id:<span class="token number">5678</span><span class="token punctuation">,</span>phone:<span class="token string">"5678"</span>&#125;<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></div><p>使用</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div><p>查询了文档</p><div class="code-wrapper"><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span> <span class="token property">"_id"</span> <span class="token operator">:</span> ObjectId(<span class="token string">"62161b7e4e2ab27eb382c9d5"</span>)<span class="token punctuation">,</span> <span class="token property">"id"</span> <span class="token operator">:</span> <span class="token number">1234</span><span class="token punctuation">,</span> <span class="token property">"phone"</span> <span class="token operator">:</span> <span class="token string">"1234"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span> <span class="token property">"_id"</span> <span class="token operator">:</span> ObjectId(<span class="token string">"62161b7e4e2ab27eb382c9d6"</span>)<span class="token punctuation">,</span> <span class="token property">"id"</span> <span class="token operator">:</span> <span class="token number">5678</span><span class="token punctuation">,</span> <span class="token property">"phone"</span> <span class="token operator">:</span> <span class="token string">"5678"</span> <span class="token punctuation">&#125;</span></code></pre></div><p>再次插入相同的<code>_id</code></p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span><span class="token keyword">insert</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> &#123;_id:<span class="token number">62161</span>b7e4e2ab27eb382c9d5<span class="token punctuation">,</span>id:<span class="token number">3456</span><span class="token punctuation">,</span>phone:<span class="token number">3456</span>&#125;<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></div><p>报错：</p><p><code>uncaught exception: SyntaxError: identifier starts immediately after numeric literal : @(shell):2:5</code></p><h3 id="insertOne-方法"><a href="#insertOne-方法" class="headerlink" title="insertOne()方法"></a><code>insertOne()方法</code></h3><p>insert() 方法可以同时插入多个文档，但如果您只需要将一个文档插入到集合中的话，可以使用 insertOne() 方法，该方法的语法格式如下</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>insertOne<span class="token punctuation">(</span>&#123;title:<span class="token string">"baidu"</span><span class="token punctuation">,</span>url:<span class="token string">"www.baidu.com"</span>&#125;<span class="token punctuation">)</span></code></pre></div><h3 id="insertMany-方法"><a href="#insertMany-方法" class="headerlink" title="insertMany() 方法"></a>insertMany() 方法</h3><p>与 insert() 方法相同，您可以使用 insertMany() 方法向集合中插入多个文档，但在使用 insertMany() 方法时您需要向方法中传递一个文档数组，如下例所示：</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>insertMany<span class="token punctuation">(</span><span class="token punctuation">[</span>&#123;id:<span class="token string">"1234"</span><span class="token punctuation">,</span>name:<span class="token string">"张三"</span>&#125;<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></div><p>传入的参数时数组，如果使用<code>db.user.insertMany([&#123;id:&quot;1234&quot;,name:&quot;张三&quot;&#125;])</code>会报错</p><h2 id="MongoDB查询文档"><a href="#MongoDB查询文档" class="headerlink" title="MongoDB查询文档"></a>MongoDB查询文档</h2><p>想user集合插入以下信息</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span><span class="token keyword">insert</span><span class="token punctuation">(</span>&#123;name:<span class="token string">"李四"</span><span class="token punctuation">,</span>phone:<span class="token string">"8208208820"</span>&#125;<span class="token punctuation">)</span>db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span><span class="token keyword">insert</span><span class="token punctuation">(</span>&#123;name:<span class="token string">"张三"</span><span class="token punctuation">,</span>phone:<span class="token string">"1231231212123"</span>&#125;<span class="token punctuation">)</span></code></pre></div><h3 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h3><p>find() 方法可以将查询结果以非结构化的方式展示出来，其语法格式如下：</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>collection_name<span class="token punctuation">.</span>find<span class="token punctuation">(</span>query<span class="token punctuation">,</span> projection<span class="token punctuation">)</span></code></pre></div><ul><li>query：可选参数，使用查询操作符指定查询条件；</li><li>projection：可选参数，使用投影操作符指定返回的键。查询时若要返回文档中所有键值，只需省略该参数即可（默认省略）。</li></ul><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div><div class="code-wrapper"><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span> <span class="token property">"_id"</span> <span class="token operator">:</span> ObjectId(<span class="token string">"621629f87109e84438ef855d"</span>)<span class="token punctuation">,</span> <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token property">"phone"</span> <span class="token operator">:</span> <span class="token string">"8208208820"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span> <span class="token property">"_id"</span> <span class="token operator">:</span> ObjectId(<span class="token string">"62162a0d7109e84438ef855e"</span>)<span class="token punctuation">,</span> <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token property">"phone"</span> <span class="token operator">:</span> <span class="token string">"1231231212123"</span> <span class="token punctuation">&#125;</span></code></pre></div><p>只显示name字段,1显示，0不显示</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span>&#123;&#125;<span class="token punctuation">,</span>&#123;name:<span class="token number">1</span>&#125;<span class="token punctuation">)</span></code></pre></div><h3 id="pretty-方法"><a href="#pretty-方法" class="headerlink" title="pretty() 方法"></a>pretty() 方法</h3><p>仅使用 find() 方法查询出的结果看起来比较凌乱，MongoDB 中还提供了一个 pretty() 方法来格式化查询到的结果，让查询到的数据以更易读的方式展示出来，具体语法如下：</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>collection_name<span class="token punctuation">.</span>find<span class="token punctuation">(</span>query<span class="token punctuation">,</span> projection<span class="token punctuation">)</span><span class="token punctuation">.</span>pretty<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div><p>在使用 find() 查询数据时，使用 pretty() 方法来格式化查询到的数据：</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pretty<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div><p>结果为：</p><div class="code-wrapper"><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> ObjectId(<span class="token string">"621629f87109e84438ef855d"</span>)<span class="token punctuation">,</span>        <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"李四"</span><span class="token punctuation">,</span>        <span class="token property">"phone"</span> <span class="token operator">:</span> <span class="token string">"8208208820"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> ObjectId(<span class="token string">"62162a0d7109e84438ef855e"</span>)<span class="token punctuation">,</span>        <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>        <span class="token property">"phone"</span> <span class="token operator">:</span> <span class="token string">"1231231212123"</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="findOne-方法"><a href="#findOne-方法" class="headerlink" title="findOne()方法"></a>findOne()方法</h3><p>findOne() 方法查询集合中的文档，但 findOne() 方法仅能返回一个查询到的文档，其语法格式如下：</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>collection_name<span class="token punctuation">.</span>findOne<span class="token punctuation">(</span>query<span class="token punctuation">,</span> projection<span class="token punctuation">)</span></code></pre></div><p>如：</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>findOne<span class="token punctuation">(</span>&#123;name:<span class="token string">"张三"</span>&#125;<span class="token punctuation">)</span></code></pre></div><p>结果为:</p><div class="code-wrapper"><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> ObjectId(<span class="token string">"621628d77109e84438ef855b"</span>)<span class="token punctuation">,</span>        <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>        <span class="token property">"phone"</span> <span class="token operator">:</span> <span class="token string">"1231231212123"</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><p>MongoDB 中也支持类似关系型数据库中 where 字句的条件查询，下表中列举了 MongoDB 中条件查询与关系型数据库中 where 字句的比较：</p><table><thead><tr><th>操作</th><th>格式</th><th>范例</th><th>关系型数据库中的类似语句</th></tr></thead><tbody><tr><td>等于</td><td>{<key>:<value>}</td><td>db.col.find({“by”:”范例”})</td><td>where by &#x3D; ‘范例’</td></tr><tr><td>小于</td><td>{<key>:{<code>$lt</code>:<value>}}</td><td>db.col.find({“likes”:{$lt:50}})</td><td>where likes &lt; 50</td></tr><tr><td>小于或等于</td><td>{<key>:{<code>$lte</code>:<value>}}</td><td>db.col.find({“likes”:{$lte:50}})</td><td>where likes &lt;&#x3D; 50</td></tr><tr><td>大于</td><td>{<key>:{<code>$gt</code>:<value>}}</td><td>db.col.find({“likes”:{$gt:50}})</td><td>where likes &gt; 50</td></tr><tr><td>大于或等于</td><td>{<key>:{<code>$gte</code>:<value>}}</td><td>db.col.find({“likes”:{$gte:50}})</td><td>where likes &gt;&#x3D; 50</td></tr><tr><td>不等于</td><td>{<key>:{<code>$ne</code>:<value>}}</td><td>db.col.find({“likes”:{$ne:50}})</td><td>where likes !&#x3D; 50</td></tr><tr><td>数组中的值</td><td>{<key>:{<code>$in</code>:[<value1>, <value2>, …<valueN>]}}</td><td>db.col.find({title:{$in:[“范例1”, “范例2”]}})</td><td>where title in(“范例1”, “范例2”)</td></tr><tr><td>非数组中的值</td><td>{<key>:{<code>$nin</code>:[<value1>, <value2>, …<valueN>]}}</td><td>db.col.find({title:{$nin:[“范例”, “范例2”]}})</td><td>where title not in(“范例”, “范例2”)</td></tr></tbody></table><h3 id="And条件语句"><a href="#And条件语句" class="headerlink" title="And条件语句"></a>And条件语句</h3><p>MongoDB 的 find() 方法可以传入多个键（key），每个键以逗号隔开，类似于常规 SQL 语句中的 AND 条件语句。语法格式如下：</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>collection_name<span class="token punctuation">.</span>find<span class="token punctuation">(</span>&#123;$<span class="token operator">and</span>:<span class="token punctuation">[</span>&#123;<span class="token operator">&lt;</span>key1<span class="token operator">></span>:<span class="token operator">&lt;</span>value1<span class="token operator">></span>&#125;<span class="token punctuation">,</span> &#123;<span class="token operator">&lt;</span>key2<span class="token operator">></span>:<span class="token operator">&lt;</span>value2<span class="token operator">></span>&#125;<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>&#125;<span class="token punctuation">)</span></code></pre></div><p>如:</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span>&#123;$<span class="token operator">and</span>:<span class="token punctuation">[</span>&#123;name:<span class="token string">"张三"</span>&#125;<span class="token punctuation">,</span>&#123;id:<span class="token string">"1234"</span>&#125;<span class="token punctuation">]</span>&#125;<span class="token punctuation">)</span></code></pre></div><h3 id="OR-条件语句"><a href="#OR-条件语句" class="headerlink" title="OR 条件语句"></a>OR 条件语句</h3><p>MongoDB 中的 OR 条件语句需要使用 $or 关键字，语法格式如下：</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>collection_name<span class="token punctuation">.</span>find<span class="token punctuation">(</span>&#123;$<span class="token operator">or</span>:<span class="token punctuation">[</span>&#123;<span class="token operator">&lt;</span>key1<span class="token operator">></span>: <span class="token operator">&lt;</span>value1<span class="token operator">></span>&#125;<span class="token punctuation">,</span> &#123;<span class="token operator">&lt;</span>key2<span class="token operator">></span>:<span class="token operator">&lt;</span>value2<span class="token operator">></span>&#125;<span class="token punctuation">]</span>&#125;<span class="token punctuation">)</span></code></pre></div><p>如：</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span>&#123;$<span class="token operator">or</span>:<span class="token punctuation">[</span>&#123;name:<span class="token string">"张三"</span>&#125;<span class="token punctuation">,</span>&#123;name:<span class="token string">"李四"</span>&#125;<span class="token punctuation">]</span>&#125;<span class="token punctuation">)</span></code></pre></div><p>and与or同时使用</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span>&#123;$<span class="token operator">or</span>:<span class="token punctuation">[</span>&#123;$<span class="token operator">and</span>:<span class="token punctuation">[</span>&#123;name:<span class="token string">"张三"</span>&#125;<span class="token punctuation">,</span>&#123;id:<span class="token string">"1234"</span>&#125;<span class="token punctuation">]</span>&#125;<span class="token punctuation">,</span>&#123;$<span class="token operator">and</span>:<span class="token punctuation">[</span>&#123;name:<span class="token string">"李四"</span>&#125;<span class="token punctuation">,</span>&#123;phone:<span class="token string">"8208208820"</span>&#125;<span class="token punctuation">]</span>&#125;<span class="token punctuation">]</span>&#125;<span class="token punctuation">)</span></code></pre></div><p>示例用于查找<code>name=张三</code><font color="red">且</font><code>id=1234</code><font color="green">或</font><code>name=李四</code><font color="red">且</font><code>phone=8208208820</code>的文档</p><h2 id="MongoDB更新文档"><a href="#MongoDB更新文档" class="headerlink" title="MongoDB更新文档"></a>MongoDB更新文档</h2><p>在 MongoDB 中，可以使用 update() 和 save() 方法来更新集合中的文档。其中 update() 方法可以更新现有文档中的值，而 save() 方法则可以使用传入文档来替换已有文档。</p><h3 id="update-方法"><a href="#update-方法" class="headerlink" title="update() 方法"></a>update() 方法</h3><p>update() 方法用于更新现有文档中的值，其语法格式如下：</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>collection_name<span class="token punctuation">.</span><span class="token keyword">update</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>query<span class="token operator">></span><span class="token punctuation">,</span>  <span class="token operator">&lt;</span><span class="token keyword">update</span><span class="token operator">></span><span class="token punctuation">,</span>  &#123;    upsert: <span class="token operator">&lt;</span><span class="token keyword">boolean</span><span class="token operator">></span><span class="token punctuation">,</span>    multi: <span class="token operator">&lt;</span><span class="token keyword">boolean</span><span class="token operator">></span><span class="token punctuation">,</span>    writeConcern: <span class="token operator">&lt;</span>document<span class="token operator">></span>  &#125;<span class="token punctuation">)</span></code></pre></div><p>参数说明如下：</p><ul><li><code>query</code>：update 的查询条件，类似 SQL 中 update 语句内 where 后面的内容；</li><li><code>update</code>：update 的对象和一些更新的操作符（如 $、$inc…）等，也可以理解为 SQL 中 update 语句内 set 后面的内容；</li><li><code>upsert</code>：可选参数，默认值为 false，用来定义当要更新的记录不存在时，是否当作新记录插入到集合中，当值为 true 时表示插入，值为 false 时不插入；</li><li><code>multi</code>：可选参数，默认值为 false，用来表示只更新找到的第一条记录，当值为 true 时，则把按条件查出来的多条记录全部更新；</li><li><code>writeConcern</code>：可选参数，用来定义抛出异常的级别。</li></ul><p>如想course中插入以下数据</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>course<span class="token punctuation">.</span><span class="token keyword">insert</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> &#123;<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     title: <span class="token string">'MongoDB教程'</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     author: <span class="token string">'编程帮'</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     url: <span class="token string">'http://www.biancheng.com/'</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> &#125;<span class="token punctuation">,</span>&#123;<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     title: <span class="token string">'HTML教程'</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     author: <span class="token string">'编程帮'</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     url: <span class="token string">'http://www.biancheng.com/html/index.html'</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> &#125;<span class="token punctuation">,</span>&#123;<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     title: <span class="token string">'C#教程'</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     author: <span class="token string">'编程帮'</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     url: <span class="token string">'http://www.biancheng.com/csharp/index.html'</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> &#125;<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></div><p>更新title&#x3D;HTML教程的文档</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>course<span class="token punctuation">.</span><span class="token keyword">update</span><span class="token punctuation">(</span>&#123;title:<span class="token string">"HTML教程"</span>&#125;<span class="token punctuation">,</span>&#123;$<span class="token keyword">set</span>:&#123;url:<span class="token string">"htttps://null"</span><span class="token punctuation">,</span>author:<span class="token string">"null"</span>&#125;&#125;<span class="token punctuation">)</span></code></pre></div><h3 id="save-方法"><a href="#save-方法" class="headerlink" title="save()方法"></a>save()方法</h3><p>MongoDB 中的 save() 方法可以使用传入的文档来替换已有文档，若 _id 主键存在则更新已有文档，若 _id 主键不存在则作为新数据插入到集合中。语法格式如下：</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>collection_name<span class="token punctuation">.</span><span class="token keyword">save</span><span class="token punctuation">(</span>    <span class="token operator">&lt;</span>document<span class="token operator">></span><span class="token punctuation">,</span>    &#123;        writeConcern: <span class="token operator">&lt;</span>document<span class="token operator">></span>    &#125;<span class="token punctuation">)</span></code></pre></div><ul><li>document : 文档数据；</li><li>writeConcern :可选，抛出异常的级别。</li></ul><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span><span class="token keyword">save</span><span class="token punctuation">(</span>&#123;<span class="token string">"_id"</span>:ObjectId<span class="token punctuation">(</span><span class="token string">"62161b7e4e2ab27eb382c9d5"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"name"</span>:<span class="token string">"小西瓜"</span>&#125;<span class="token punctuation">)</span></code></pre></div><h2 id="MongoDB删除文档"><a href="#MongoDB删除文档" class="headerlink" title="MongoDB删除文档"></a>MongoDB删除文档</h2><p>在 MongoDB 中，您可以使用 remove() 方法从集合中删除文档，语法格式如下：</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>collection_name<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>  <span class="token operator">&lt;</span>query<span class="token operator">></span><span class="token punctuation">,</span>  &#123;    justOne: <span class="token operator">&lt;</span><span class="token keyword">boolean</span><span class="token operator">></span><span class="token punctuation">,</span>    writeConcern: <span class="token operator">&lt;</span>document<span class="token operator">></span>  &#125;<span class="token punctuation">)</span></code></pre></div><ul><li>query：可选参数，定义要删除文档的条件；</li><li>justOne：可选参数，如果设为 true 或 1，则只删除一个文档，如果不设置该参数，或使用默认值 false，则删除所有匹配条件的文档；</li><li>writeConcern：可选参数，定义抛出异常的级别。</li></ul><p>如：</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">.</span>remove<span class="token punctuation">(</span>&#123;name:<span class="token string">"小西瓜"</span>&#125;<span class="token punctuation">)</span></code></pre></div><h2 id="MongoDB更多查询使用"><a href="#MongoDB更多查询使用" class="headerlink" title="MongoDB更多查询使用"></a>MongoDB更多查询使用</h2><h3 id="限制查询"><a href="#限制查询" class="headerlink" title="限制查询"></a>限制查询</h3><h4 id="limit-方法"><a href="#limit-方法" class="headerlink" title="limit() 方法"></a>limit() 方法</h4><p>MongoDB 中要限制查询的记录条数可以使用 limit() 方法，该方法接收一个数字作为参数，用来设置要显示的记录数，如下所示：</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>collection_name<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">limit</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span></code></pre></div><h4 id="skip-方法"><a href="#skip-方法" class="headerlink" title="skip() 方法"></a>skip() 方法</h4><p>除了 limit() 方法外，MongoDB 中还提供了另一种方法 skip()，它同样也可以接收一个数字类型的参数，用来设置要跳过的文档数。其语法格式如下：</p><p>db.collection_name.find().skip(number)</p><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><h4 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h4><p>要在 MongoDB 中对查询到的文档进行排序，您可以使用 sort() 方法，该方法的语法格式如下：</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">db<span class="token punctuation">.</span>collection_name<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort<span class="token punctuation">(</span>&#123;<span class="token keyword">key</span>:<span class="token number">1</span>&#125;<span class="token punctuation">)</span></code></pre></div><p>其中 key 用来定义要根据那个字段进行排序，后面的值 1 则表示以升序进行排序，若要以降序进行排序则需要将其设置为 -1。</p><h2 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a><font color="green">未完待续…</font></h2>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NoSQL</tag>
      
      <tag>MongoDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Servlet 基础 学习笔记</title>
    <link href="/2022/02/10/%E5%BC%80%E5%8F%91/%E5%90%8E%E7%AB%AF/Servlet%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/02/10/%E5%BC%80%E5%8F%91/%E5%90%8E%E7%AB%AF/Servlet%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="jsandcss/player/APlayer.min.css"><script src="/jsandcss/player/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/jsandcss/player/Meting.min.js"></script><h2 id="编写与设置Servlet"><a href="#编写与设置Servlet" class="headerlink" title="编写与设置Servlet"></a>编写与设置Servlet</h2><h3 id="使用-Webservlet"><a href="#使用-Webservlet" class="headerlink" title="使用@Webservlet"></a>使用<code>@Webservlet</code></h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token comment">//Servlet的名称</span>urlPatterns<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"/hello"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">//请求URI</span>loadOnStartup<span class="token operator">=</span><span class="token number">1</span><span class="token comment">//默认值为-1，设置大于0的数字，容器会将数字小的优先初始化</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="使用web-xml"><a href="#使用web-xml" class="headerlink" title="使用web.xml"></a>使用<code>web.xml</code></h3><div class="code-wrapper"><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3.1<span class="token punctuation">"</span></span> <span class="token attr-name">metadata-complete</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--metadata-complete默认值为false,当其为true,部署时不会扫描web-Fragment.xml&lt;absolute-ordering>与&lt;ording>也失效--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span>jsp_demo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--定义配置顺序,设置多个web-fragment.xml的配置顺序,--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>absolute-ordering</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--先WebFragment2,后WebFragment1--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>WebFragment2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>WebFragment1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>absolute-ordering</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>Servlet名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>类名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--加载优先级--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>Servlet名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>URI<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--设置欢迎页--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file-list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>index.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>index.htm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>index.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>default.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>default.htm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>default.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file-list</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre></div><h3 id="使用web-fragment-xml"><a href="#使用web-fragment-xml" class="headerlink" title="使用web-fragment.xml"></a>使用web-fragment.xml</h3><p>在使用分工合作时，在<code>META-INF</code> 文件夹中配置web-fragement.xml十分方便。</p><p><code>WebFragment2.xml</code></p><div class="code-wrapper"><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-fragment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>WebFragment_ID<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3.1<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-fragment_3_1.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span>WebFragment2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>WebFragment2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--配置顺序，--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ordering</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>after</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>WebFragment2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>after</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ordering</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>类名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>uri<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-fragment</span><span class="token punctuation">></span></span></code></pre></div><p><code>Webfragment2.xml</code></p><div class="code-wrapper"><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-fragment</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span>WebFragment1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>WebFragment1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ordering</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>before</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>others</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>before</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ordering</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-fragment</span><span class="token punctuation">></span></span></code></pre></div><p>以上两个xml配置顺序时WebFragment1、WebFragment2</p><h3 id="Web文件夹结构"><a href="#Web文件夹结构" class="headerlink" title="Web文件夹结构"></a>Web文件夹结构</h3><p>Web应用程序基本由以下项目组成</p><ul><li>静态资源(HTML、图片、视频)</li><li>Servlet</li><li>JSP</li><li>自定义类</li><li>工具类</li><li>部署描述文件(web.xml)、设置信息(Annotation等)</li></ul><p>web应用程序有一特殊文件夹<code>/WEB-INF</code> ,其中的资源不可直接请求，如起中的<code>web.xml</code>部署描述文件 <code>classes 文件夹 </code> 存放了自定义类 <code>lib文件夹</code>放置应用到的JAR文件。</p><p><code>/META-INF/resources</code>文件夹中可以放置静态资源或JSP等，如果First项目收到某次请求First&#x2F;index.html,但实际上项目中不存在First下的index.html，则会使用resources中的index.html。(tips:好像仅能用于index.html的请求)</p><p>  如果要用到某个类，Web应用程序先在<code>/WEB-INF/classes</code>中尝试加载类,若无，试从<code>/WEB-INF/lib</code>的Jar文件中搜索类文件，若无，容器实现本身存放的类或JAR的文件中搜索。</p><h2 id="请求与相应"><a href="#请求与相应" class="headerlink" title="请求与相应"></a>请求与相应</h2><h3 id="关于HttpServletRequest"><a href="#关于HttpServletRequest" class="headerlink" title="关于HttpServletRequest"></a>关于HttpServletRequest</h3><h4 id="获取相关路径"><a href="#获取相关路径" class="headerlink" title="获取相关路径"></a>获取相关路径</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取完整的请求路径</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取请求路径</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取环境路径</span><span class="token function">getServletPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取Servlet路径</span><span class="token function">getPathInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取路径信息</span></code></pre></div><p>如:</p><p>Servlet项目路径名为Servlet,存在一个路径映射为<code>demo</code>的Servlet，访问以下网址以上四个的返回值分别为</p><div class="code-wrapper"><pre class="language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//localhost:8080/Servlet/demo/ttttt?fasdf=1</span></span></code></pre></div><div class="code-wrapper"><pre class="language-mark" data-language="mark"><code class="language-mark">http:&#x2F;&#x2F;localhost:8080&#x2F;Servlet&#x2F;demo&#x2F;ttttt&#x2F;Servlet&#x2F;demo&#x2F;ttttt&#x2F;Servlet&#x2F;demo&#x2F;ttttt</code></pre></div><h4 id="处理请求参数"><a href="#处理请求参数" class="headerlink" title="处理请求参数"></a>处理请求参数</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><p>  指定请求参数名称来取得对应的值。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token function">getParameterValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><p>  如果窗体上有可复选的元件，如复选框(Checkbox)、列表(List)等,同一个请求参数名称会有多个值,getParameterValues();返回一个String数组。</p><p>  如：</p>  <div class="code-wrapper"><pre class="language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//www.****.com/?param=10&amp;parm=11param=10&amp;parm=11&amp;param=12&amp;parm=13</span></span></code></pre></div><div class="code-wrapper"><pre class="language-getPjava" data-language="getPjava"><code class="language-getPjava">getParameterNames();</code></pre></div><p>  获取全部请求参数名称，以 <code>Enumeration&lt;String&gt;</code>对象返回。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><p>  将请求参数以 Map&lt;String,String[]&gt;对象返回，Key是请求参数名称，Value是请求参数值。</p><p>处理请求标头</p><h4 id="处理请求标头"><a href="#处理请求标头" class="headerlink" title="处理请求标头"></a>处理请求标头</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><p>  将标头信息以String类型返回。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><p>  指定标头名称后返回<code>Enumeration&lt;String&gt;</code>，包含所有标头字符串名称。</p><p>  <i>一些消息头，例如 Accept-Language <font color="red">可以</font>被客户端作为每一个具有不同取值的几个消息头发送，而不是发送作为用逗号分隔的列表的一个消息头。</i> 具体什么时候可以，本人没有找到相关的例子。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token function">getHeaderNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><p>  以<code>Enumeration&lt;String&gt;</code>返回所有标头字符串名称</p><h4 id="请求参数编码处理"><a href="#请求参数编码处理" class="headerlink" title="请求参数编码处理"></a>请求参数编码处理</h4><p>如果浏览器发送请求使用的是UTF-8编码，接收时想使用UTF-8编码则使用：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><p>也可以在web.xml中加入</p><div class="code-wrapper"><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>request-character-encoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>request-character-encoding</span><span class="token punctuation">></span></span></code></pre></div><h4 id="取得上传文件"><a href="#取得上传文件" class="headerlink" title="取得上传文件"></a>取得上传文件</h4><h5 id="主要方法"><a href="#主要方法" class="headerlink" title="主要方法"></a>主要方法</h5><p>Interface HttpSevletRequest</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Part</span> <span class="token function">getPart</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Part</span><span class="token punctuation">></span></span> <span class="token function">getParts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><p>Interface Part</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> <span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取带有给定名称的Part头的值</span><span class="token class-name">InputStream</span> <span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><h5 id="以获取上传图片为例子："><a href="#以获取上传图片为例子：" class="headerlink" title="以获取上传图片为例子："></a>以获取上传图片为例子：</h5><p>html表单如下：</p><div class="code-wrapper"><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>photo.php.py.java<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>filename<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>photo<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre></div><p>Servlet 代码</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileNotFoundException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">OutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span></span><span class="token class-name">Matcher</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span></span><span class="token class-name">Pattern</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">MultipartConfig</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">Part</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@MultipartConfig</span> <span class="token comment">//必须设置此标注才能使用getPart()相关API，否则getPart()返回null</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"uploadphoto"</span><span class="token punctuation">,</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/photo.php.py.java"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Photo</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Pattern</span> fileNameRegex<span class="token operator">=</span><span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"filename=\"(.*)\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token class-name">Part</span> photo <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getPart</span><span class="token punctuation">(</span><span class="token string">"photo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> filename <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"filename"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>filename<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">||</span>filename<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>filename <span class="token operator">=</span> <span class="token function">getSubmittedFileName</span><span class="token punctuation">(</span>photo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">boolean</span> is <span class="token operator">=</span> <span class="token function">write</span><span class="token punctuation">(</span>photo<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"D:/"</span><span class="token operator">+</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"error in writer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//通过标头获取文件的名称</span><span class="token keyword">private</span> <span class="token class-name">String</span>  <span class="token function">getSubmittedFileName</span><span class="token punctuation">(</span><span class="token class-name">Part</span> part<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> header <span class="token operator">=</span> part<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> fileNameRegex<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">;</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> filename <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>filename<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"\\"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> filename<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>filename<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"\\"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> filename<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//写入文件，默认到D盘</span>    <span class="token comment">/*    *虽然在Servlet3.1中Part新增了getSubmittedFileName(),可以直接取得上传文件名，但是由于问浏览器上传文件的差异性，上传的文件名可能含有不安全的字符。    */</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">Part</span> photo<span class="token punctuation">,</span><span class="token class-name">String</span> filename<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span><span class="token class-name">FileNotFoundException</span> <span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in <span class="token operator">=</span> photo<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">OutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"D:/"</span><span class="token operator">+</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>length<span class="token operator">=</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p><code>@MultipartConfig</code>标注可以用来设置Servlet处理上传文件的相关信息，可用属性有:</p><p><code>fileSizeThreshold</code>:整数值设置，默认为0，上传文件超出设置，会先写入缓存。</p><p><span id="location"><code>location</code></span>: 字符串设置，设置写入目录。</p><p><code>maxFileSize</code>:限制单个文件的大小，默认值为-1L,表示不限制(单位：字节)。</p><p><code>maxRequestSize</code>:限制multipart&#x2F;form-data请求的(表单)大小，默认-1L，表示不限制(单位：字节)。</p><p>tips:在设置文件表单的限制大小后，当提交的文件或表单大小超限Servlet就会抛出异常。</p><p>如果要通过web.xml设置@MultipartConfig的属性</p><div class="code-wrapper"><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>cn.name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>multipart-config</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">></span></span>c:/worspace<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>location</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>multipart-config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span></code></pre></div><h5 id="Part-write"><a href="#Part-write" class="headerlink" title="Part.write()"></a>Part.write()</h5><p>Part有方便的write()方法，可以直接将上传文件指定的文件名写入磁盘，写入的相对路径为前面设置的<a href="#location">location</a>。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>req<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html; charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>req<span class="token punctuation">.</span><span class="token function">getParts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>part<span class="token operator">-></span>part<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"photo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">write</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">Part</span> part<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> filename <span class="token operator">=</span>part<span class="token punctuation">.</span><span class="token function">getSubmittedFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>filename <span class="token operator">=</span> filename<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>filename<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取后缀名</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>part<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s%s"</span><span class="token punctuation">,</span><span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEpochMilli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//文件名为时间+后缀名</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// TODO: handle exception</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h4 id="使用RequestDispatcher调派请求"><a href="#使用RequestDispatcher调派请求" class="headerlink" title="使用RequestDispatcher调派请求"></a>使用RequestDispatcher调派请求</h4><h5 id="使用include方法"><a href="#使用include方法" class="headerlink" title="使用include方法"></a>使用include方法</h5><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/DispTest"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DispatcherTest</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RequestDispatcher</span> dispatcher <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/others"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//目标Servlet的绝对路径或者相对路径。</span>        <span class="token comment">// req.getRequestDispatcher("/others?name=1").include(req, resp);</span>        <span class="token comment">//name属性的值可以被被转发或被包含的Servlet通过req.getParmeter("name")获得且当当前Servlet的http链接中存在name不为1，被包含的Servlet取得的值仍然为1</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"three "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dispatcher<span class="token punctuation">.</span><span class="token function">inlude</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/others"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DispatcherTest</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"two "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>访问<code>/DispTest</code> 时就会收到 <code>three two one</code>.</p><p>在使用include时，客户端不会有新的页面生成，页面仍停留在&#x2F;DispTest,相当将&#x2F;others的输出内容插入到了&#x2F;DispTest中，由&#x2F;DispTest输出。</p><h5 id="请求范围属性"><a href="#请求范围属性" class="headerlink" title="请求范围属性"></a>请求范围属性</h5><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置名称与对象属性</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//取得名称的属性</span>getAttributeNames<span class="token punctuation">;</span> <span class="token comment">//取得所有属性名称</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//移除指定名称的属性</span></code></pre></div><p>在请求&#x2F;响应之后，请求对象会被销毁回收，设置的属性也消失，所以通过setAttribute色湖之的属性才成为请求范围属性。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/jumping/*"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dispatcher</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"alpha"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"666666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/jump?test=1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/jump/*"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Jump</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token class-name">PrintWriter</span> out <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> e <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getAttributeNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>req<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>当访问jumping时，会得到以下返回</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">alpha<span class="token number">666666</span>javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>include<span class="token punctuation">.</span>request_urijavax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>include<span class="token punctuation">.</span>context_pathjavax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>include<span class="token punctuation">.</span>servlet_pathjavax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>include<span class="token punctuation">.</span>query_stringjavax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>include<span class="token punctuation">.</span>mappingnameid<span class="token keyword">null</span></code></pre></div><p><font color="red">等等</font>，中间的一坨是什么？</p><p>属性名称为<code>java.</code> <code>javax.</code> 开头的名称通常保留给规格书中某些特定意义的属性，如：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>include<span class="token punctuation">.</span>request_urijavax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>include<span class="token punctuation">.</span>context_pathjavax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>include<span class="token punctuation">.</span>servlet_pathjavax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>include<span class="token punctuation">.</span>query_stringjavax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>include<span class="token punctuation">.</span>mapping <span class="token comment">//Servlet 4.0新增 在3.1中也能看到。</span></code></pre></div><p>因为在执行 include 时，传入了HttpServletRequest和HttpServletResponse对象，被包含的Servlet使用的这两个对象与原Servlet的这两个对象是相同的，也就没法获取在include中设置的一些路径信息。</p><p>则通过getAttribute，传入以下参数获取。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">RequestDispatcher</span><span class="token punctuation">.</span>INCLUDE_REQUEST_URI<span class="token class-name">RequestDispatcher</span><span class="token punctuation">.</span>INCLUDE_CONTEXT_PATH<span class="token class-name">RequestDispatcher</span><span class="token punctuation">.</span>INCLUDE_SERVLET_PATH<span class="token class-name">RequestDispatcher</span><span class="token punctuation">.</span>INCLUDE_QUERY_STRING<span class="token class-name">RequestDispatcher</span><span class="token punctuation">.</span>INCLUDE_MAPPING</code></pre></div><h5 id="使用forward-方法"><a href="#使用forward-方法" class="headerlink" title="使用forward()方法"></a>使用forward()方法</h5><p>与include相似，但是在使用forward()方法前使用的所有相应设置会被忽略</p><p>略…</p><h3 id="关于HttpServletResponse"><a href="#关于HttpServletResponse" class="headerlink" title="关于HttpServletResponse"></a>关于HttpServletResponse</h3><h4 id="设置响应头，缓冲区"><a href="#设置响应头，缓冲区" class="headerlink" title="设置响应头，缓冲区"></a>设置响应头，缓冲区</h4><h5 id="设置响应头"><a href="#设置响应头" class="headerlink" title="设置响应头"></a>设置响应头</h5><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置标头名称与值</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//在同一标头上附加值</span><span class="token comment">//标头是整数</span><span class="token function">setIntHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">addIntHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//标头是日期</span><span class="token function">setDateHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">addDateHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置状态代码</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><p>标头的设置应在响应前，响应后的标头设置会被容器忽略。、</p><h5 id="设置缓冲区"><a href="#设置缓冲区" class="headerlink" title="设置缓冲区"></a>设置缓冲区</h5><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**必须在调用HttpServletResponse的getWriter()或getOutputStream()前调用*这样取得的Writer或ServletOutputStream才会套用这个设置。*若在getWriter()或getOutputStream()之后调用抛出异常*Servlet容器会选用至少等于请求得缓存区。*/</span><span class="token function">getBufferSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setBufferSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">isCommittde</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//查看是否响应已确认</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//连同设置的标头一并清除,必须在响应确认之前调用,响应确认后抛出IllegalStateException异常</span><span class="token function">resetBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//重置响应内容，不会清除设置的标头，必须在响应确认之前调用。</span><span class="token function">flushBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//清除(flush)所用缓冲区已经设置的响应信息至浏览器,此时，响应已确认。</span></code></pre></div><h4 id="getWriter"><a href="#getWriter" class="headerlink" title="getWriter"></a>getWriter</h4><p>在没有设置任何内容类型或编码之前,HttpServletResponse使用得字符默认编码是<code>ISO-8859-1</code> </p><h5 id="设置Locale"><a href="#设置Locale" class="headerlink" title="设置Locale"></a>设置Locale</h5><p>如果浏览器发送了Accep-Language标头,可以使用HttpServletRequest得<code>getLocale()</code>取得Locale对象。代表客户可以接受得语系</p><h5 id="使用setCharacterEncoding-或setContentType"><a href="#使用setCharacterEncoding-或setContentType" class="headerlink" title="使用setCharacterEncoding()或setContentType()"></a>使用setCharacterEncoding()或setContentType()</h5><p>响应字符编码处理使用HttpServletResponse得setCharacterEncoding()</p><p>也可以在web.xml中设置默认区域与编码对应</p><div class="code-wrapper"><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>locale-encoding-mapping-list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>locale-encoding-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>locale</span><span class="token punctuation">></span></span>zh-TW<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>locale</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoding</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>locale-encoding-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>locale-encoding-mapping-list</span><span class="token punctuation">></span></span></code></pre></div><p>使用setContentType()</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">restp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html; charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置内容类型位text/html，自动调用setCharacterEncoding()设置编码位UTF-8</span></code></pre></div><p>在web.xml中设置整个程序的响应编码。</p><div class="code-wrapper"><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>response-character-encoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>response-character-encoding</span><span class="token punctuation">></span></span></code></pre></div><p>浏览器如要知道如何处理响应，所以需要告知内容类型，<code>setContentType()</code>方法在响应中设置content-type响应标头,只要指定MIME类型就可以。常见的MIME设置有<code>text/html</code>  <code>application/pdf</code>  <code>application/jar</code> <code>application/x-zip</code> <code>image/jpeg</code>等</p><p>可以在web.xml中设置后缀与MIME类型对应</p><div class="code-wrapper"><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mime-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>extension</span><span class="token punctuation">></span></span>pdf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>extension</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mime-type</span><span class="token punctuation">></span></span>application/pdf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mime-type</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mime-mapping</span><span class="token punctuation">></span></span></code></pre></div><h3 id="使用getOutputStream"><a href="#使用getOutputStream" class="headerlink" title="使用getOutputStream"></a>使用getOutputStream</h3><p>使用<code>HTTPServletResponse.getOutputStream()</code>取得的<code>ServletOutputStream</code>实例输出二进制字符.</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> pwd <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>pwd<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">|</span>pwd<span class="token operator">==</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//请求参数对应的值正确进行读取文件操作</span><span class="token keyword">if</span><span class="token punctuation">(</span>pwd<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//resp.setContentType("application/webm");</span>resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/pdf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//File file = new File(".....test.webm");</span><span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">".....文件路径略.....test.pdf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">OutputStream</span> out <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>length<span class="token operator">=</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// TODO: handle exception</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>以上文件在访问时浏览器如果存在pdf阅读功能，会自动打开文件,但是，当将读取其他文件，如<code>webm</code> (一种视频文件格式),浏览器若不知道用什么工具或软件打开，就会提示另存或自动保存，而自动保存的格式与设置的MIME并无关系</p><p>在获取文件时，如果要获取整个设备上的任意文件(有访问权限)可以用<code>File</code>类，如果时获取当前项目的文件如<code>WEB-INF</code>下的文件,则可以用以下方法</p><p><a name="getResourceAsStream"> </a></p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/video/test.pdf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><h3 id="sendRedirect"><a href="#sendRedirect" class="headerlink" title="sendRedirect()"></a>sendRedirect()</h3><p>使用<code>HttpServletResponse</code>的<code>sendRedirect()</code>要求浏览器重新请求一个URI，又称为重定向(Redirect)</p><p>如：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"https://baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><p>该方法会在响应中设置HTTP状态码<code>302</code>及Location标头，浏览器会以get方法请求新的URI。</p><h3 id="sendError"><a href="#sendError" class="headerlink" title="sendError()"></a>sendError()</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">response<span class="token punctuation">.</span><span class="token function">sendError</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">.</span>SC_NOT_FOUND<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><p><code>SC_NOT_FOUND</code>会令服务器响应<code>404</code>状态码。</p><h2 id="会话管理"><a href="#会话管理" class="headerlink" title="会话管理"></a>会话管理</h2><h3 id="使用Cookie"><a href="#使用Cookie" class="headerlink" title="使用Cookie"></a>使用Cookie</h3><p>Cookie是servlet发送到Web浏览器的少量信息，由浏览器保存，然后发送回服务器。cookie的值可以唯一标识客户端，因此cookie通常用于会话管理。cookie有名称、单个值和可选属性，如注释、路径和域限定符、最大使用年限和版本号。</p><p>一些Web浏览器在处理可选属性方面存在bug，所以要尽量少使用它们，以提高servlet的互操作性。servlet通过使用HttpServletResponse.addCookie (javax.servlet.http.Cookie)方法发送Cookie，它在HTTP响应头中添加字段，以便向浏览器发送Cookie，每次一个。该浏览器预计将为每个Web服务器支持20个cookie，总计300个cookie，并可能将cookie大小限制在每个4kb。浏览器通过在HTTP请求头中添加字段将cookie返回给servlet。可以通过使用Ht tpServletRequest从请求中检索cookie。</p><p>getCookies()方法。多个cookie可能具有相同的名称但不同的路径属性。cookie会影响使用它们的Web页面的缓存。HTTP 1.0不缓存使用这个类创建的cookie的页面。这个类不支持HTTP 1.1中定义的缓存控件。</p><table><thead><tr><th>返回值</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>Object</code></td><td>clone()</td><td>重写标准方法以返回此 Cookie 的副本。</td></tr><tr><td><code> String</code></td><td><code>getComment()</code></td><td>返回描述此 Cookie 用途的注释，或者如果该 Cookie 没有注释返回null</td></tr><tr><td><code> String</code></td><td><code>getDomain()</code></td><td>返回为此 Cookie 设置的域名。</td></tr><tr><td><code> int</code></td><td><code>getMaxAge()</code></td><td>返回 Cookie 的最长期限（以秒为单位），默认情况下 -1，指示 Cookie 将一直保留到浏览器关闭。</td></tr><tr><td><code> String</code></td><td><code>getName()</code></td><td>返回Cookie的名称。</td></tr><tr><td><code> String</code></td><td><code>getPath()</code></td><td>返回浏览器将此 Cookie 返回到的服务器上的路径。</td></tr><tr><td><code> boolean</code></td><td><code>getSecure()</code></td><td>如果浏览器仅通过安全协议发送 Cookie，或者浏览器可以使用任何协议发送 Cookie，则返回。<code>true``false</code></td></tr><tr><td><code> String</code></td><td><code>getValue()</code></td><td>返回Cookie的值。</td></tr><tr><td><code> int</code></td><td><code>getVersion()</code></td><td>返回此 Cookie 遵循的协议版本。</td></tr><tr><td><code> void</code></td><td><code>setComment(String)</code></td><td>指定描述 Cookie 用途的注释。</td></tr><tr><td><code> void</code></td><td><code>etDomain(String)</code></td><td>指定应在其中显示此 Cookie 的域。</td></tr><tr><td><code> void</code></td><td><code>setMaxAge(int)</code></td><td>设置 Cookie 的最长期限（以秒为单位）。</td></tr><tr><td><code> void</code></td><td><code>setPath(String)</code></td><td>指定客户端应将 Cookie 返回到的 Cookie 的路径。</td></tr><tr><td><code> void</code></td><td><code>setSecure(boolean)</code></td><td>向浏览器指示是否应仅使用安全协议（如 HTTPS 或 SSL）发送 Cookie。</td></tr><tr><td><code> void</code></td><td><code>setValue(String)</code></td><td>在创建 Cookie 后，为该 Cookie 分配一个新值。</td></tr><tr><td><code> void</code></td><td><code>setVersion(int)</code></td><td>设置此 Cookie 遵循的 Cookie 协议的版本。</td></tr></tbody></table><p>例如</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Cookie</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">PrintWriter</span> out <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token operator">!=</span>cookies<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Cookie</span> c <span class="token operator">:</span>cookies<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>c<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置cookie的有效时间,单位秒</span>    resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="使用Session"><a href="#使用Session" class="headerlink" title="使用Session"></a>使用Session</h3><table><thead><tr><th align="left">修饰符和类型</th><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>Object</code></td><td align="left"><code>getAttribute(String name)</code></td><td align="left">返回在此会话中绑定了指定名称的对象，或者如果没有对象绑定到该名称下。<code>null</code></td></tr><tr><td align="left"><code>Enumeration&lt;java.lang.String&gt;</code></td><td align="left"><code>getAttributeNames()</code></td><td align="left">返回包含绑定到此会话的所有对象的名称的对象。</td></tr><tr><td align="left"><code>long</code></td><td align="left"><code>getCreationTime()</code></td><td align="left">返回创建此会话的时间，自 1970 年 1 月 1 日午夜（格林尼治标准时间）以来以毫秒为单位。</td></tr><tr><td align="left"><code>String</code></td><td align="left"><code>getId()</code></td><td align="left">返回一个字符串，其中包含分配给此会话的唯一标识符。</td></tr><tr><td align="left"><code>long</code></td><td align="left"><code>getLastAccessedTime()</code></td><td align="left">返回客户端上次发送与此会话关联的请求的时间，即自 1970 年 1 月 1 日午夜 GMT 以来的毫秒数，并按容器收到请求的时间进行标记。</td></tr><tr><td align="left"><code>int</code></td><td align="left"><code>getMaxInactiveInterval()</code></td><td align="left">返回 servlet 容器在客户端访问之间保持此会话打开状态的最大时间间隔（以秒为单位）。</td></tr><tr><td align="left"><code>ServletContext</code></td><td align="left"><code>getServletContext()</code></td><td align="left">返回此会话所属的 ServletContext。</td></tr><tr><td align="left"><code>void</code></td><td align="left"><code>invalidate()</code></td><td align="left">使此会话失效，然后取消绑定到它的任何对象。</td></tr><tr><td align="left"><code>boolean</code></td><td align="left"><code>isNew()</code></td><td align="left">如果客户端还不知道会话，或者客户端选择不加入会话，则返回true&#96;</td></tr><tr><td align="left"><code>void</code></td><td align="left"><code>removeAttribute(java.lang.String name)</code></td><td align="left">从此会话中删除绑定了具有指定名称的对象。</td></tr><tr><td align="left"><code>void</code></td><td align="left"><code>setAttribute(java.lang.String name, java.lang.Object value)</code></td><td align="left">使用指定的名称将对象绑定到此会话。</td></tr><tr><td align="left"><code>void</code></td><td align="left"><code>setMaxInactiveInterval(int interval)</code></td><td align="left">指定在 servlet 容器使此会话失效之前的客户端请求之间的时间（以秒为单位）。</td></tr></tbody></table><p>例如</p><p>登录：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginSession</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html; charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PrintWriter</span> out <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session<span class="token punctuation">.</span><span class="token function">setMaxInactiveInterval</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token operator">==</span>name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            name<span class="token operator">=</span><span class="token string">"游客"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Welcome,"</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>登出：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/logout"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogoutSession</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html; charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"no login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"成功登出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h2 id="Servlet进阶API"><a href="#Servlet进阶API" class="headerlink" title="Servlet进阶API"></a>Servlet进阶API</h2><h3 id="使用ServletConfig"><a href="#使用ServletConfig" class="headerlink" title="使用ServletConfig"></a>使用ServletConfig</h3><p>在Servlet中直接使用</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"ServletConfigTest"</span><span class="token punctuation">,</span> urlPatterns <span class="token operator">=</span> <span class="token string">"/conf"</span><span class="token punctuation">,</span>        initParams <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//设置param1和param2的值</span>            <span class="token annotation punctuation">@WebInitParam</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"param1"</span><span class="token punctuation">,</span>value<span class="token operator">=</span><span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@WebInitParam</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"param2"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"value2"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletConfigTest</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span>  <span class="token class-name">String</span> param1<span class="token punctuation">,</span>param2<span class="token punctuation">,</span>param3<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment">//通过重写init方法获取param1和param2</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">&#123;</span>        <span class="token comment">//getServletConfig()返回ServletConfig对象</span>        param1 <span class="token operator">=</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"param1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        param2 <span class="token operator">=</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"param2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"param1:"</span><span class="token operator">+</span>param1<span class="token operator">+</span><span class="token string">"param2:"</span><span class="token operator">+</span>param2<span class="token operator">+</span><span class="token string">"param3"</span><span class="token operator">+</span>param3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出测试</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>在web.xml中配置</p><div class="code-wrapper"><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--名称与Servlet中设置的名称一样,才可以覆盖设置--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>ServletConfigTest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>test.ServletConfigTest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--name一样，覆盖在@WebServlet中的设置--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>param1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>value1_1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--不设置param2的值，保留原本的值    &lt;init-param>        &lt;param-name>param2&lt;/param-name>        &lt;param-value>value2_2&lt;/param-value>    &lt;/init-param>--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--name不一样，新设置param3的值为value3_3--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>param3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>value3_3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--覆盖url--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>ServletConfigTest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/configs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span></code></pre></div><h3 id="使用ServletContext"><a href="#使用ServletContext" class="headerlink" title="使用ServletContext"></a>使用ServletContext</h3><p>使用<code>getRequestDispatcher</code></p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/firstServlet"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><p>使用<code>getResourcePaths</code></p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">PrintWriter</span> out <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//必须以/开头，获取某个目录下的文件，如果是目录以/开头</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourcePaths</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>path<span class="token operator">-></span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><p>使用<code>getResourceAsStream</code></p><p><a href="#getResourceAsStream">示例</a></p><p>getResourceAsStream会返回一个InputStream实例。</p><h2 id="应用程序事件，监听器"><a href="#应用程序事件，监听器" class="headerlink" title="应用程序事件，监听器"></a>应用程序事件，监听器</h2><h3 id="ServletContext事件、监听器"><a href="#ServletContext事件、监听器" class="headerlink" title="ServletContext事件、监听器"></a>ServletContext事件、监听器</h3><h4 id="ServletContextListener"><a href="#ServletContextListener" class="headerlink" title="ServletContextListener"></a>ServletContextListener</h4><p>ServletContext接口有两个默认方法</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ServletContextListener</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>EventListener</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span>ServletContextEvent</span> sce<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* compiled code */</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span>ServletContextEvent</span> sce<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* compiled code */</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>Web应用程序在初始化后获即将结束销毁前会调用实现了该接口的类的这两个方法，所以可以在<code>contextInitialized</code>中初始化资源,在 <code>contextDestroyed</code>中释放资源。</p><p>如:</p><p>实现ServletContextListener接口</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebListener</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletContextTest</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextListener</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> sce<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//取得ServletContext</span>        <span class="token class-name">ServletContext</span> context <span class="token operator">=</span> sce<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//取得web.xml设置的初始参数</span>        <span class="token class-name">String</span> avatar <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"avatar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置ServletContext属性</span>        context<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"avatar"</span><span class="token punctuation">,</span>avatar<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> sce<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>web.xml配置</p><div class="code-wrapper"><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--Serlet3.0前需要配置此项&lt;listener>    &lt;listener-class>test.Listener.ServletContextTest&lt;/listener-class>&lt;/listener>--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>avatar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>avatar_value<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span></code></pre></div><p>测试类：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/avatar"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListenerTest</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> avatar <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"avatar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"avatar:"</span><span class="token operator">+</span>avatar<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h4 id="ServletContextAttributeListener"><a href="#ServletContextAttributeListener" class="headerlink" title="ServletContextAttributeListener"></a>ServletContextAttributeListener</h4><p>ServletContextAttributeListener接口有三个默认方法</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ServletContextAttributeListener</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>EventListener</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">attributeAdded</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span>ServletContextAttributeEvent</span> scae<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* compiled code */</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">attributeRemoved</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span>ServletContextAttributeEvent</span> scae<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* compiled code */</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">attributeReplaced</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span>ServletContextAttributeEvent</span> scae<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* compiled code */</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletContextAttributeListenerTest</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextAttributeListener</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attributeAdded</span><span class="token punctuation">(</span><span class="token class-name">ServletContextAttributeEvent</span> scae<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attributeReplaced</span><span class="token punctuation">(</span><span class="token class-name">ServletContextAttributeEvent</span> scae<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"replaced"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attributeRemoved</span><span class="token punctuation">(</span><span class="token class-name">ServletContextAttributeEvent</span> scae<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"removed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>在ServletContext中添加属性,移除属性,替换属性时,想对应的方法被调用，如执行前面ServletContextListener的示例是，控制台就会输出add,因为添加了属性。</p><h3 id="HttpSession事件、监听器"><a href="#HttpSession事件、监听器" class="headerlink" title="HttpSession事件、监听器"></a>HttpSession事件、监听器</h3><p> 未完待续…</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Servlet</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git 学习</title>
    <link href="/2022/02/10/tool/Git%20%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/02/10/tool/Git%20%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="jsandcss/player/APlayer.min.css"><script src="/jsandcss/player/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/jsandcss/player/Meting.min.js"></script><h2 id="Git仓库得创建-提交"><a href="#Git仓库得创建-提交" class="headerlink" title="Git仓库得创建,提交"></a>Git仓库得创建,提交</h2><h3 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h3><div class="code-wrapper"><pre class="language-git" data-language="git"><code class="language-git">git init</code></pre></div><h3 id="添加文件道暂存区"><a href="#添加文件道暂存区" class="headerlink" title="添加文件道暂存区"></a>添加文件道暂存区</h3><p>将<font color="red">工作区</font>的内容提交到<font color="red">暂存区</font></p><div class="code-wrapper"><pre class="language-git" data-language="git"><code class="language-git">git add filename</code></pre></div><h3 id="提交到本地仓库"><a href="#提交到本地仓库" class="headerlink" title="提交到本地仓库"></a>提交到本地仓库</h3><p>将<font color="red">暂存区</font>的内容提交到<font color="red">本地仓库</font></p><div class="code-wrapper"><pre class="language-git" data-language="git"><code class="language-git">git commit -m <span class="token string">"information"</span></code></pre></div><h2 id="版本间得时光穿梭"><a href="#版本间得时光穿梭" class="headerlink" title="版本间得时光穿梭"></a>版本间得时光穿梭</h2><h3 id="查看当前仓库状态"><a href="#查看当前仓库状态" class="headerlink" title="查看当前仓库状态"></a>查看当前仓库状态</h3><div class="code-wrapper"><pre class="language-git" data-language="git"><code class="language-git">git status</code></pre></div><h3 id="查看具体的修改"><a href="#查看具体的修改" class="headerlink" title="查看具体的修改"></a>查看具体的修改</h3><div class="code-wrapper"><pre class="language-git" data-language="git"><code class="language-git">git diff</code></pre></div><h3 id="版本退回"><a href="#版本退回" class="headerlink" title="版本退回"></a>版本退回</h3><h4 id="查看提交日志"><a href="#查看提交日志" class="headerlink" title="查看提交日志"></a>查看提交日志</h4><div class="code-wrapper"><pre class="language-git" data-language="git"><code class="language-git">git log</code></pre></div><h4 id="回退版本"><a href="#回退版本" class="headerlink" title="回退版本"></a>回退版本</h4><p><font color="blue">一个^表示向历史退一个版本，多个^表示退回多个版本</font></p><div class="code-wrapper"><pre class="language-git" data-language="git"><code class="language-git">git reset --hard Head^</code></pre></div><p>当退回版本过多,如100</p><div class="code-wrapper"><pre class="language-git" data-language="git"><code class="language-git">git reset --hard~100</code></pre></div><p>或者通过 <code>commit id</code>  ”时光穿梭“ 到某个版本</p><p><font color="green">Tips：<code>commit id</code> 不必写全，写一部分即可</font></p><div class="code-wrapper"><pre class="language-git" data-language="git"><code class="language-git">git reset --hard 12345</code></pre></div><p>可以通过以下命令查看命令记录从而得到<code>commit id</code></p><div class="code-wrapper"><pre class="language-git" data-language="git"><code class="language-git">git reflog</code></pre></div><h4 id="丢弃工作区修改"><a href="#丢弃工作区修改" class="headerlink" title="丢弃工作区修改"></a>丢弃工作区修改</h4><p>一种是<code>filename</code>自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p><p>一种是<code>filename</code>已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p><div class="code-wrapper"><pre class="language-git" data-language="git"><code class="language-git">git checkout -- filename</code></pre></div><p>当当前工作区有文件被删除时，可以使用以下命令删除仓库中的相应文件</p><div class="code-wrapper"><pre class="language-git" data-language="git"><code class="language-git">rm filename</code></pre></div><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><h3 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h3><h4 id="创建SSH-Key"><a href="#创建SSH-Key" class="headerlink" title="创建SSH Key"></a>创建SSH Key</h4><p>tips:一路回车就好</p><div class="code-wrapper"><pre class="language-git" data-language="git"><code class="language-git">ssh-keygen -t rsa -C <span class="token string">"email@example.com"</span></code></pre></div><p>Windows用户就可以在<code>C:\Users\用户名\.ssh</code>目录下找到相关的<code>id_rsa.pub</code> (公匙),和<code>id_rsa</code> (私匙)。</p><h4 id="在远程仓库添加公匙"><a href="#在远程仓库添加公匙" class="headerlink" title="在远程仓库添加公匙"></a>在远程仓库添加公匙</h4><p>登录GitHub、Gitee等，在相关repo中添加公匙即可</p><h4 id="关联远程仓库"><a href="#关联远程仓库" class="headerlink" title="关联远程仓库"></a>关联远程仓库</h4><p>link 可以是远程仓库的https(如：<code>https://gitee.com/User/test.git</code>)，也可以是SSH(如: <code>git@gitee.com:User/test.git</code>)</p><div class="code-wrapper"><pre class="language-git" data-language="git"><code class="language-git">git remote add origin link</code></pre></div><h3 id="推送内容"><a href="#推送内容" class="headerlink" title="推送内容"></a>推送内容</h3><p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p><div class="code-wrapper"><pre class="language-git" data-language="git"><code class="language-git">git push -u origin master</code></pre></div><p>添加后，远程库的名字就是<code>origin</code>，这是Git默认的叫法，也可以改成别的，但是<code>origin</code>这个名字一看就知道是远程库。</p><p>把本地库的内容推送到远程，用<code>git push</code>命令，实际上是把当前分支<code>master</code>推送到远程。</p><p>从现在起，只要本地作了提交，就可以通过命令：</p><div class="code-wrapper"><pre class="language-git" data-language="git"><code class="language-git">git push origin master</code></pre></div><h3 id="删除远程库"><a href="#删除远程库" class="headerlink" title="删除远程库"></a>删除远程库</h3><p>如果推送错误，可以通过以下方式删除远程库</p><p>1.查看远程库信息</p><div class="code-wrapper"><pre class="language-git" data-language="git"><code class="language-git">git remote -v</code></pre></div><p>2.根据名字删除本地仓库与远程仓库的绑定关系</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">git remote rm origin</code></pre></div><h3 id="仓库克隆"><a href="#仓库克隆" class="headerlink" title="仓库克隆"></a>仓库克隆</h3><div class="code-wrapper"><pre class="language-git" data-language="git"><code class="language-git">git clone link</code></pre></div><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><h4 id="方法一-："><a href="#方法一-：" class="headerlink" title="方法一 ："></a>方法一 ：</h4><p>创建并切换到dev分支</p><div class="code-wrapper"><pre class="language-git" data-language="git"><code class="language-git">git branch dev #创建分支git checkout dev #切换分支</code></pre></div><p>也可以只使用这条命令</p><div class="code-wrapper"><pre class="language-git" data-language="git"><code class="language-git">git checkout -b dev</code></pre></div><h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><p>还可以使用<code>switch</code>创建切换分支，更科学</p><p>创建并切换到dev分支：</p><div class="code-wrapper"><pre class="language-git" data-language="git"><code class="language-git">git switch -c dev</code></pre></div><p>切换到分支dev：</p><div class="code-wrapper"><pre class="language-git" data-language="git"><code class="language-git">git switch dev</code></pre></div><p>查看所有分支</p><div class="code-wrapper"><pre class="language-git" data-language="git"><code class="language-git">git branch</code></pre></div><h3 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h3><p>将指定分支合并到当前分支</p><div class="code-wrapper"><pre class="language-git" data-language="git"><code class="language-git">git merge dev</code></pre></div><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><div class="code-wrapper"><pre class="language-git" data-language="git"><code class="language-git">git branch -d dev</code></pre></div><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p>当两个分支提交了不同的内容到仓库，然后进行合并时，就会出现：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">Automatic merge failed; fix conflicts and then commit the result.自动合并失败;修复冲突，然后提交结果。</code></pre></div><p>此时打开冲突的文件，手动修改后重新提交，就能合并成功。</p><p>使用以下命令就可以查看分支合并情况。</p><div class="code-wrapper"><pre class="language-git" data-language="git"><code class="language-git">git log --graph --pretty=oneline --abbrev-commit</code></pre></div><h3 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h3><p><code>fast forward</code>合看不出来曾经做过合并,在分支合并时git在可行的情况下会使用<code>fast forward</code> ,删除分支后，会丢掉分支信息。可以强制禁用<code>fast forward</code> ，git就会在merge时生成新的commit，这样分支历史上就可以看出。</p><div class="code-wrapper"><pre class="language-git" data-language="git"><code class="language-git">git merge --no-ff -m <span class="token string">"merge with no-ff"</span> dev</code></pre></div><p><code>未完待续</code></p><p><font color="green">学习自：<a href="https://www.liaoxuefeng.com/wiki/896043488029600">https://www.liaoxuefeng.com/wiki/896043488029600</a></font></p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 基本数据类型</title>
    <link href="/2022/02/09/python/Python%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/02/09/python/Python%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="jsandcss/player/APlayer.min.css"><script src="/jsandcss/player/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/jsandcss/player/Meting.min.js"></script><h2 id="基本数据类型-python3"><a href="#基本数据类型-python3" class="headerlink" title="基本数据类型(python3)"></a>基本数据类型(python3)</h2><h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span></code></pre></div><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>元素不可变</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">'hello world'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span></code></pre></div><h3 id="List-列表"><a href="#List-列表" class="headerlink" title="List 列表"></a>List 列表</h3><p>元素可变</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token builtin">list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span></code></pre></div><h3 id="Tuple-元组"><a href="#Tuple-元组" class="headerlink" title="Tuple 元组"></a>Tuple 元组</h3><p>可以有可变元素(如List),但元素不可变</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token builtin">tuple</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'abcd'</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">)</span></code></pre></div><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">set1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span>sets <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#sets = &#123;&#125;不可创建空set,&#123;&#125;用于创建Dictionary，set()用于创建空set</span>sets<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'s'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sets<span class="token punctuation">)</span>x <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">&#125;</span>y <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>x <span class="token operator">-</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>y <span class="token operator">-</span> x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x <span class="token operator">|</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x <span class="token operator">&amp;</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x <span class="token operator">^</span> y<span class="token punctuation">)</span></code></pre></div><h3 id="Dictionary"><a href="#Dictionary" class="headerlink" title="Dictionary"></a>Dictionary</h3><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">dicts <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>dicts<span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>dicts<span class="token punctuation">[</span><span class="token string">'two'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>dicts<span class="token punctuation">)</span>dicts <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'three'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'four'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>dicts<span class="token punctuation">)</span>dicts <span class="token operator">=</span> <span class="token punctuation">&#123;</span>x<span class="token punctuation">:</span>x<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>dicts<span class="token punctuation">)</span></code></pre></div><h2 id="内置函数-python3"><a href="#内置函数-python3" class="headerlink" title="内置函数(python3)"></a>内置函数(python3)</h2><h3 id="abs-x-取绝对值"><a href="#abs-x-取绝对值" class="headerlink" title="abs(x)取绝对值"></a>abs(x)取绝对值</h3><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token builtin">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre></div><h3 id="divmod-x-y-得x÷y的商和余数"><a href="#divmod-x-y-得x÷y的商和余数" class="headerlink" title="divmod(x, y)得x÷y的商和余数"></a>divmod(x, y)得x÷y的商和余数</h3><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token builtin">divmod</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">#结果位(2,2) 很显然是tuple类型</span></code></pre></div><h3 id="complex-创建复数"><a href="#complex-创建复数" class="headerlink" title="complex() 创建复数"></a>complex() 创建复数</h3><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> <span class="token builtin">complex</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>y <span class="token operator">=</span> <span class="token builtin">complex</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span></code></pre></div><h3 id="str-转换为适合人阅读的形式"><a href="#str-转换为适合人阅读的形式" class="headerlink" title="str() 转换为适合人阅读的形式"></a>str() 转换为适合人阅读的形式</h3><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">test <span class="token operator">=</span> <span class="token number">1</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span></code></pre></div><h3 id="repr"><a href="#repr" class="headerlink" title="repr()"></a>repr()</h3><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token builtin">dict</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'one'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 输出都一样</span></code></pre></div><h3 id="eval-来执行一个字符串表达式，并返回表达式的值。"><a href="#eval-来执行一个字符串表达式，并返回表达式的值。" class="headerlink" title="eval() 来执行一个字符串表达式，并返回表达式的值。"></a>eval() 来执行一个字符串表达式，并返回表达式的值。</h3><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> <span class="token number">1234</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">'print(x*2)'</span><span class="token punctuation">)</span></code></pre></div><h3 id="tuple-可迭代系列转换为元组"><a href="#tuple-可迭代系列转换为元组" class="headerlink" title="tuple() 可迭代系列转换为元组"></a>tuple() 可迭代系列转换为元组</h3><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">lists <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span>tuple1 <span class="token operator">=</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span>lists<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>tuple1<span class="token punctuation">)</span><span class="token punctuation">,</span> tuple1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token string">'www'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 只保留key</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'one'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></div><h3 id="zip"><a href="#zip" class="headerlink" title="zip()"></a>zip()</h3><h3 id="list"><a href="#list" class="headerlink" title="list()"></a>list()</h3><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'1234'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">,</span> list1<span class="token punctuation">)</span>list2 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">'1234'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span></code></pre></div><h3 id="set"><a href="#set" class="headerlink" title="set()"></a>set()</h3><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">'1433223'</span>sets <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sets<span class="token punctuation">)</span></code></pre></div><h3 id="dict"><a href="#dict" class="headerlink" title="dict()"></a>dict()</h3><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token string">'1'</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token string">'2'</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></div><h3 id="frozenset"><a href="#frozenset" class="headerlink" title="frozenset()"></a>frozenset()</h3><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token builtin">frozenset</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>b <span class="token operator">=</span> <span class="token builtin">frozenset</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span></code></pre></div><h3 id="chr"><a href="#chr" class="headerlink" title="chr()"></a>chr()</h3><p>用一个范围在 range（256）内的（就是0～255）整数作参数，返回一个对应的字符。</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></div><h3 id="ord"><a href="#ord" class="headerlink" title="ord()"></a>ord()</h3><p>是 chr() 函数（对于8位的ASCII字符串）或 unichr() 函数（对于Unicode对象）的配对函数，它以一个字符（长度为1的字符串）作为参数，返回对应的 ASCII 数值，或者 Unicode 数值，如果所给的 Unicode 字符超出了你的 Python 定义范围，则会引发一个 TypeError 的异常。</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'好'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></div><h3 id="hex"><a href="#hex" class="headerlink" title="hex()"></a>hex()</h3><p>将10进制转换为16进制</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></div><h3 id="oct"><a href="#oct" class="headerlink" title="oct()"></a>oct()</h3><p>将10进制转换为8进制</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">oct</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></div><h3 id="all"><a href="#all" class="headerlink" title="all()"></a>all()</h3><p>判断给定的可迭代参数 iterable 中的所有元素是否都为 TRUE</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">w <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'123'</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">]</span>z <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">all</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">all</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">all</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">all</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token comment"># True True False False</span></code></pre></div><h3 id="input-str-读取标准输入"><a href="#input-str-读取标准输入" class="headerlink" title="input(str) 读取标准输入"></a>input(str) 读取标准输入</h3><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">tmp <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入三个数'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token comment">#abc均为String</span></code></pre></div><h3 id="open-打开一个文件"><a href="#open-打开一个文件" class="headerlink" title="open()打开一个文件"></a>open()打开一个文件</h3><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token builtin">open</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token punctuation">,</span> mode<span class="token punctuation">[</span><span class="token punctuation">,</span> buffering<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>、</code></pre></div><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'D:/test.txt'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></div><p><code>name</code>：路径</p><p><code>mode</code>：模式</p><table><thead><tr><th align="center">模式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">t</td><td align="left">文本模式 (默认)。</td></tr><tr><td align="center">x</td><td align="left">写模式，新建一个文件，如果该文件已存在则会报错。</td></tr><tr><td align="center">b</td><td align="left">二进制模式。</td></tr><tr><td align="center">+</td><td align="left">打开一个文件进行更新(可读可写)。</td></tr><tr><td align="center">U</td><td align="left">通用换行模式（不推荐）。</td></tr><tr><td align="center">r</td><td align="left">以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td align="center">rb</td><td align="left">以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。</td></tr><tr><td align="center">r+</td><td align="left">打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td align="center">rb+</td><td align="left">以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。</td></tr><tr><td align="center">w</td><td align="left">打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td align="center">wb</td><td align="left">以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td align="center">w+</td><td align="left">打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td align="center">wb+</td><td align="left">以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td align="center">a</td><td align="left">打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td align="center">ab</td><td align="left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td align="center">a+</td><td align="left">打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td align="center">ab+</td><td align="left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table><p><code>buffering</code>：寄存区的缓冲大小，果 buffering 的值被设为 0，就不会有寄存。如果 buffering 的值取 1，访问文件时会寄存行。如果将 buffering 的值设为大于 1 的整数，表明了这就是的寄存区的缓冲大小。如果取负值，寄存区的缓冲大小则为系统默认。</p><h2 id="运算符与注释"><a href="#运算符与注释" class="headerlink" title="运算符与注释"></a>运算符与注释</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>多行注释：</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''这是多行注释'''</span></code></pre></div><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""这是多行注释"""</span></code></pre></div><p>单行注释</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#这是单行注释</span></code></pre></div><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h4><table><thead><tr><th align="center">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">+</td><td align="left">加 - 两个对象相加</td></tr><tr><td align="center">-</td><td align="left">减 - 得到负数或是一个数减去另一个数</td></tr><tr><td align="center">*</td><td align="left">乘 - 两个数相乘或是返回一个被重复若干次的字符串</td></tr><tr><td align="center">&#x2F;</td><td align="left">除 - x 除以 y</td></tr><tr><td align="center">%</td><td align="left">取模 - 返回除法的余数</td></tr><tr><td align="center">**</td><td align="left">幂 - 返回x的y次幂</td></tr><tr><td align="center">&#x2F;&#x2F;</td><td align="left">取整除 - 向下取接近商的整数</td></tr></tbody></table><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><table><thead><tr><th align="center">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">&#x3D;&#x3D;</td><td align="left">等于 - 比较对象是否相等</td></tr><tr><td align="center">!&#x3D;</td><td align="left">不等于 - 比较两个对象是否不相等</td></tr><tr><td align="center">&gt;</td><td align="left">大于 - 返回x是否大于y</td></tr><tr><td align="center">&lt;</td><td align="left">小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。注意，这些变量名的大写。</td></tr><tr><td align="center">&gt;&#x3D;</td><td align="left">大于等于 - 返回x是否大于等于y。</td></tr><tr><td align="center">&lt;&#x3D;</td><td align="left">小于等于 - 返回x是否小于等于y。</td></tr></tbody></table><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><table><thead><tr><th align="center">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">&#x3D;</td><td align="left">简单的赋值运算符</td></tr><tr><td align="center">+&#x3D;</td><td align="left">加法赋值运算符</td></tr><tr><td align="center">-&#x3D;</td><td align="left">减法赋值运算符</td></tr><tr><td align="center">*&#x3D;</td><td align="left">乘法赋值运算符</td></tr><tr><td align="center">&#x2F;&#x3D;</td><td align="left">除法赋值运算符</td></tr><tr><td align="center">%&#x3D;</td><td align="left">取模赋值运算符</td></tr><tr><td align="center">**&#x3D;</td><td align="left">幂赋值运算符</td></tr><tr><td align="center">&#x2F;&#x2F;&#x3D;</td><td align="left">取整除赋值运算符</td></tr><tr><td align="center">:&#x3D;</td><td align="left">海象运算符，可在表达式内部为变量赋值。<strong>Python3.8 版本新增运算符</strong>。</td></tr></tbody></table><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><table><thead><tr><th align="center">&amp;</th><th>按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</th></tr></thead><tbody><tr><td align="center">|</td><td>按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。</td></tr><tr><td align="center">^</td><td>按位异或运算符：当两对应的二进位相异时，结果为1</td></tr><tr><td align="center">~</td><td>按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。**~x** 类似于 <strong>-x-1</strong></td></tr><tr><td align="center">&lt;&lt;</td><td>左移动运算符：运算数的各二进位全部左移若干位，由”&lt;&lt;”右边的数指定移动的位数，高位丢弃，低位补0。</td></tr><tr><td align="center">&gt;&gt;</td><td>右移动运算符：把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，”&gt;&gt;”右边的数指定移动的位数</td></tr></tbody></table><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><table><thead><tr><th align="center">运算符</th><th align="left">逻辑表达式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">and</td><td align="left">x and y</td><td align="left">布尔”与” - 如果 x 为 False，x and y 返回 x 的值，否则返回 y 的计算值。</td></tr><tr><td align="center">or</td><td align="left">x or y</td><td align="left">布尔”或” - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。</td></tr><tr><td align="center">not</td><td align="left">not x</td><td align="left">布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td></tr></tbody></table><h4 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h4><table><thead><tr><th align="center">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">in</td><td align="left">如果在指定的序列中找到值返回 True，否则返回 False。</td></tr><tr><td align="center">not in</td><td align="left">如果在指定的序列中没有找到值返回 True，否则返回 False。</td></tr></tbody></table><h4 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h4><table><thead><tr><th align="center">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">is</td><td align="left">is 是判断两个标识符是不是引用自一个对象</td></tr><tr><td align="center">is not</td><td align="left">is not 是判断两个标识符是不是引用自不同对象</td></tr></tbody></table><p>运算符优先级</p><table><thead><tr><th align="center">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">**</td><td align="left">指数 (最高优先级)</td></tr><tr><td align="center">~ + -</td><td align="left">按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td></tr><tr><td align="center">* &#x2F; % &#x2F;&#x2F;</td><td align="left">乘，除，求余数和取整除</td></tr><tr><td align="center">+ -</td><td align="left">加法减法</td></tr><tr><td align="center">&gt;&gt; &lt;&lt;</td><td align="left">右移，左移运算符</td></tr><tr><td align="center">&amp;</td><td align="left">位 ‘AND’</td></tr><tr><td align="center">^ |</td><td align="left">位运算符</td></tr><tr><td align="center">&lt;&#x3D; &lt; &gt; &gt;&#x3D;</td><td align="left">比较运算符</td></tr><tr><td align="center">&#x3D;&#x3D; !&#x3D;</td><td align="left">等于运算符</td></tr><tr><td align="center">&#x3D; %&#x3D; &#x2F;&#x3D; &#x2F;&#x2F;&#x3D; -&#x3D; +&#x3D; *&#x3D; **&#x3D;</td><td align="left">赋值运算符</td></tr><tr><td align="center">is is not</td><td align="left">身份运算符</td></tr><tr><td align="center">in not in</td><td align="left">成员运算符</td></tr><tr><td align="center">not and or</td><td align="left">逻辑运算符</td></tr></tbody></table><h2 id="推导式"><a href="#推导式" class="headerlink" title="推导式"></a>推导式</h2><p>Python 支持各种数据结构的推导式：</p><ul><li>列表(list)推导式</li><li>字典(dict)推导式</li><li>集合(set)推导式</li><li>元组(tuple)推导式</li></ul><h3 id="列表推导式格式"><a href="#列表推导式格式" class="headerlink" title="列表推导式格式"></a>列表推导式格式</h3><p>格式：</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span>表达式 <span class="token keyword">for</span> 变量 <span class="token keyword">in</span> 列表<span class="token punctuation">]</span> 或<span class="token punctuation">[</span>表达式 <span class="token keyword">for</span> 变量 <span class="token keyword">in</span> 列表 <span class="token keyword">if</span> 条件<span class="token punctuation">]</span></code></pre></div><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">lists <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token keyword">if</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token comment"># lists = [0, 2, 4, 6, 8]</span></code></pre></div><h3 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h3><p>格式</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span>key<span class="token punctuation">:</span> value <span class="token keyword">for</span> 变量 <span class="token keyword">in</span> 集合<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>key<span class="token punctuation">:</span> value <span class="token keyword">for</span> 变量 <span class="token keyword">in</span> 集合 <span class="token keyword">if</span> 条件<span class="token punctuation">&#125;</span></code></pre></div><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">lists <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'python'</span><span class="token punctuation">,</span> <span class="token string">'java'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'c++'</span><span class="token punctuation">]</span>dicts <span class="token operator">=</span> <span class="token punctuation">&#123;</span>key<span class="token punctuation">:</span> key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> key <span class="token keyword">in</span> lists<span class="token punctuation">&#125;</span><span class="token comment"># dicts = &#123;'python': 'p', 'java': 'j', 'c': 'c', 'c++': 'c'&#125;</span></code></pre></div><h3 id="集合推导式"><a href="#集合推导式" class="headerlink" title="集合推导式"></a>集合推导式</h3><p>格式</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span>表达式 <span class="token keyword">for</span> 变量 <span class="token keyword">in</span> 序列<span class="token punctuation">&#125;</span>或<span class="token punctuation">&#123;</span>表达式 <span class="token keyword">for</span> 变量 <span class="token keyword">in</span> 序列 <span class="token keyword">if</span> 条件<span class="token punctuation">&#125;</span></code></pre></div><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">sets <span class="token operator">=</span> <span class="token punctuation">&#123;</span>x<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment"># sets = &#123;9, 25&#125;</span></code></pre></div><h3 id="元组推导式"><a href="#元组推导式" class="headerlink" title="元组推导式"></a>元组推导式</h3><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span>表达式 <span class="token keyword">for</span> 变量 <span class="token keyword">in</span> 序列<span class="token punctuation">)</span>或<span class="token punctuation">(</span>表达式 <span class="token keyword">for</span> 变量 <span class="token keyword">in</span> 序列 <span class="token keyword">if</span> 条件<span class="token punctuation">)</span></code></pre></div><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">]</span>tuples <span class="token operator">=</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">*</span><span class="token number">2</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># (x*2 for x in str)返回生成对象</span><span class="token comment"># tuples = ('oneone', 'twotwo', 'threethree')</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库高级对象的使用</title>
    <link href="/2021/12/06/SQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%AB%98%E7%BA%A7%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/12/06/SQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%AB%98%E7%BA%A7%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="jsandcss/player/APlayer.min.css"><script src="/jsandcss/player/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/jsandcss/player/Meting.min.js"></script><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>视图（View）是数据库的一种对象， 它是数据库系统提供给用户以多种角度观察数据库中数据的一种重要机制。<br>是一个虚拟的表，该表提供了对一个或多个表中一系列列的访问。它是作为对象存储在数据库中的查询、</p><h3 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h3><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> view_name <span class="token punctuation">[</span> <span class="token punctuation">(</span> <span class="token keyword">column</span> <span class="token punctuation">[</span> <span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>n <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token keyword">WITH</span> <span class="token operator">&lt;</span> view_attribute <span class="token operator">></span> <span class="token punctuation">[</span> <span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>n <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token keyword">AS</span>select_statement <span class="token punctuation">[</span> <span class="token keyword">WITH</span> <span class="token keyword">CHECK</span> <span class="token keyword">OPTION</span> <span class="token punctuation">]</span><span class="token operator">&lt;</span> view_attribute <span class="token operator">></span> ::<span class="token operator">=</span>  &#123; ENCRYPTION <span class="token operator">|</span> SCHEMABINDING <span class="token operator">|</span> VIEW_METADATA &#125; </code></pre></div><p>如</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">view</span> six_class<span class="token keyword">as</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 学生 <span class="token keyword">where</span> 班级<span class="token operator">=</span><span class="token string">'6'</span></code></pre></div><p>相关查询语句</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> six_class</code></pre></div><p>视图只是一个查询，并不保存数据，所以对视图数据的修改其实是对基表数据的修改 </p><p>前面的例子可以对视图插入一个班级位7的学生，插入后视图中并没有这个学生，但是数据已经插入到了基表中，在创建视图时可以加一个“WITH CHECK OPTION”选项，这样对视图修改时，必须满足视图创建时SELECT语句中的WHERE条件。 </p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">view</span> six_class<span class="token keyword">as</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 学生 <span class="token keyword">where</span> 班级<span class="token operator">=</span><span class="token string">'6'</span> <span class="token keyword">with</span> <span class="token keyword">check</span> <span class="token keyword">option</span></code></pre></div><p><font color="red">注意</font></p><p>在创建或使用视图时，应该注意以下情况：</p><div class="code-wrapper"><pre class="language-markdown" data-language="markdown"><code class="language-markdown">只能在当前数据库中创建视图，在视图中最多只能引用1024 列。如果视图引用的基本表被删除，则当使用该视图时将返回一条错误信息。如果视图中某一列是函数、数学表达式、常量或来自多个表的列名相同，则必须为列定义名字。视图名必须遵循标识符命名规则，绝不能与其所基于的表的名字相同。不能在视图说明语句中使用SELECT INTO语句；SELECT语句里不能使用ORDER BY 、COMPUTE、COMPUTE BY子句，不能使用临时表。当通过视图查询数据时，SQL SERVER不仅要检查视图引用的表是否存在，是否有效，而且还要验证对数据的修改是否违反了数据的完整性约束。 </code></pre></div><p>视图的有点</p><div class="code-wrapper"><pre class="language-markdown" data-language="markdown"><code class="language-markdown">1.视点集中用户只关心它感兴趣的某些特定数据和他们所负责的特定任务。2．简化操作视图大大简化了用户对数据的操作。因为在定义视图时，若视图本身就是一个复杂查询的结果集，这样在每一次执行相同的查询时，不必重新写这些复杂的查询语句，只要一条简单的查询视图语句即可。可见视图向用户隐藏了表与表之间的复杂的连接操作。3．定制数据视图能够实现让不同的用户以不同的方式看到不同或相同的数据集。因此，当有许多不同水平的用户共用同一数据库时，这显得极为重要。4．合并分割数据在有些情况下，由于表中数据量太大，故在表的设计时常将表进行水平分割或垂直分割，但表的结构的变化却对应用程序产生不良的影响。5．提高了数据的安全性视图可以作为一种安全机制。通过视图用户只能查看和修改他们所能看到的数据。其它数据库或表既不可见也不可以访问。视图所引用表的访问权限与视图权限的设置互不影响。 </code></pre></div><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><div class="code-wrapper"><pre class="language-markdown" data-language="markdown"><code class="language-markdown">SQL Server实现客户机/服务器技术。很多客户机向中心服务器发送请求。服务器在收到查询请求之后，分析其有无语法错误，并处理请求。存储过程是一个预编译的对象。这意味着过程是预先编译好的，并且供不同的应用程序执行。因此，根本不需要再花时间对过程重新进行语法分析和编译，其执行速度很快。SQL Server  不仅提供了用户自定义存储过程的功能，而且也提供了许多可作为工具使用的系统存储过程。 存储过程（Stored Procedure）是一组为了完成特定功能的SQL语句集，经编译后存储在数据库中。用户通过指定存储过程的名字并给出参数（如果该存储过程带有参数）来执行它。 系统提供的存储过程用户自定义存储过程。</code></pre></div><p>有点</p><div class="code-wrapper"><pre class="language-markdown" data-language="markdown"><code class="language-markdown">1．存储过程允许标准组件式编程存储过程在被创建以后可以在程序中被多次调用，而不必重新编写该存储过程的SQL 语句。对存储过程进行修改，不影响应用程序源代码。2．存储过程能够实现较快的执行速度存储过程是预编译的，在首次运行一个存储过程时，查询优化器对其进行分析、优化，并给出最终被存在系统表中的执行计划。3．存储过程能够减少网络流量网络中传送的只是该调用语句，降低网络负载。4．存储过程可被作为一种安全机制来充分利用系统管理员通过对执行某一存储过程的权限进行限制，从而能够实现对相应的数据访问权限的限制，避免非授权用户对数据的访问，保证数据的安全。</code></pre></div><p>创建存储过程时，需要确定存储过程的三个组成部分；<br>所有的输入参数以及传给调用者的输出参数。<br>被执行的针对数据库的操作语句，包括调用其它存储过程的语句；<br>返回给调用者的状态值，以指明调用是成功还是失败。 </p><h3 id="1-普通的存储过程"><a href="#1-普通的存储过程" class="headerlink" title="1.普通的存储过程"></a>1.普通的存储过程</h3><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">PROC</span> <span class="token punctuation">[</span> EDURE <span class="token punctuation">]</span> procedure_name <span class="token punctuation">[</span> &#123; <span class="token variable">@parameter</span> data_type &#125;<span class="token punctuation">[</span> <span class="token keyword">VARYING</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token operator">=</span> <span class="token keyword">default</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> OUTPUT <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>n <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token keyword">WITH</span> &#123; RECOMPILE <span class="token operator">|</span> ENCRYPTION <span class="token operator">|</span> RECOMPILE <span class="token punctuation">,</span> ENCRYPTION &#125; <span class="token punctuation">]</span><span class="token keyword">AS</span> sql_statement <span class="token punctuation">[</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>n <span class="token punctuation">]</span></code></pre></div><p>如：</p><p>若表student有<code>id_</code>,<code>name_</code>,<code>class_</code>,<code>age_</code>等字段</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> prcStudent1 <span class="token comment">--procedure 可以使用缩写proc</span><span class="token keyword">as</span><span class="token keyword">begin</span><span class="token keyword">select</span> id_<span class="token punctuation">,</span>name_<span class="token punctuation">,</span>class_<span class="token punctuation">,</span>age_ <span class="token keyword">from</span> Student<span class="token keyword">end</span></code></pre></div><p>调用方法</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">exec</span> prcStudent1</code></pre></div><h3 id="2-带参数-amp-返回值的存储过程"><a href="#2-带参数-amp-返回值的存储过程" class="headerlink" title="2.带参数&amp;返回值的存储过程"></a>2.带参数&amp;返回值的存储过程</h3><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> proStudent2<span class="token variable">@id</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">@name_</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> output<span class="token keyword">as</span><span class="token keyword">begin</span><span class="token keyword">if</span> <span class="token keyword">exists</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> Student <span class="token keyword">where</span> id_<span class="token operator">=</span><span class="token variable">@id</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">select</span> <span class="token variable">@name_</span><span class="token operator">=</span>name_ <span class="token keyword">from</span> Student <span class="token keyword">where</span> id_<span class="token operator">=</span><span class="token variable">@id</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token keyword">end</span><span class="token keyword">else</span><span class="token keyword">print</span> <span class="token string">'no this students'</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">end</span></code></pre></div><p>调用</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">declare</span> <span class="token variable">@returnValue</span> <span class="token keyword">int</span><span class="token keyword">declare</span> <span class="token variable">@name_</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">@id</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">set</span> <span class="token variable">@id</span><span class="token operator">=</span><span class="token string">'1'</span><span class="token keyword">exec</span> <span class="token variable">@returnValue</span><span class="token operator">=</span>proStudent2 <span class="token variable">@id</span><span class="token punctuation">,</span><span class="token variable">@name_</span> output<span class="token keyword">select</span> <span class="token variable">@returnValue</span><span class="token punctuation">,</span><span class="token variable">@name_</span></code></pre></div><h3 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h3><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">proc</span> <span class="token identifier"><span class="token punctuation">`</span>存储名<span class="token punctuation">`</span></span></code></pre></div><h2 id="用户自定以函数"><a href="#用户自定以函数" class="headerlink" title="用户自定以函数"></a>用户自定以函数</h2><p>除了使用系统提供的函数外，用户还可以根据需要自定义函数。用户自定义函数（User Defined Functions）是SQL Server数据库对象，是SQL Server 的一项重要功能。<br>用户自定义函数不能用于执行一系列改变数据库状态的操作，但它可以像系统函数一样在查询或存储过程等的程序段中使用，也可以像存储过程一样通过EXECUTE 命令来执行。 </p><p>如</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">function</span> isSomebody<span class="token punctuation">(</span><span class="token variable">@id</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">as</span><span class="token keyword">begin</span><span class="token keyword">if</span> <span class="token keyword">exists</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> id_<span class="token operator">=</span><span class="token variable">@id</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">return</span> <span class="token string">'Yes'</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token keyword">return</span> <span class="token string">'No '</span><span class="token punctuation">;</span><span class="token comment">--此处No后面加个空格，否则返回Yes时只返回Ye，或者采用下面的写法</span><span class="token keyword">end</span></code></pre></div><p>或者</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">function</span> isSomebody<span class="token punctuation">(</span><span class="token variable">@id</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">as</span><span class="token keyword">begin</span><span class="token keyword">declare</span> <span class="token variable">@re</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token keyword">exists</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> id_<span class="token operator">=</span><span class="token variable">@id</span><span class="token punctuation">)</span><span class="token keyword">set</span> <span class="token variable">@re</span><span class="token operator">=</span><span class="token string">'Yes'</span><span class="token keyword">else</span><span class="token keyword">set</span> <span class="token variable">@re</span><span class="token operator">=</span><span class="token string">'No'</span><span class="token keyword">return</span> <span class="token variable">@re</span><span class="token keyword">end</span></code></pre></div><p>调用</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> dbo<span class="token punctuation">.</span>isSomebody<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span></code></pre></div><p>删除</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">function</span> dbo<span class="token punctuation">.</span>isSomebody</code></pre></div><h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><h3 id="触发器概念"><a href="#触发器概念" class="headerlink" title="触发器概念"></a>触发器概念</h3><p>触发器是一种特殊类型的存储过程，它不同于存储过程。<br>触发器主要是通过事件进行触发而被执行的，而存储过程可以通过存储过程名字而被直接调用。<br>当对某一表进行诸如UPDATE、INSERT、DELETE 这些操作时，SQL Server 会自动执行触发器所定义的SQL 语句，从而确保对数据的处理必须符合由这些SQL 语句所定义的规则。 </p><h3 id="触发器功能"><a href="#触发器功能" class="headerlink" title="触发器功能"></a>触发器功能</h3><p>强化约束：触发器能够实现比CHECK 语句更为复杂的约束。<br>跟踪变化：触发器可以侦测数据库内的操作，从而不允许数据库中未经许可的指定更新和变化。<br>级联运行：触发器可以侦测数据库内的操作，并自动地级联影响整个数据库的各项内容。例如，某个表上的触发器中包含有对另外一个表的数据操作（如删除，更新，插入）而该操作又导致该表上触发器被触发。<br>存储过程的调用：为了响应数据库更新触，发器可以调用一个或多个存储过程，甚至可以通过外部过程的调用而在DBMS（ 数据库管理系统）本身之外进行操作。</p><h3 id="触发器种类"><a href="#触发器种类" class="headerlink" title="触发器种类"></a>触发器种类</h3><p> <code>DDL触发器</code>：服务器或数据库中发生数据定义事件时自动执行<br><code>DML触发器</code>：数据库中发生数据操作事件时自动执行<br><code>登陆触发器</code>：与SQL Server 实例建立用户会话时自动执行 </p><p>DML触发器有以下几类</p><div class="code-wrapper"><pre class="language-markdown" data-language="markdown"><code class="language-markdown">AFTER 触发器只有执行某一操作（INSERT、UPDATE、DELETE）之后，触发器才被触发，且只能在表上定义 INSTEAD OF 触发器并不执行其所定义的操作（INSERT、 UPDATE、 DELETE），而仅是执行触发器本身。 </code></pre></div><h3 id="魔术表（插入表和删除表）"><a href="#魔术表（插入表和删除表）" class="headerlink" title="魔术表（插入表和删除表）"></a>魔术表（插入表和删除表）</h3><p>插入表（inserted）和删除表（deleted）被称为魔术表<br>这两个表是逻辑表，并且这两个表是由系统管理的，存储在内存中，不是存储在数据库中，因此不允许用户直接对其修改。<br>这两个表的结构总是与被该触发器作用的表有相同的表结构。这两个表是动态驻留在内存中的，当触发器工作完成，这两个表也被删除。这两个表主要保存因用户操作而被影响到的原数据值或新数据值。另外，这两个表是只读的，即用户不能向这两个表写入内容，但可以引用表中的数据。例如可用如下语句查看DELETED 表中的信息：</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> deleted</code></pre></div><h4 id="inserted"><a href="#inserted" class="headerlink" title="inserted"></a>inserted</h4><p>对一个定义了插入类型触发器的表来讲，一旦对该表执行了插入操作，那么对向该表插入的所有行来说，都有一个相应的副本存放到插入表中。即插入表就是用来存储向原表插入的内容。</p><h4 id="deleted"><a href="#deleted" class="headerlink" title="deleted"></a>deleted</h4><p>对一个定义了删除类型触发器的表来讲，一旦对该表执行了删除操作，则将所有的删除行存放至删除表中。</p><h3 id="创建触发器"><a href="#创建触发器" class="headerlink" title="创建触发器"></a>创建触发器</h3><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> trigger_name <span class="token keyword">ON</span> &#123; <span class="token keyword">table</span> <span class="token operator">|</span> <span class="token keyword">view</span> &#125; <span class="token punctuation">[</span> <span class="token keyword">WITH</span> ENCRYPTION <span class="token punctuation">]</span> &#123;    &#123; &#123; <span class="token keyword">FOR</span> <span class="token operator">|</span> <span class="token keyword">AFTER</span> <span class="token operator">|</span> INSTEAD <span class="token keyword">OF</span> &#125; &#123; <span class="token punctuation">[</span> <span class="token keyword">INSERT</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token punctuation">,</span> <span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token keyword">UPDATE</span> <span class="token punctuation">]</span> &#125;        <span class="token punctuation">[</span> <span class="token operator">NOT</span> <span class="token keyword">FOR</span> <span class="token keyword">REPLICATION</span> <span class="token punctuation">]</span>        <span class="token keyword">AS</span>        <span class="token punctuation">[</span> &#123; <span class="token keyword">IF</span> <span class="token keyword">UPDATE</span> <span class="token punctuation">(</span> <span class="token keyword">column</span> <span class="token punctuation">)</span>            <span class="token punctuation">[</span> &#123; <span class="token operator">AND</span> <span class="token operator">|</span> <span class="token operator">OR</span> &#125; <span class="token keyword">UPDATE</span> <span class="token punctuation">(</span> <span class="token keyword">column</span> <span class="token punctuation">)</span> <span class="token punctuation">]</span>   <span class="token punctuation">[</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>n <span class="token punctuation">]</span>        <span class="token operator">|</span> <span class="token keyword">IF</span> <span class="token punctuation">(</span> COLUMNS_UPDATED <span class="token punctuation">(</span> <span class="token punctuation">)</span> &#123; bitwise_operator &#125; updated_bitmask <span class="token punctuation">)</span>                &#123; comparison_operator &#125; column_bitmask <span class="token punctuation">[</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>n <span class="token punctuation">]</span>        &#125; <span class="token punctuation">]</span>         sql_statement <span class="token punctuation">[</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>n <span class="token punctuation">]</span>     &#125; &#125;</code></pre></div><p>创建一个简单的触发器在插入时显示插入的信息</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">trigger</span> triInsert<span class="token keyword">on</span> student<span class="token keyword">for</span> <span class="token keyword">insert</span><span class="token keyword">as</span><span class="token keyword">begin</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> inserted<span class="token punctuation">;</span><span class="token keyword">end</span></code></pre></div><p>创建一个在插入数据时同步将数据插入到表结构相同的其他表中的触发器</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">trigger</span> triInsert2<span class="token keyword">on</span> student<span class="token keyword">for</span> <span class="token keyword">insert</span><span class="token keyword">as</span><span class="token keyword">begin</span><span class="token keyword">declare</span> <span class="token variable">@id</span> <span class="token keyword">as</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">@name</span> <span class="token keyword">as</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">@class</span> <span class="token keyword">as</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">@age</span> <span class="token keyword">as</span> <span class="token keyword">int</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token variable">@id</span><span class="token operator">=</span>id_<span class="token punctuation">,</span><span class="token variable">@name</span><span class="token operator">=</span>name_<span class="token punctuation">,</span><span class="token variable">@class</span><span class="token operator">=</span>class_<span class="token punctuation">,</span><span class="token variable">@age</span><span class="token operator">=</span>age_ <span class="token keyword">from</span> inserted<span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student2 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token variable">@id</span><span class="token punctuation">,</span><span class="token variable">@name</span><span class="token punctuation">,</span><span class="token variable">@class</span><span class="token punctuation">,</span><span class="token variable">@age</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span></code></pre></div><p>当执行以下语句时</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'21'</span><span class="token punctuation">,</span><span class="token string">'shi'</span><span class="token punctuation">,</span><span class="token string">'en'</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">)</span></code></pre></div><p>触发器会自动香student2插入一条一样的数据，<font color="red">但是</font></p><p>如果一次插入多行(INSERT SELECT语句)，由于触发器只被触发执行一次，因此只对插入的第一行有效</p><p>如：</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'21'</span><span class="token punctuation">,</span><span class="token string">'shi'</span><span class="token punctuation">,</span><span class="token string">'en'</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'22'</span><span class="token punctuation">,</span><span class="token string">'shi'</span><span class="token punctuation">,</span><span class="token string">'en'</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><p>只会插入一条数据</p><p>可以改为以下形式：</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">trigger</span> triInsert3<span class="token keyword">on</span> student<span class="token keyword">for</span> <span class="token keyword">insert</span><span class="token keyword">as</span><span class="token keyword">begin</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student2 <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> inserted<span class="token punctuation">;</span><span class="token keyword">end</span></code></pre></div><p>如果更新另一张表，可以使用外连接，此处略</p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p><code>未完待续</code></p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法模板-迪杰斯特拉算法(单源最短路径)</title>
    <link href="/2021/11/12/c++/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF_%E8%BF%AA%E6%9D%B0%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95(%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84)/"/>
    <url>/2021/11/12/c++/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF_%E8%BF%AA%E6%9D%B0%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95(%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84)/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="jsandcss/player/APlayer.min.css"><script src="/jsandcss/player/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/jsandcss/player/Meting.min.js"></script><p>当求图（图信息已经储存在一个二维数组map中）中一个点(start)到其中一个点的最短路径，先使用一个以为数组保存所有点到该点(start)的路径长度，初始化所有点到该点(start)的路径为无穷，然后将该点(start)拿出，放入一个集合A中。更新其他所有点到该点的距离（通过map更新）。在从没有放入A数组的点中选择到该点(start)最近的一个点(a)放入A中，通过选择的这个点(a)更新所有点到该点的距离，如此反复。</p><p><code>tips:c++11标准</code></p><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF</span> <span class="token expression"><span class="token number">0x7f7f7f7f</span></span></span><span class="token keyword">bool</span> dj<span class="token punctuation">[</span><span class="token number">22000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//用来储存第i个节点是否已经并入，即是否在A中</span><span class="token keyword">int</span> len<span class="token punctuation">[</span><span class="token number">22000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//保存每个点到start的最短路径</span><span class="token keyword">int</span> map<span class="token punctuation">[</span><span class="token number">22000</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">22000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//储存所有节点之间的关系</span><span class="token comment">//这里时模板</span><span class="token keyword">void</span> <span class="token function">Djs</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//start为开始点，n为有多少节点，从0开始计数</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>len<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> INF<span class="token punctuation">;</span><span class="token comment">//将每个点到start的距离设置为一个极大数</span><span class="token punctuation">&#125;</span>len<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//自己到自己距离为0</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> minl <span class="token operator">=</span> INF<span class="token punctuation">,</span> which <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//找到所有没有并入A的点中到start最短的点，第一次时会找到start,其到自身距离为0.</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> len<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> minl<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>which <span class="token operator">=</span> i<span class="token punctuation">;</span>minl <span class="token operator">=</span> len<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>which <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//如果剩余全部是无法到达的点，就break</span>dj<span class="token punctuation">[</span>which<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//标记该点已经并入A</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>len<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>len<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> len<span class="token punctuation">[</span>which<span class="token punctuation">]</span> <span class="token operator">+</span> map<span class="token punctuation">[</span>which<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新所有不在A中点到该点的距离。</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//题目，有n个点，m条路径，求start到end的最短路径</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">;</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> m <span class="token operator">>></span> start <span class="token operator">>></span> end<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> INF<span class="token punctuation">;</span><span class="token comment">//全部初始化为'无穷'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> tmp<span class="token punctuation">;</span>cin <span class="token operator">>></span> x <span class="token operator">>></span> y<span class="token punctuation">;</span>cin <span class="token operator">>></span> tmp<span class="token punctuation">;</span>map<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> map<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token comment">//无向图，有向图只有map[x][y]=tmp;</span><span class="token punctuation">&#125;</span><span class="token function">Djs</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> len<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>时间复杂度O(n<sup>2</sup>)</p><p>不适合负边情况。</p>]]></content>
    
    
    <categories>
      
      <category>Blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cpp</tag>
      
      <tag>算法</tag>
      
      <tag>模板</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识TCP/UDP</title>
    <link href="/2021/10/19/%E5%BC%80%E5%8F%91/%E5%90%8E%E7%AB%AF/TcpAndUdp/"/>
    <url>/2021/10/19/%E5%BC%80%E5%8F%91/%E5%90%8E%E7%AB%AF/TcpAndUdp/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="jsandcss/player/APlayer.min.css"><script src="/jsandcss/player/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/jsandcss/player/Meting.min.js"></script><p><font color="red">tips:源码参摘自狂神说Java </font></p><h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><h4 id="发送端"><a href="#发送端" class="headerlink" title="发送端"></a>发送端</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">test<span class="token punctuation">.</span>cn</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">OutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetAddress</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Socket</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TcpDemo1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">OutputStream</span> os<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">Socket</span> scoket<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span>             <span class="token class-name">InetAddress</span> serverIp <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">9999</span><span class="token punctuation">;</span>            <span class="token comment">//创建流套接字并将其连接到指定IP地址处的指定端口号。</span>           scoket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span>serverIp<span class="token punctuation">,</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//将流交给os输出流管理</span>            os <span class="token operator">=</span> scoket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//向流输出字节数据</span>            os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"这就离谱"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>os<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>scoket<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    scoket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h4 id="接收端"><a href="#接收端" class="headerlink" title="接收端"></a>接收端</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">test<span class="token punctuation">.</span>cn</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">ServerSocket</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Socket</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TcpServer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ServerSocket</span> serverSocket<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">Socket</span> socket<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">InputStream</span> is<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ByteArrayOutputStream</span> baos<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>            serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//侦听对此套接字的连接并接受它。 该方法将阻塞，直到建立连接。创建一个新的Socket s</span>                socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//流托管</span>                is <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//System.out.println(is.toString());</span>                baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token comment">//从流中读取数据道buffer,返回读取的长度</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//从buffer中读取len的数据道输出流中</span>                    baos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">//将缓冲区的内容转换为字符串解码字节。</span>                <span class="token class-name">String</span> s <span class="token operator">=</span> baos<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"exit"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>baos<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    baos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>is<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>socket<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><h4 id="发送端-1"><a href="#发送端-1" class="headerlink" title="发送端"></a>发送端</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">test<span class="token punctuation">.</span>cn</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStreamReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">DatagramPacket</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">DatagramSocket</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetSocketAddress</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UdpDemo1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span>  <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token comment">//构造一个数据报套接字并将其绑定到本地主机上的指定端口。 套接字将绑定到wildcard地址，该地址是内核选择的IP地址。</span>        <span class="token class-name">DatagramSocket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建使用默认大小的输入缓冲区的缓冲字符输入流。</span>        <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//v创建一个使用默认字符集的InputStreamReader。</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//读一行文字</span>            <span class="token class-name">String</span> data <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> datas <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//构造一个数据报包，用于将长度为 length且偏移量为offset的数据包发送到指定主机上的指定端口号</span>            <span class="token class-name">DatagramPacket</span> packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>datas<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> datas<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//发送数据包。</span>            socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"bye"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h4 id="接收端-1"><a href="#接收端-1" class="headerlink" title="接收端"></a>接收端</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">test<span class="token punctuation">.</span>cn</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">DatagramPacket</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">DatagramSocket</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UdpServer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DatagramSocket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//准备接收</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token class-name">DatagramPacket</span> packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>container<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            socket<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//断开</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> packet<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回数据缓冲区。 收到的数据或要发送的数据从缓冲区中的offset开始，运行时间为length 。</span>            <span class="token class-name">String</span> receiveData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> packet<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>receiveData<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>receiveData<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"bye"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL基础语法</title>
    <link href="/2021/10/14/SQL/SQL%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <url>/2021/10/14/SQL/SQL%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="jsandcss/player/APlayer.min.css"><script src="/jsandcss/player/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/jsandcss/player/Meting.min.js"></script><h2 id="关于SQL语言"><a href="#关于SQL语言" class="headerlink" title="关于SQL语言"></a>关于SQL语言</h2><blockquote><p>基于SQL Service</p></blockquote><span id="more"></span><p>SQL（Structured Query Language，结构化查询语言）是用户操作关系数据库的通用语言。SQL已经成为关系数据库的标准语言，现在所有的关系数据库管理系统都支持SQL。  </p><p>SQL常用语句</p><table border="1"><thead><tr><th><span>语句</span></th><th><span>功能</span></th><th><span>语句</span></th><th><span>功能</span></th></tr></thead><tbody><tr><td colspan="2"><span>数据操作</span></td><td><span>ALTER DOMAIN</span></td><td><span>改变域定义</span></td></tr><tr><td><span>SELECT</span></td><td><span>从数据库表中检索数据</span></td><td><span>DROP DOMAIN</span></td><td><span>从数据库中删除域</span></td></tr><tr><td><span>INSERT</span></td><td><span>向数据库表中添加数据行</span></td><td colspan="2"><span>数据控制</span></td></tr><tr><td><span>DELETE</span></td><td><span>从数据库表中删除数据行</span></td><td><span>GRANT</span></td><td><span>授予用户访问权限</span></td></tr><tr><td><span>UPDATE</span></td><td><span>更新数据库表中的数据</span></td><td><span>DENY</span></td><td><span>拒绝用户访问</span></td></tr><tr><td colspan="2"><span>数据定义</span></td><td><span>REVOKE</span></td><td><span>解除用户访问权限</span></td></tr><tr><td><span>CREATE TABLE</span></td><td><span>创建一个数据库表</span></td><td colspan="2"><span>事务控制</span></td></tr><tr><td><span>DROP TABLE</span></td><td><span>从数据库中删除表</span></td><td><span>COMMIT</span></td><td><span>结束当前事务</span></td></tr><tr><td><span>ALTER TABLE</span></td><td><span>修改数据库表结构</span></td><td><span>ROLLBACK</span></td><td><span>回滚当前事务</span></td></tr><tr><td><span>CREATE VIEW</span></td><td><span>创建一个视图</span></td><td><span>SAVE TRANSACTION</span></td><td><span>在事务内设置保存点</span></td></tr><tr><td><span>DROP VIEW</span></td><td><span>从数据库中删除视图</span></td><td colspan="2"><span>程序化SQL</span></td></tr><tr><td><span>CREATE INDEX</span></td><td><span>为数据库表创建一个索引</span></td><td><span>DECLARE</span></td><td><span>设定游标</span></td></tr><tr><td><span>DROP INDEX</span></td><td><span>从数据库中删除索引</span></td><td><span>OPEN</span></td><td><span>打开一个游标</span></td></tr><tr><td><span>CREATE PROCEDURE</span></td><td><span>创建一个存储过程</span></td><td><span>FETCH</span></td><td><span>检索一行查询结果</span></td></tr><tr><td><span>DROP PROCEDURE</span></td><td><span>从数据库中删除存储过程</span></td><td><span>CLOSE</span></td><td><span>关闭游标</span></td></tr><tr><td><span>CREATE TRIGGER</span></td><td><span>创建一个触发器</span></td><td><span>PREPARE</span></td><td><span>为动态执行准备SQL语句</span></td></tr><tr><td><span>DROP TRIGGER</span></td><td><span>从数据库中删除触发器</span></td><td><span>EXECUTE</span></td><td><span>动态执行SQL语句</span></td></tr><tr><td><span>CREATE DOMAIN</span></td><td><span>创建一个数据值域</span></td><td colspan="2"><span></span></td></tr></tbody></table><h2 id="常用的SQL语句"><a href="#常用的SQL语句" class="headerlink" title="常用的SQL语句"></a>常用的SQL语句</h2><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表名</code></pre></div><p>嘿嘿，就这一句就够了，学那么多干嘛？？？</p><h2 id="SQL变量"><a href="#SQL变量" class="headerlink" title="SQL变量"></a>SQL变量</h2><p><code>局部变量声明</code></p><p>必须以@开头且必须用declare声明</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">declare</span> <span class="token variable">@test</span> <span class="token keyword">int</span><span class="token keyword">declare</span> <span class="token variable">@id</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></code></pre></div><p>使用select或set命令设定变量的值</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token variable">@test</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">set</span> <span class="token variable">@test</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">select</span> <span class="token variable">@id</span> <span class="token operator">=</span> <span class="token string">'123456'</span></code></pre></div><p><code>全局变量</code> l<strong>全局变量是</strong>SQL Server系统内部使用的变量，其作用范围并不局限于某一程序，而是任何程序均可随时调用全局变量通常存储一些SQL Server的配置设定值和效能统计数据。用户可在程序中用全局变量来测试系统的设定值或Transact-SQL命令执行后的状态值。</p><p><code>全局变量声明</code>无，**全局变量不是由用户的程序定义的，它们是在服务器级定义的。只能使用预先说明及定义的变局变量。引用全局变量时，必须以@@开头。局部变量的名称不能与全局变量的名称相同、否则会在应用中出错。例如：SELECT @@ServerName显示服务器名。</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">@<span class="token variable">@ServerName</span><span class="token comment">--服务器名</span></code></pre></div><h2 id="Transact-SQL"><a href="#Transact-SQL" class="headerlink" title="Transact-SQL"></a>Transact-SQL</h2><h3 id="运算符（Operator"><a href="#运算符（Operator" class="headerlink" title="运算符（Operator)"></a>运算符（Operator)</h3><div class="code-wrapper"><pre class="language-none"><code class="language-none">算术运算符 ：+ －× &#x2F; ％比较运算符 ：&gt; &lt; !&#x3D; &lt;&#x3D; 逻辑运算符： AND、OR、NOT 位运算符 ：&amp;  |  ~  ^连接运算符：&lt;expression1&gt;+&lt;expression2&gt;  </code></pre></div><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><table><thead><tr><th><strong>通配符</strong></th><th><strong>功  能</strong></th><th><strong>实   例</strong></th></tr></thead><tbody><tr><td><strong>%</strong></td><td><strong>代表零个或多个字符</strong></td><td>‘ab%’,’ab’后可以接任意字符串</td></tr><tr><td><strong>_(<strong><strong>下划线</strong></strong>)</strong></td><td><strong>代表一个字符</strong></td><td>‘a_b’,’a’和’b’之间可以有一个字符</td></tr><tr><td><strong>[  ]</strong></td><td><strong>表示在某一范围的字符</strong></td><td>[0-5],0到5之间的任意字符</td></tr><tr><td><strong>[^]</strong></td><td><strong>表示不在某一范围的字符</strong></td><td>[^0-5],不在0到5之间的任意字符</td></tr></tbody></table><h3 id="SQL-Server-内置函数"><a href="#SQL-Server-内置函数" class="headerlink" title="SQL Server 内置函数"></a>SQL Server 内置函数</h3><h4 id="1字符串函数"><a href="#1字符串函数" class="headerlink" title="1字符串函数"></a>1字符串函数</h4><table><thead><tr><th>函数名</th><th></th><th>函数名</th><th></th></tr></thead><tbody><tr><td>ASCII</td><td>(字符表达式)</td><td>SELECT ASCII(“ABC”)</td><td>返回65，最左边的字符 “A”的ASCII码。</td></tr><tr><td>CHAR</td><td>(整数表达式)</td><td>SELECT CHAR(65)</td><td>返回 “A”，同该ASCII码值等价的字符。</td></tr><tr><td>CHARINDEX</td><td>(模式, 表达式)</td><td>SELECT CHARINDEX (“E”,”HELLO”)</td><td>返回2，指定模式在表达式中的起始位置。</td></tr><tr><td>DIFFERENCE</td><td>(字符表达式1, 字符表达式2)</td><td>SELECT DIFFERENCE (“HELLO”, ”hell”)</td><td>返回4， DIFFERENCE 函数比较两个字符串并估计出它们的相似程度，返回一个从0 到 4的值。4表示非常相似。</td></tr><tr><td>LEFT</td><td>(字符表达式, 整数表达式)</td><td>SELECT LEFT     (“RICHARD”,4)</td><td>返回 “RICH”, 它是字符串的一部分，从左边开始计算，其长度等同于整数表达式中指定的长度。</td></tr><tr><td>LEN</td><td>(字符表达式)</td><td>SELECT LEN(“RICHARD”)</td><td>返回7, 字符表达式中字符的个数。</td></tr><tr><td>LOWER</td><td>(字符表达式)</td><td>SELECT LOWER(“RICHARD”)</td><td>返回 “richard”, 将字符表达式转换成小写。</td></tr><tr><td>LTRIM</td><td>(字符表达式)</td><td>SELECT LTRIM(“  RICHARD”)</td><td>返回没有先导空格的 “RICHARD”。它从字符表达式中移去了先导空格。</td></tr><tr><td>PATINDEX</td><td>(‘%模式%’，表达式)</td><td>Select PATINDEX(“%BOX%”,”ACTIONBOX”)</td><td>返回 7, 指定了模式在指定表达式中第一个出现的位置。如果模式在表达式中不存在，则返回0。</td></tr><tr><td>REVERSE</td><td>(字符表达式)</td><td>SELECT REVERSE(“ACTION”)</td><td>返回 “NOITCA”，反转之后的字符表达式。</td></tr><tr><td>RIGHT</td><td>(字符表达式, 整数表达式)</td><td>SELECT RIGHT(“RICHARD”,4)</td><td>返回“HARD”， 它是字符串的一部分，从右边开始计算，其长度等同于整数表达式中指定的长度。</td></tr><tr><td>RTRIM</td><td>(字符表达式)</td><td>SELECT RTRIM(“RICHARD  “)</td><td>返回 “RICHARD” ，从字符表达式中移去了尾部空格。</td></tr><tr><td>SPACE</td><td>(整数表达式)</td><td>SELECT “RICHARD”+SPACE(2)+”HILL”</td><td>返回 “RICHARD HILL”, 在第一和第二个词之间插入了两个空格。</td></tr><tr><td>STR</td><td>(浮点表达式, [长度,    [小数位]])</td><td>SELECT STR(123.45,6,2)</td><td>返回 “123.45”，它将数值数据转换成字符数据，长度是总的长度，包括小数点、符号、数字、空格。小数位是指小数点右边的位数。</td></tr><tr><td>UPPER</td><td>(字符表达式)</td><td>UPPER(“Richard”)</td><td>返回 “RICHARD”, 它把字符表达式转换成大写。</td></tr><tr><td>STUFF</td><td>(字符表达式1, 起始,长度, 字符表达式2)</td><td>SELECT STUFF(‘Weather’, 2,2 , ‘i’)</td><td>返回 “Wither“。从字符表达式1的“起始”开始删除“长度”个字符，然后在“起始”位置往字符表达式1里插入字符表达式2。</td></tr><tr><td>SUBSTRING</td><td>(表达式,起始,长度)</td><td>SELECT SUBSTRING(‘Weather’, 2,2)</td><td>返回 “ea”, 它是字符表达式的一部分</td></tr></tbody></table><h4 id="2日期函数"><a href="#2日期函数" class="headerlink" title="2日期函数"></a>2日期函数</h4><table><thead><tr><th>函数名</th><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>DATEADD</td><td>(日期元素, 数字, 日期)</td><td>向指定日期添加“数字”个“日期元素”。</td></tr><tr><td>DATEDIFF</td><td>(日期元素, 日期1, 日期2)</td><td>返回两个日期之间的“日期元素”的个数。</td></tr><tr><td>DATENAME</td><td>(日期元素, 日期)</td><td>以ASCII 码的形式返回指定日期的“日期元素”。(例如, October)</td></tr><tr><td>DATEPART</td><td>(日期元素, 日期)</td><td>以整数的形式返回指定日期的“日期元素”。</td></tr><tr><td>DAY</td><td>(日期)</td><td>返回一个整数，表示指定日期的“天”部分</td></tr><tr><td>MONTH</td><td>(日期)</td><td>返回一个整数，表示指定日期的“月”部分</td></tr><tr><td>YEAR</td><td>(日期)</td><td>返回一个整数，表示指定日期的“年”部分</td></tr><tr><td>GETDATE</td><td>( )</td><td>返回当前的日期和时间。</td></tr><tr><td>GETUTCDATE</td><td>( )</td><td>返回当前的UTC（国际时也称格林尼治标准时间）日期和时间。</td></tr><tr><td>year</td><td>yy</td><td>1753-9999</td></tr><tr><td>quarter</td><td>qq</td><td>1月4日</td></tr><tr><td>month</td><td>mm</td><td>1月12日</td></tr><tr><td>day of year</td><td>dy</td><td>1-366</td></tr><tr><td>day</td><td>dd</td><td>1月31日</td></tr><tr><td>week</td><td>wk</td><td>0-51</td></tr><tr><td>weekday</td><td>dw</td><td>1-7(1 is Sunday)</td></tr><tr><td>hour</td><td>hh</td><td>(0-23)</td></tr><tr><td>minute</td><td>mi</td><td>(0-59)</td></tr><tr><td>second</td><td>ss</td><td>0-59</td></tr><tr><td>millisecond</td><td>ms</td><td>0-999</td></tr></tbody></table><h4 id="3数学函数"><a href="#3数学函数" class="headerlink" title="3数学函数"></a>3数学函数</h4><table><thead><tr><th>函数名</th><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>ABS</td><td>(数值表达式)</td><td>绝对值。</td></tr><tr><td>ACOS, ASIN, ATAN, ATN2</td><td>(浮点表达式)</td><td>用弧度表示的角，其余弦、正弦、正切是一个浮点数。</td></tr><tr><td>COS, SIN, COT, TAN</td><td>(浮点表达式)</td><td>角(用弧度表示)的正弦、余弦、正切值。</td></tr><tr><td>DEGREES</td><td>(数值表达式)</td><td>大于或等于指定值的最小整数。</td></tr><tr><td>EXP</td><td>(浮点表达式)</td><td>指定值的幂值。</td></tr><tr><td>FLOOR</td><td>(数值表达式)</td><td>小于或等于指定值的最大整数。</td></tr><tr><td>LOG</td><td>(浮点表达式)</td><td>指定值的自然对数。</td></tr><tr><td>LOG10</td><td>(浮点表达式)</td><td>指定值的以10为底的对数。</td></tr><tr><td>PI</td><td>()</td><td>3.141592653589793的常数值。</td></tr><tr><td>POWER</td><td>(数值表达式, y)</td><td>数值表达式的y次幂。</td></tr><tr><td>RADIANS</td><td>(数值表达式)</td><td>将角度转换成弧度。</td></tr><tr><td>RAND</td><td>([seed])</td><td>0和 1之间的随机浮点数。</td></tr><tr><td>ROUND</td><td>(数值表达式, 长度)</td><td>根据以整数形式指定的长度对数值表达式进行四舍五入。ROUND(123.456,2)&#x3D;123.12,  ROUND(123.456,0)&#x3D;123, ROUND(123.456,-1)&#x3D;123</td></tr><tr><td>SIGN</td><td>(数值表达式)</td><td>正数、负数或零。</td></tr><tr><td>SQRT</td><td>(浮点表达式)</td><td>指定值的平方根。</td></tr></tbody></table><h4 id="4类型转换"><a href="#4类型转换" class="headerlink" title="4类型转换"></a>4类型转换</h4><p>l有两个函数（CAST()&#x2F;CONVERT）可以将数据从一个数据类型转换成另一种数据类型。他们的不同在于，CAST( )具有ANSI SQL-92的兼容性，而CONVERT( )则功能更为强大。</p><p>lCAST( )的语法如下：</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">CAST<span class="token punctuation">(</span> variable_or_column <span class="token keyword">AS</span> datatype<span class="token punctuation">)</span><span class="token comment">--如</span><span class="token keyword">DECLARE</span> <span class="token variable">@Cast</span> <span class="token keyword">int</span><span class="token keyword">SET</span> <span class="token variable">@Cast</span> <span class="token operator">=</span> <span class="token number">1234</span><span class="token keyword">SELECT</span> CAST<span class="token punctuation">(</span><span class="token variable">@Cast</span> <span class="token keyword">AS</span> <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></div><p>CONVERT（）的语法如下：</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">lCONVERT（datatype<span class="token punctuation">,</span> variable_or_column）<span class="token comment">--如</span><span class="token keyword">DECLARE</span> <span class="token variable">@Convert</span> <span class="token keyword">int</span><span class="token keyword">SET</span> <span class="token variable">@Convert</span> <span class="token operator">=</span> <span class="token number">1234</span><span class="token keyword">SELECT</span> <span class="token keyword">CONVERT</span> <span class="token punctuation">(</span><span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>，<span class="token variable">@Convert</span><span class="token punctuation">)</span> </code></pre></div><h4 id="5聚合函数"><a href="#5聚合函数" class="headerlink" title="5聚合函数"></a>5聚合函数</h4><p>聚合函数经常与SELECT语句的GROUP BY 子句一起使用。所有聚合函数均为确定性函数，也就是说，只要使用一组特定输入值调用聚合函数，该函数总是返回相同的值。它可以对一组执行计算，并返回多个值。 </p><table><thead><tr><th>函数名</th><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>AVG</td><td>([ALL|DISTINCT] expression)</td><td>数学表达式中指定字段的均值，或者计算所有记录，或分别计算该字段上值不同的记录。</td></tr><tr><td>CHECKSUM</td><td>(* | expression [ ,…n ])</td><td>生成哈希索引，返回按照表达某一行或一组表达式计算出来的校验和值</td></tr><tr><td>CHECKSUM_AGG</td><td>( [ ALL | DISTINCT ] expression )</td><td>将所有 expression 值的校验值作为 int 返回</td></tr><tr><td>COUNT</td><td>([ALL|DISTINCT] expression)</td><td>表达式中指定字段上记录的个数，或者是所有记录，或者是该字段上值不同的记录。</td></tr><tr><td>COUNT_BIG</td><td>( { [ ALL | DISTINCT ] expression } | * )</td><td>返回的是bigint类型</td></tr><tr><td>COUNT</td><td>(*)</td><td>选中的行数。</td></tr><tr><td>MAX</td><td>(expression)</td><td>表达式中的最大值。</td></tr><tr><td>MIN</td><td>(expression)</td><td>表达式中的最小值。</td></tr><tr><td>SUM</td><td>([ALL|DISTINCT] expression)</td><td>数学表达式中指定字段的总和。或者计算所有记录，或分别计算该字段上值不同的记录。</td></tr><tr><td>STEDV</td><td>( [ ALL | DISTINCT ] expression )</td><td>返回指定表达式只能够所有值的标准偏差</td></tr><tr><td>STEDVP</td><td>( [ ALL | DISTINCT ] expression )</td><td>返回指定表达式只能够所有值的总体标准偏差</td></tr><tr><td>VAR</td><td>( [ ALL | DISTINCT ] expression )</td><td>返回指定表达式只能够所有值的方差</td></tr><tr><td>VARP</td><td>( [ ALL | DISTINCT ] expression )</td><td>返回指定表达式只能够所有值的总体方差</td></tr></tbody></table><h3 id="流畅控制"><a href="#流畅控制" class="headerlink" title="流畅控制"></a>流畅控制</h3><p> Transact-SQL 语言使用的流程控制命令与常见的程序设计语言类似,主要有以下几种控制命令。 </p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">IF</span>…<span class="token keyword">ELSE</span>  <span class="token keyword">BEGIN</span>…<span class="token keyword">END</span> <span class="token keyword">CASE</span> <span class="token keyword">WHILE</span>…<span class="token keyword">CONTINUE</span>…<span class="token keyword">BREAK</span> <span class="token keyword">WAITFOR</span> <span class="token keyword">GOTO</span> <span class="token keyword">RETURN</span></code></pre></div><h4 id="if…else"><a href="#if…else" class="headerlink" title="if…else"></a>if…else</h4><p>可嵌套使用</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">if</span> <span class="token operator">&lt;</span>条件表达式<span class="token operator">></span><span class="token operator">&lt;</span>代码块<span class="token operator">></span><span class="token keyword">else</span><span class="token operator">&lt;</span>代码块<span class="token operator">></span></code></pre></div><h4 id="begin…end"><a href="#begin…end" class="headerlink" title="begin…end"></a>begin…end</h4><p>BEGIN…END用来设定一个程序块，将在BEGIN…END内的所有程序视为一个单元执行BEGIN…END经常在条件语句，如IF…ELSE中使用。在BEGIN…END中可嵌套另外的BEGIN…END来定义另一程序块。 </p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">begin</span> <span class="token operator">&lt;</span>程序块<span class="token operator">></span><span class="token keyword">end</span></code></pre></div><h4 id="case"><a href="#case" class="headerlink" title="case"></a>case</h4><p>使用方法1.</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">case</span> <span class="token operator">&lt;</span>运算式<span class="token operator">></span><span class="token keyword">when</span> <span class="token operator">&lt;</span>运算式<span class="token operator">></span> <span class="token keyword">then</span> <span class="token operator">&lt;</span>运算式<span class="token operator">></span><span class="token keyword">when</span> <span class="token operator">&lt;</span>运算式<span class="token operator">></span> <span class="token keyword">then</span> <span class="token operator">&lt;</span>运算式<span class="token operator">></span><span class="token keyword">else</span> <span class="token operator">&lt;</span>运算式<span class="token operator">></span><span class="token keyword">end</span></code></pre></div><p>使用方法2</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">case</span><span class="token keyword">when</span> <span class="token operator">&lt;</span>条件表达式<span class="token operator">></span> <span class="token keyword">then</span> <span class="token operator">&lt;</span>运算式<span class="token operator">></span><span class="token keyword">when</span> <span class="token operator">&lt;</span>条件表达式<span class="token operator">></span> <span class="token keyword">then</span> <span class="token operator">&lt;</span>运算式<span class="token operator">></span><span class="token keyword">else</span> <span class="token operator">&lt;</span>运算式<span class="token operator">></span><span class="token keyword">end</span></code></pre></div><p>如：</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> cOrderNo<span class="token punctuation">,</span> dOrderDate<span class="token punctuation">,</span> cShopperId<span class="token punctuation">,</span> mTotalCost<span class="token punctuation">,</span><span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> cOrderProcessed<span class="token operator">=</span><span class="token string">'Y'</span> <span class="token keyword">THEN</span> <span class="token string">'已处理'</span> <span class="token keyword">WHEN</span> cOrderProcessed<span class="token operator">=</span><span class="token string">'N'</span> <span class="token keyword">THEN</span> <span class="token string">'未处理'</span> <span class="token keyword">ELSE</span> <span class="token string">'未知'</span> <span class="token keyword">END</span> <span class="token keyword">AS</span> cOrderProcessed<span class="token keyword">FROM</span> Orders </code></pre></div><p><font color="red">CASE语句不能单独使用，必须嵌入到其它SQL语句中。</font></p><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">while</span> <span class="token operator">&lt;</span>条件表达式<span class="token operator">></span><span class="token keyword">begin</span><span class="token operator">&lt;</span>命令行或程序块<span class="token operator">></span><span class="token punctuation">[</span><span class="token keyword">break</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">continue</span><span class="token punctuation">]</span><span class="token punctuation">[</span>命令行或程序块<span class="token punctuation">]</span><span class="token keyword">end</span></code></pre></div><h4 id="try…catch"><a href="#try…catch" class="headerlink" title="try…catch"></a>try…catch</h4><p>Transact-SQL代码中的错误可使用 TRY…CATCH 构造处理，此功能类似于 其他编程语言的异常处理功能。<br>TRY…CATCH 构造包括两部分：一个 TRY 块和一个 CATCH 块。如果在 TRY 块内的 Transact-SQL 语句中检测到错误条件，则控制将被传递到 CATCH 块（可在此块中处理此错误）。 </p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">begin</span> try<span class="token comment">--代码</span><span class="token keyword">end</span> try<span class="token comment">--代码</span><span class="token keyword">begin</span> catch<span class="token comment">--代码</span><span class="token keyword">end</span> catch</code></pre></div><h4 id="return"><a href="#return" class="headerlink" title="return"></a>return</h4><div class="code-wrapper"><pre class="language-none"><code class="language-none">return [整数值]</code></pre></div><h2 id="数据库操纵语言-DML"><a href="#数据库操纵语言-DML" class="headerlink" title="数据库操纵语言(DML)"></a>数据库操纵语言(DML)</h2><p>INSERT  ：插入数据<br>UPDATE ：修改数据（更新数据）<br>DELETE ： 删除数据</p><h3 id="数据插入"><a href="#数据插入" class="headerlink" title="数据插入"></a>数据插入</h3><h4 id="insert"><a href="#insert" class="headerlink" title="insert"></a><code>insert</code></h4><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token identifier"><span class="token punctuation">`</span>表名<span class="token punctuation">`</span></span> <span class="token punctuation">[</span><span class="token string">'可选字段'</span><span class="token punctuation">]</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'...'</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--一条数据</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token identifier"><span class="token punctuation">`</span>表名<span class="token punctuation">`</span></span> <span class="token punctuation">[</span><span class="token string">'可选字段'</span><span class="token punctuation">]</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'...'</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'...'</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--多条数据</span></code></pre></div><p>·数值的个数必须和表中或列列表中的属性个数相同。<br>·插入信息的次序必须和插入列表中列出的属性次序相同。<br>·信息的数据类型必须和表列中的数据类型匹配。<br>·当插入VARBINARY类型的数据时，其尾部的“0”将被去掉。<br>·当插入VARCHAR或TEXT类型的数据时，其后的空格将被去掉，如果插入一个只含空格的字符串，则会被认为插入了一个长度为零的字符串。<br>·IDENTITY列不能指定数据，在VALUES列表中应跳过此列。<br>·对字符类型的列，当插入数据，特别是插入字符串中含有数字字符以外的字符时，最好用引号将其括起来，否则容易出错。 </p><h4 id="select-into"><a href="#select-into" class="headerlink" title="select into"></a>select into</h4><p>SELECT INTO 命令将一个表的内容复制到另一个新表（数据库中不存在）。SELECT INTO 语句创建一个新表，并用 SELECT 的结果集填充该表。 </p><p>语法：</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 列列表<span class="token keyword">INTO</span> 新表名<span class="token keyword">FROM</span> 表名<span class="token keyword">WHERE</span> 条件 </code></pre></div><h4 id="insert-select"><a href="#insert-select" class="headerlink" title="insert select"></a>insert select</h4><p>INSERT INTO命令，从一个表向另一个已经存在的表添加数据。<br>语法：</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span>  <span class="token punctuation">[</span><span class="token keyword">INTO</span><span class="token punctuation">]</span> 表名<span class="token number">1</span><span class="token keyword">SELECT</span> 列名<span class="token punctuation">)</span><span class="token keyword">FROM</span> 表名<span class="token number">2</span><span class="token punctuation">[</span><span class="token keyword">WHERE</span> 条件<span class="token punctuation">]</span> </code></pre></div><h3 id="数据更新"><a href="#数据更新" class="headerlink" title="数据更新"></a>数据更新</h3><p><code>updata</code></p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">update</span><span class="token keyword">set</span> <span class="token identifier"><span class="token punctuation">`</span>列名<span class="token punctuation">`</span></span><span class="token operator">=</span>值<span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>列名<span class="token punctuation">`</span></span><span class="token operator">=</span>值<span class="token comment">--插入多条</span><span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">`</span>表名<span class="token punctuation">`</span></span><span class="token keyword">where</span> 条件</code></pre></div><p>同一时刻只能对一张表进行更新。<br>如果一次更新违背了完整性约束，则所有的更新都将被回滚，也就是说，表没有发生任何变化。 </p><h3 id="数据删除"><a href="#数据删除" class="headerlink" title="数据删除"></a>数据删除</h3><p><code>delete</code></p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">delete</span> <span class="token keyword">from</span> 表名 <span class="token punctuation">[</span><span class="token keyword">where</span> 条件<span class="token punctuation">]</span></code></pre></div><p>如果删除表中所有数据 <code>truncate table</code>命令快得多</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">truncate</span> <span class="token keyword">table</span> bable name</code></pre></div><h3 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h3><p><code>暂时略......</code></p><br/><blockquote><p><code>未完待续</code></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c++列表初始化与初始化列表</title>
    <link href="/2021/10/11/c++/cpp%E5%88%97%E8%A1%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%8E%E5%88%9D%E5%A7%8B%E5%8C%96%E5%88%97%E8%A1%A8/"/>
    <url>/2021/10/11/c++/cpp%E5%88%97%E8%A1%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%8E%E5%88%9D%E5%A7%8B%E5%8C%96%E5%88%97%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="jsandcss/player/APlayer.min.css"><script src="/jsandcss/player/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/jsandcss/player/Meting.min.js"></script><blockquote><h2 id="C-11的列表初始化与初始化列表"><a href="#C-11的列表初始化与初始化列表" class="headerlink" title="C++11的列表初始化与初始化列表"></a>C++11的列表初始化与初始化列表</h2></blockquote><span id="more"></span><h3 id="列表初始化"><a href="#列表初始化" class="headerlink" title="列表初始化"></a>列表初始化</h3><p>列表初始化，对变量的初始化方式。</p><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> n<span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h3><p>格式</p><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">ClassName</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">int</span> k<span class="token punctuation">;</span>    ClassName<span class="token operator">:</span>i<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>k<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token comment">//用`,`分隔</span>    <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>初始化列表用于对类成员变量的初始化，尤其是对没有默认构造方法的类对象的初始化。</p><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">double</span> radius<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span><span class="token comment">//编译器自动生成默认构造方法</span><span class="token function">Circle</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token operator">-></span>radius <span class="token operator">=</span> radius<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">double</span> border<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Square</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span><span class="token comment">//不准编译器生成默认构造方法。</span><span class="token function">Square</span><span class="token punctuation">(</span><span class="token keyword">double</span> border<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token operator">-></span>border <span class="token operator">=</span> border<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">BoxUp</span> <span class="token punctuation">&#123;</span>Circle circle<span class="token punctuation">;</span>Square square<span class="token punctuation">;</span>    <span class="token comment">//在构造方法调用之前，要先创建circle,和square,但是square没有默认构造方法,因此要在构造方法以前为其初始化</span><span class="token function">BoxUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span>circle<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> square<span class="token punctuation">&#123;</span> <span class="token number">1.0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>circle <span class="token operator">=</span> <span class="token function">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>square <span class="token operator">=</span> <span class="token function">Square</span><span class="token punctuation">(</span><span class="token number">10.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>BoxUp <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cpp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字符串乘法</title>
    <link href="/2021/10/07/c++/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B9%98%E6%B3%95/"/>
    <url>/2021/10/07/c++/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B9%98%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="jsandcss/player/APlayer.min.css"><script src="/jsandcss/player/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/jsandcss/player/Meting.min.js"></script><blockquote><p>解决乘积数值越界问题</p></blockquote><span id="more"></span><p>当遇到超级大的数相乘时，其结果值可能远超<code>2</code><sup><code>100</code></sup> (比如一个较大的数的阶乘)的时候，简单的数据类型如<code>int</code> <code>long</code> <code>long long</code> 等是无法存储的，但是可以用一个字符串来存储。</p><h2 id="C-版本"><a href="#C-版本" class="headerlink" title="C++版本"></a>C++版本</h2><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>string <span class="token function">factorial</span><span class="token punctuation">(</span>string num1<span class="token punctuation">,</span> string num2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> m <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vector <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">sum</span><span class="token punctuation">(</span>m <span class="token operator">+</span> n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//两数相乘位数最多为两数的位数相加,开m+n的空间，初始值为0.</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">&#123;</span> m <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token punctuation">&#123;</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token punctuation">(</span>num1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>num2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span> <span class="token operator">+</span> sum<span class="token punctuation">[</span>j <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>sum<span class="token punctuation">[</span>j <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>sum<span class="token punctuation">[</span>j <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">+=</span> tmp <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//将结果转换位字符串</span>string s<span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sum<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在sum的最开始可能又0，不转换位字符串</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sum<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>s<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//如果结果位0，则s为空</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">"0"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>string s1<span class="token punctuation">,</span> s2<span class="token punctuation">;</span>cin <span class="token operator">>></span> s1 <span class="token operator">>></span> s2<span class="token punctuation">;</span>string sum <span class="token operator">=</span> <span class="token function">factorial</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>标准C版本</p><div class="code-wrapper"><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">factorial</span> <span class="token punctuation">(</span> <span class="token keyword">char</span><span class="token operator">*</span> p1<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> p2 <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">+</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token punctuation">(</span>m<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token punctuation">(</span>p1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>p2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token operator">+</span>sum<span class="token punctuation">[</span>i<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            sum<span class="token punctuation">[</span>i<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>            sum<span class="token punctuation">[</span>i<span class="token operator">+</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> tmp<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>m<span class="token operator">+</span>n<span class="token operator">&amp;&amp;</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> re <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>m<span class="token operator">+</span>n<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不分配前面0的空间，但是多一个char的空间</span>    <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>n<span class="token operator">+</span>m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        re<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token char">'0'</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">free</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    re<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">'\0'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> re<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> b<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s %s"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token function">factorial</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cpp</tag>
      
      <tag>C</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VS使用之scanf报错</title>
    <link href="/2021/10/07/others/VS%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <url>/2021/10/07/others/VS%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="jsandcss/player/APlayer.min.css"><script src="/jsandcss/player/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/jsandcss/player/Meting.min.js"></script><p>在使用Microsoft Visual Studio 2019 时，会遇到scanf、fopen等的一些常用函数警告造成不能编译运行的情况，警告信息为”不安全”,解决方法如下</p><p>在不安全的那行的前面加上以下代码</p><div class="code-wrapper"><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">warning</span><span class="token punctuation">(</span>suppress <span class="token operator">:</span> <span class="token number">4996</span><span class="token punctuation">)</span></span></span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Blog</category>
      
      <category>水贴</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android学习笔记</title>
    <link href="/2021/10/02/%E5%BC%80%E5%8F%91/Android/Android/"/>
    <url>/2021/10/02/%E5%BC%80%E5%8F%91/Android/Android/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="jsandcss/player/APlayer.min.css"><script src="/jsandcss/player/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/jsandcss/player/Meting.min.js"></script><div class = "danger"><blockquote><p>仅作为自己的学习笔记</p></blockquote></div><span id="more"></span><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="创建活动和布局"><a href="#创建活动和布局" class="headerlink" title="创建活动和布局"></a>创建活动和布局</h3><p>FirstActivity.java</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FirstActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>first_layout<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置布局</span>        <span class="token class-name">Button</span> button1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>testbutton<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个按钮</span>        <span class="token comment">//设置按钮的点击反馈</span>        button1<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//输出信息</span>                <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token class-name">FirstActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"ok"</span><span class="token punctuation">,</span><span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//调用另外的活动</span>                <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token string">"com.test.action"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当action和category都匹配时可以成功调用，这里categoty是默认</span>                <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//创建一个菜单</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onCreateOptionsMenu</span><span class="token punctuation">(</span><span class="token class-name">Menu</span> menu<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">getMenuInflater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>menu<span class="token punctuation">.</span>main<span class="token punctuation">,</span>menu<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onOptionsItemSelected</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">MenuItem</span> item<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getItemId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>add_item<span class="token operator">:</span>                <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"click add"</span><span class="token punctuation">,</span><span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>remove_item<span class="token operator">:</span>                <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"click remove"</span><span class="token punctuation">,</span><span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>first_layout</p><div class="code-wrapper"><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>    <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@+id/testbutton<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>退出<span class="token punctuation">"</span></span>    <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span></code></pre></div><p>SecondActivity</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>activitytest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">androidx<span class="token punctuation">.</span>appcompat<span class="token punctuation">.</span>app<span class="token punctuation">.</span></span><span class="token class-name">AppCompatActivity</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Intent</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Uri</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">Bundle</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>view<span class="token punctuation">.</span></span><span class="token class-name">View</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span></span><span class="token class-name">Button</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecondActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_second<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Button</span> button1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>testbutton2<span class="token punctuation">)</span><span class="token punctuation">;</span>        button1<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>ACTION_VIEW<span class="token punctuation">)</span><span class="token punctuation">;</span>                intent<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"tel:10086"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>注册活动</p><div class="code-wrapper"><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name">package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.activitytest<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span>        <span class="token attr-name"><span class="token namespace">android:</span>allowBackup</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>icon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@mipmap/ic_launcher<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@string/app_name<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>roundIcon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@mipmap/ic_launcher_round<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>supportsRtl</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>theme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@style/Theme.ActivityTest<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span>            <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.FirstActivity<span class="token punctuation">"</span></span>              <span class="token attr-name"><span class="token namespace">android:</span>label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@string/app_name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--活动名，和创建的活动名一样--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!--设置为主活动--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.intent.action.MAIN<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.intent.category.LAUNCHER<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.SecondActivity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--注册活动2--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!--设置活动2，用于调用--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.test.action<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.intent.category.DEFAULT<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">></span></span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL services基础</title>
    <link href="/2021/09/27/SQL/SQL%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/09/27/SQL/SQL%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="jsandcss/player/APlayer.min.css"><script src="/jsandcss/player/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/jsandcss/player/Meting.min.js"></script><blockquote><p>基于SQL Service</p><p>内容来源于我老师的ppt，仅作为学习交流与参考</p></blockquote><span id="more"></span><p>tips: 下篇<a href="/2021/10/14/SQL/SQL%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/">SQL 基础语法</a>)</p><h2 id="关于Microsoft-SQL-sever"><a href="#关于Microsoft-SQL-sever" class="headerlink" title="关于Microsoft SQL sever"></a>关于Microsoft SQL sever</h2><h3 id="数据库文件"><a href="#数据库文件" class="headerlink" title="数据库文件"></a>数据库文件</h3><p>数据库文件是存放数据库数据和数据库对象的文件。<br>一个数据库可以有一个或多个数据库文件，一个数据库文件只属于一个数据库。<br>有一个文件被定义为主数据库文件 。扩展名为.mdf 。只能有一个主数据库文件 。<br>次数据库文件， 扩展名为.ndf 。</p><p>单行注释： <code>-- 注释内容</code>  ，多行注释：<code>/* 注释内容 */</code></p><blockquote><p>tips:以下代码关键词等不区分大小写。</p></blockquote><h2 id="对数据库的操作"><a href="#对数据库的操作" class="headerlink" title="对数据库的操作"></a>对数据库的操作</h2><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> 数据库名<span class="token keyword">ON</span> <span class="token keyword">PRIMARY</span><span class="token punctuation">(</span>    <span class="token comment">--创建数据库文件</span>NAME <span class="token operator">=</span> 逻辑名<span class="token punctuation">,</span>FILENAME<span class="token operator">=</span><span class="token string">'路径+文件名+.MDF'</span><span class="token punctuation">,</span>SIZE <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>    <span class="token comment">/*如：D:\SQL2014\DataBase\ToyUniverse_Data.MDF*/</span> MAXSIZE <span class="token operator">=</span> UNLIMITED<span class="token punctuation">,</span> <span class="token comment">--大小限制单位MB 无限制</span>FILEGROWTH <span class="token operator">=</span> <span class="token number">5</span> <span class="token comment">--文件增长 每次增长 5MB</span><span class="token punctuation">)</span>LOG <span class="token keyword">ON</span><span class="token punctuation">(</span>    <span class="token comment">--创建事务日志文件</span>NAME <span class="token operator">=</span> 逻辑名<span class="token punctuation">,</span> FILENAME<span class="token operator">=</span><span class="token string">'路径+文件名+.LDF'</span><span class="token punctuation">,</span>SIZE <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>MAXSIZE <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">,</span>FILEGROWTH <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">%</span> <span class="token punctuation">)</span> </code></pre></div><h3 id="为数据库添加一个数据库文件和事务日志文件"><a href="#为数据库添加一个数据库文件和事务日志文件" class="headerlink" title="为数据库添加一个数据库文件和事务日志文件"></a>为数据库添加一个数据库文件和事务日志文件</h3><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">DATABASE</span> 数据库名<span class="token keyword">ADD</span> <span class="token keyword">FILE</span><span class="token punctuation">(</span>NAME <span class="token operator">=</span> 逻辑名称<span class="token punctuation">,</span>FILENAME<span class="token operator">=</span><span class="token string">'路径+文件名+.MDF.NDF'</span><span class="token punctuation">,</span><span class="token comment">--</span>SIZE <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>MAXSIZE <span class="token operator">=</span> UNLIMITED<span class="token punctuation">,</span>FILEGROWTH <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span>GO<span class="token keyword">ALTER</span> <span class="token keyword">DATABASE</span> ToyUniverse<span class="token keyword">ADD</span> LOG <span class="token keyword">FILE</span><span class="token punctuation">(</span>NAME <span class="token operator">=</span> 逻辑名称<span class="token punctuation">,</span>FILENAME<span class="token operator">=</span><span class="token string">'路径+文件名+.MDF.LDF'</span><span class="token punctuation">,</span>SIZE <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>MAXSIZE <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">,</span>FILEGROWTH <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">%</span><span class="token punctuation">)</span>GO </code></pre></div><h3 id="修改数据库数据文件name1的属性"><a href="#修改数据库数据文件name1的属性" class="headerlink" title="修改数据库数据文件name1的属性"></a>修改数据库数据文件name1的属性</h3><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">DATABASE</span> 数据库名<span class="token keyword">MODIFY</span>  <span class="token keyword">FILE</span><span class="token punctuation">(</span>NAME <span class="token operator">=</span> name1<span class="token punctuation">,</span>SIZE <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token comment">--修该大小等。</span>MAXSIZE <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">,</span>FILEGROWTH <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span>GO</code></pre></div><h2 id="对表的基本操作"><a href="#对表的基本操作" class="headerlink" title="对表的基本操作"></a>对表的基本操作</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="数据类型分类"><a href="#数据类型分类" class="headerlink" title="数据类型分类"></a>数据类型分类</h4><table><thead><tr><th>数据类型分类</th><th>数据类型</th><th>基本目的</th></tr></thead><tbody><tr><td>精确数值</td><td><code>BIT</code> 、 <code>INT</code> 、 <code>SMALLINT</code> 、 <code>TINYINT</code> 、 <code>BIGINT </code> 、 <code>DECIMAL（p,s）</code> 、 <code>NUMERIC （p,s）</code></td><td>存储带或不带小数的精确数值</td></tr><tr><td>近似数值</td><td><code>FLOAT(p)</code> 、 <code>REAL </code></td><td>存储带小数或不带小数的数值</td></tr><tr><td>货币</td><td><code>MONEY</code> 、 <code>SMALLMONEY  </code></td><td>存储带4位小数位的数值，专门用于货币值。</td></tr><tr><td>日期和时间</td><td><code>DATE</code> 、 <code>DATETIMEOFFSET</code> 、 <code>DATETIME2</code> 、 <code>SMALLDATETIME</code> 、 <code>DATETIME</code> 、 <code>TIME</code></td><td>存储时间和日期信息</td></tr><tr><td>字符串</td><td><code>CHAR(n)</code> 、 <code>NCHAR(n)</code> 、 <code>VARCHAR(n)</code> 、 <code>VARCHAR(max)</code> 、 <code>NVARCHAR(n)</code> 、 <code>NVARCHAR(max) </code> 、 <code>TEXT</code> 、 <code>NTEXT</code></td><td>存储基于可变长度的字符的值</td></tr><tr><td>二进制</td><td><code>BINARY(n)</code> 、 <code>VARBINARY(n)</code> 、 <code>VARBINARY(max)</code> 、 <code>IMAGE</code></td><td>存储二进制表示数据</td></tr><tr><td>特定数据类型</td><td><code>CURSOR</code> 、 <code>TIMESTAMP</code> 、 <code>HIERARCHYID</code> 、 <code>UNIQUEIDENTIFIER</code> 、 <code>SQL_VARIANT</code> 、 <code>XML</code> 、 <code>TABLE</code> 、 <code>GEOGRAPHY</code> 、 <code>GEOMETRY</code></td><td>专门处理的复杂的数据类型</td></tr></tbody></table><h4 id="精确数值类型"><a href="#精确数值类型" class="headerlink" title="精确数值类型"></a>精确数值类型</h4><table><thead><tr><th>数据类型</th><th>存储长度</th><th>取值范围</th><th>说明</th></tr></thead><tbody><tr><td><code>BIT</code></td><td>1B</td><td>0或者1</td><td>如果输入0或1以外的值，将被视为1。</td></tr><tr><td><code>INT</code></td><td>4B</td><td>-2^31 ～2^31-1</td><td>正负整数</td></tr><tr><td><code>SMALLINT</code></td><td>2B</td><td>-32768～32767</td><td>正负整数</td></tr><tr><td><code>TINYINT</code></td><td>1B</td><td>0～255</td><td>正整数</td></tr><tr><td><code>BIGINT</code></td><td>8B</td><td>-2^63 ～2^63-1</td><td>大范围的正负整数</td></tr><tr><td><code>DECIMAL（p,s）</code></td><td>5～17B</td><td>- 10^38 +1 ～ 10^38  - 1</td><td>最大可存储38位十进制数</td></tr><tr><td><code>NUMERIC（p,s）</code></td><td>5～17B</td><td>- 10^38 +1 ～ 10^38  - 1</td><td>与DECIMAL等价</td></tr></tbody></table><h4 id="近似数值类型"><a href="#近似数值类型" class="headerlink" title="近似数值类型"></a>近似数值类型</h4><table><thead><tr><th>数据类型</th><th>存储长度</th><th>取值范围</th><th>说明</th></tr></thead><tbody><tr><td><code>FLOAT(p)</code></td><td>4B或8B</td><td>1.79E + 308～-2.23E  - 308、0和 2.23E – 308～1.79E  + 308</td><td>存储大型浮点数</td></tr><tr><td><code>REAL</code></td><td>4B</td><td>-3.40E + 38 至 -1.18E  - 38、0 和1.18E - 38 至 3.40E + 38</td><td>SQL-92标准已被float替换</td></tr></tbody></table><h4 id="货币类型"><a href="#货币类型" class="headerlink" title="货币类型"></a>货币类型</h4><table><thead><tr><th>数据类型</th><th>存储长度</th><th>取值范围</th><th>说明</th></tr></thead><tbody><tr><td><code>MONEY</code></td><td>8B</td><td>-922,337,203,685,477.5808～ 922,337,203,685,477.5807</td><td>存储大型货币值</td></tr><tr><td><code>SMALLMONEY</code></td><td>4B</td><td>-214,748.3648～214,748.3647</td><td>存储小型货币值</td></tr></tbody></table><h4 id="日期时间类型"><a href="#日期时间类型" class="headerlink" title="日期时间类型"></a>日期时间类型</h4><table><thead><tr><th>数据类型</th><th>存储长度</th><th>取值范围</th><th>精度</th></tr></thead><tbody><tr><td><code>DATE</code></td><td>3B</td><td>0001-01-01 到 9999-12-31</td><td>1day</td></tr><tr><td><code>TIME</code></td><td>3B~5B</td><td>00:00:00.0000000 到 23:59:59.9999999</td><td>100ns</td></tr><tr><td><code>SMALLDATETIME</code></td><td>4B</td><td>1900-01-01 到 2079-06-06</td><td>1min</td></tr><tr><td><code>DATETIME</code></td><td>8B</td><td>1753-01-01 到 9999-12-31</td><td>0.00333s</td></tr><tr><td><code>DATETIME2</code></td><td>6B~8B</td><td>0001-01-01 00:00:00.0000000 到 9999-12-31 23:59:59.9999999</td><td>100ns</td></tr><tr><td><code>DATETIMEOFFSET</code></td><td>8B~10B</td><td>0001-01-01 00:00:00.0000000 到 9999-12-31 23:59:59.9999999（以世界协调时间（UTC）表示）</td><td>100ns</td></tr></tbody></table><h4 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h4><table><thead><tr><th>数据类型</th><th>存储长度</th><th>取值范围</th><th>说明</th></tr></thead><tbody><tr><td><code>CHAR(n)</code></td><td>1B～8000B</td><td>最多8000个字符</td><td>固定长度ANSI数据类型</td></tr><tr><td><code>NCHAR(n)</code></td><td>2B～8000B</td><td>最多4000个字符</td><td>固定长度Unicode数据类型</td></tr><tr><td><code>VARCHAR(n)</code></td><td>1B～8000B</td><td>最多8000个字符</td><td>可变长度ANSI数据类型</td></tr><tr><td><code>VARCHAR(max)</code></td><td>最大2G</td><td>最多1 073 741 824个字符</td><td>可变长度ANSI数据类型</td></tr><tr><td><code>NVARCHAR(n)</code></td><td>2B～8000B</td><td>最多4000个字符</td><td>可变长度Unicode数据类型</td></tr><tr><td><code>NVARCHAR(max)</code></td><td>最大2G</td><td>最多536 870 912个字符</td><td>可变长度Unicode数据类型</td></tr><tr><td><code>TEXT</code></td><td>最大2G</td><td>最多1 073 741 824个字符</td><td>可变长度ANSI数据类型</td></tr><tr><td><code>NTEXT</code></td><td>最大2G</td><td>最多536 870 912个字符</td><td>可变长度Unicode数据类型</td></tr></tbody></table><h4 id="二进制类型"><a href="#二进制类型" class="headerlink" title="二进制类型"></a>二进制类型</h4><table><thead><tr><th>数据类型</th><th>存储长度</th><th>说明</th></tr></thead><tbody><tr><td><code>BINARY(n)</code></td><td>1B～8000B</td><td>存储固定大小的二进制数据</td></tr><tr><td><code>VARBINARY(n)</code></td><td>1B～8000B</td><td>存储可变大小的二进制数据</td></tr><tr><td><code>ARBINARY(max)</code></td><td>最大2G</td><td>存储可变大小的二进制数据</td></tr><tr><td><code>IMAGE</code></td><td>最大2G</td><td>存储可变大小的二进制数据</td></tr></tbody></table><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><h4 id="一般表"><a href="#一般表" class="headerlink" title="一般表"></a>一般表</h4><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">(</span>    test1 <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">--列(属性)名 数据类型,</span>    test2 <span class="token keyword">int</span><span class="token punctuation">,</span><span class="token comment">--列(属性)名 数据类型,</span>    test3 <span class="token keyword">double</span><span class="token punctuation">)</span></code></pre></div><h4 id="表中有计算得出值的"><a href="#表中有计算得出值的" class="headerlink" title="表中有计算得出值的"></a>表中有计算得出值的</h4><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">(</span>    test1 <span class="token keyword">float</span><span class="token punctuation">,</span>    test2 <span class="token keyword">float</span><span class="token punctuation">,</span>    test3 <span class="token keyword">as</span> <span class="token punctuation">(</span>test1<span class="token operator">*</span>test2<span class="token punctuation">)</span> persisted <span class="token comment">--test3由计算得出</span><span class="token punctuation">)</span></code></pre></div><h4 id="添加列"><a href="#添加列" class="headerlink" title="添加列"></a>添加列</h4><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span> 列名 数据类型<span class="token comment">--如 alter table 表名 add test4 float</span></code></pre></div><h4 id="修改数据类型"><a href="#修改数据类型" class="headerlink" title="修改数据类型"></a>修改数据类型</h4><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">alter</span> <span class="token keyword">column</span> 列名 数据类型<span class="token comment">--如 alter table 表名 alter column test4 varchar(1000)</span></code></pre></div><h4 id="删除列"><a href="#删除列" class="headerlink" title="删除列"></a>删除列</h4><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">drop</span> <span class="token keyword">column</span> 列名<span class="token comment">--如 alter table 表名 drop column test4</span></code></pre></div><h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> 表名</code></pre></div><h2 id="数据库完整性"><a href="#数据库完整性" class="headerlink" title="数据库完整性"></a>数据库完整性</h2><p>数据库中的数据是从外界输入的，而数据的输入由于种种原因，会发生输入无效或错误信息。保证输入的数据符合规定，成为了数据库系统，尤其是多用户的关系数据库系统首要关注的问题。</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">实体完体性参照完整性域完整性用户自定义完整性。</code></pre></div><h3 id="实体完整性"><a href="#实体完整性" class="headerlink" title="实体完整性"></a>实体完整性</h3><h4 id="依靠创建主键实现"><a href="#依靠创建主键实现" class="headerlink" title="依靠创建主键实现"></a>依靠创建主键实现</h4><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> Test<span class="token punctuation">(</span>test1 <span class="token keyword">float</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span><span class="token comment">--primary key 将test1 列设置为主键 列级定义</span>test2 <span class="token keyword">float</span><span class="token punctuation">,</span>test3 <span class="token keyword">char</span><span class="token punctuation">)</span></code></pre></div><p>或者</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> Test<span class="token punctuation">(</span>test1 <span class="token keyword">float</span><span class="token punctuation">,</span>test2 <span class="token keyword">float</span><span class="token punctuation">,</span>test3 <span class="token keyword">char</span><span class="token punctuation">,</span>    <span class="token comment">--设置test1和test2为主键，只要test1与test2不同时相同就可，当然也可以只设置一个。（表级定义）设置两个及以上列为主键时应用表级约束</span><span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>test1<span class="token punctuation">,</span>test2<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></div><p>或者</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> Test<span class="token punctuation">(</span>test1 <span class="token keyword">float</span><span class="token punctuation">,</span>test2 <span class="token keyword">float</span><span class="token punctuation">,</span>test3 <span class="token keyword">char</span><span class="token punctuation">,</span><span class="token keyword">constraint</span> pktest1 <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>test1<span class="token punctuation">)</span> <span class="token comment">--表级定义，设置约束名为 pktest1</span><span class="token punctuation">)</span></code></pre></div><h4 id="添加主键"><a href="#添加主键" class="headerlink" title="添加主键"></a>添加主键</h4><p>在创建表是忘记设置主键可以添加主键</p><h5 id="添加约束"><a href="#添加约束" class="headerlink" title="添加约束"></a>添加约束</h5><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> Test <span class="token keyword">add</span> <span class="token keyword">constraint</span> pkTest <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>test1<span class="token punctuation">)</span></code></pre></div><h5 id="或者之间添加主键"><a href="#或者之间添加主键" class="headerlink" title="或者之间添加主键"></a>或者之间添加主键</h5><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> Test <span class="token keyword">add</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>test1<span class="token punctuation">)</span></code></pre></div><h5 id="删除主键"><a href="#删除主键" class="headerlink" title="删除主键"></a>删除主键</h5><p>在删除主键前，需要知道主键的约束名，通过以下代码查看</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sysobjects <span class="token keyword">where</span> parent_obj <span class="token operator">in</span><span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> sysobjects <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'表名'</span><span class="token punctuation">)</span> <span class="token comment">--表名要打引号，查找出的约束名为name</span><span class="token comment">--或者</span><span class="token keyword">exec</span> sp_helpconstraint <span class="token variable">@objname</span><span class="token operator">=</span><span class="token string">'Test'</span> <span class="token comment">--查找出的约束名为 constraint_name,type为PRIMARY KEY</span></code></pre></div><p>通过上面两条语句查找到约束名</p><p>删除约束即可</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> Test <span class="token keyword">drop</span> <span class="token keyword">constraint</span> 约束名</code></pre></div><h3 id="参照完整性"><a href="#参照完整性" class="headerlink" title="参照完整性"></a>参照完整性</h3><p>在关系数据库中通过外键实现参照完整性</p><h4 id="添加外键"><a href="#添加外键" class="headerlink" title="添加外键"></a>添加外键</h4><p>列级约束</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> Tests<span class="token punctuation">(</span>test0 <span class="token keyword">float</span> <span class="token keyword">references</span> Test<span class="token punctuation">(</span>test1<span class="token punctuation">)</span><span class="token punctuation">,</span>test1 <span class="token keyword">time</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>test2 money<span class="token punctuation">)</span></code></pre></div><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> Tests<span class="token punctuation">(</span>test0 <span class="token keyword">float</span><span class="token punctuation">,</span>test1 <span class="token keyword">time</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span> <span class="token comment">--设置为主键</span>test2 money<span class="token punctuation">,</span><span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>test0<span class="token punctuation">)</span> <span class="token keyword">references</span> Test<span class="token punctuation">(</span>test1<span class="token punctuation">)</span> <span class="token comment">--设置外键为Test 的主键test1</span><span class="token punctuation">)</span></code></pre></div><h4 id="添加外键-1"><a href="#添加外键-1" class="headerlink" title="添加外键"></a>添加外键</h4><p>在创建表时未添加外键，之后添加外键</p><p>如将Tests 的 test0 列设置外键，外键未Test 的test1列</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> Tests <span class="token keyword">add</span> <span class="token keyword">constraint</span> fkTests1<span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>test0<span class="token punctuation">)</span> <span class="token keyword">references</span> Test<span class="token punctuation">(</span>test1<span class="token punctuation">)</span><span class="token comment">--可以不用换行用空格隔开</span></code></pre></div><p>或者</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> Tests <span class="token keyword">add</span> <span class="token keyword">constraint</span> fkTests1 <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>test0<span class="token punctuation">)</span> <span class="token keyword">references</span> Test<span class="token punctuation">(</span>test1<span class="token punctuation">)</span></code></pre></div><h4 id="删除外键"><a href="#删除外键" class="headerlink" title="删除外键"></a>删除外键</h4><p>以下两句查找FOREIGN KEY 约束名</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sysobjects <span class="token keyword">where</span> parent_obj <span class="token operator">in</span><span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> sysobjects <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'Tests'</span><span class="token punctuation">)</span><span class="token keyword">exec</span> sp_helpconstraint <span class="token variable">@objname</span><span class="token operator">=</span><span class="token string">'Tests'</span></code></pre></div><p>删除</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> Test <span class="token keyword">drop</span> <span class="token keyword">constraint</span> 约束名</code></pre></div><h4 id="参照完整性的违约处理策略"><a href="#参照完整性的违约处理策略" class="headerlink" title="参照完整性的违约处理策略"></a>参照完整性的违约处理策略</h4><p>当删除外键对应的主键表的数据时，系统默认不准删除，设置相关的违约处理策略可以解决此问题</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">on</span> <span class="token keyword">delete</span> <span class="token keyword">cascade</span> <span class="token comment">--级联删除</span><span class="token keyword">on</span> <span class="token keyword">delete</span> <span class="token keyword">no</span> <span class="token keyword">action</span> <span class="token comment">--拒绝删除</span><span class="token keyword">on</span> <span class="token keyword">delete</span> <span class="token keyword">update</span> <span class="token comment">--级联更新</span><span class="token keyword">on</span> <span class="token keyword">delete</span> <span class="token keyword">on</span> <span class="token keyword">action</span> <span class="token comment">--拒绝删除</span></code></pre></div><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> Tests<span class="token punctuation">(</span>test0 <span class="token keyword">float</span> <span class="token keyword">references</span> Test<span class="token punctuation">(</span>test1<span class="token punctuation">)</span> <span class="token keyword">on</span> <span class="token keyword">delete</span> <span class="token keyword">cascade</span><span class="token punctuation">,</span><span class="token comment">--级联删除</span>test1 <span class="token keyword">time</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>test2 money<span class="token punctuation">,</span><span class="token punctuation">)</span></code></pre></div><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> Tests<span class="token punctuation">(</span>test0 <span class="token keyword">float</span> <span class="token keyword">references</span> Test<span class="token punctuation">(</span>test1<span class="token punctuation">)</span> <span class="token keyword">on</span> <span class="token keyword">update</span> <span class="token keyword">cascade</span><span class="token punctuation">,</span><span class="token comment">--级联更新</span>test1 <span class="token keyword">time</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>test2 money<span class="token punctuation">,</span><span class="token punctuation">)</span></code></pre></div><p>也可进行表级定义</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> Tests<span class="token punctuation">(</span>test0 <span class="token keyword">float</span><span class="token punctuation">,</span>test1 <span class="token keyword">time</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>test2 money<span class="token punctuation">,</span><span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>test0<span class="token punctuation">)</span> <span class="token keyword">references</span> Test<span class="token punctuation">(</span>test1<span class="token punctuation">)</span> <span class="token keyword">on</span> <span class="token keyword">update</span> <span class="token keyword">cascade</span><span class="token punctuation">)</span></code></pre></div><p>在添加外键时也可以直接在添加以下语句之一语句后加设置级联更新或删除</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">on</span> <span class="token keyword">update</span> <span class="token keyword">cascade</span><span class="token keyword">on</span> <span class="token keyword">delete</span> <span class="token keyword">cascade</span></code></pre></div><h3 id="域完整性"><a href="#域完整性" class="headerlink" title="域完整性"></a>域完整性</h3><p><strong>域完整性确保了只有在某一合法范围内的值才能存储到一列中。可以通过限制数据类型、值的范围和数据格式来实施域完整性。</strong></p><p>在SQL Server中可以通过默认（<code>DEFAULT</code>）约束、检查约束（<code>CHECK</code>）约束、非空（<code>NOT NULL</code>）约束、唯一（<code>UNIQUE</code>）约束来实施域完整性。</p><h4 id="default-约束"><a href="#default-约束" class="headerlink" title="default 约束"></a><code>default</code> 约束</h4><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> Student<span class="token punctuation">(</span>id <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>names <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sex <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">'男'</span><span class="token comment">--默认未男</span><span class="token punctuation">)</span></code></pre></div><p>添加约束,如果建表时未添加约束</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> Student<span class="token keyword">add</span> <span class="token keyword">constraint</span> 约束名 <span class="token keyword">default</span> <span class="token string">'男'</span> <span class="token keyword">for</span> sex</code></pre></div><p>删除约束</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> Student<span class="token keyword">drop</span> <span class="token keyword">constraint</span> defSex <span class="token comment">--约束名用前面查看主键和外键约束名的方法查看</span></code></pre></div><h4 id="check-约束"><a href="#check-约束" class="headerlink" title="check 约束"></a><code>check</code> 约束</h4><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> Student<span class="token punctuation">(</span>id <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>names <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sex <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">check</span> <span class="token punctuation">(</span>sex <span class="token operator">in</span><span class="token punctuation">(</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token string">'女'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>age <span class="token keyword">int</span> <span class="token keyword">check</span><span class="token punctuation">(</span>age<span class="token operator">>=</span><span class="token number">15</span> <span class="token operator">and</span> age <span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></div><p>添加和删除方法与default一样</p><h4 id="unique-约束"><a href="#unique-约束" class="headerlink" title="unique 约束"></a><code>unique 约束</code></h4><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> Student<span class="token punctuation">(</span>id <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">unique</span><span class="token punctuation">,</span>names <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span></code></pre></div><p>添加和删除方法与default一样</p><h2 id="引索"><a href="#引索" class="headerlink" title="引索"></a>引索</h2><p>用户对数据库最频繁的操作是进行数据查询。一般情况下，数据库在进行查询操作时需要对整个表进行数据搜索。当表中的数据很多时，搜索数据就需要很长的时间，这就造成了服务器的资源浪费。为了提高检索数据的能力，数据库引入了索引机制。 </p><h3 id="聚集引索"><a href="#聚集引索" class="headerlink" title="聚集引索"></a>聚集引索</h3><p><strong>·聚集索引对表的物理数据页中的数据按列进行排序，然后再重新存储到磁盘上，即聚集索引与数据是混为一体，的它的叶节点中存储的是实际的数据。</strong></p><p><strong>·由于聚集索引对表中的数据一一进行了排序，因此用聚集索引查找数据很快。但由于聚集索引将表的所有数据完全重新排列了，它所需要的空间也就特别大，大概相当于表中数据所占空间的<code>120%</code>。</strong></p><p><strong>·一个表只能有一个聚集索引。</strong></p><p><strong>·聚集索引改变表中数据的物理顺序</strong> </p><h3 id="非聚集引索"><a href="#非聚集引索" class="headerlink" title="非聚集引索"></a>非聚集引索</h3><p><strong>·非聚集索引具有与表的数据完全分离的结构，使用非聚集索引不用将物理数据页中的数据按列排序。</strong></p><p><strong>·理论上讲，一个表最多可以建249 个非聚集索引。</strong></p><p><strong>·非聚集索引不改变表中数据的物理顺序 。</strong></p><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><p>假如有用以下命令创建的表</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> Staff<span class="token punctuation">(</span>names <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sex <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">check</span><span class="token punctuation">(</span>sex <span class="token operator">in</span><span class="token punctuation">(</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token string">'女'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>id <span class="token keyword">int</span> <span class="token keyword">unique</span><span class="token punctuation">,</span>salary <span class="token keyword">float</span><span class="token punctuation">,</span>insurance <span class="token keyword">float</span><span class="token punctuation">,</span>dress <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></div><h4 id="1聚集索引"><a href="#1聚集索引" class="headerlink" title="1聚集索引"></a>1聚集索引</h4><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">unique</span> <span class="token keyword">clustered</span> <span class="token keyword">index</span> id_Staff <span class="token keyword">on</span> Staff<span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token comment">--id_Staff 为索引名</span></code></pre></div><h4 id="2非聚集索引"><a href="#2非聚集索引" class="headerlink" title="2非聚集索引"></a>2非聚集索引</h4><p>由于可以创建多个非聚集索引，且非聚集索引与聚集所以你不冲突，所以可以同时在<code>salary</code> 和<code>insurance</code> 上建立非聚集索引，也可以建立复合索引。</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">index</span> salary_staff <span class="token keyword">on</span> Staff<span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token keyword">create</span> <span class="token keyword">index</span> insurance_staff <span class="token keyword">on</span> Staff<span class="token punctuation">(</span>insurance<span class="token punctuation">)</span><span class="token keyword">create</span> <span class="token keyword">index</span> saAndins <span class="token keyword">on</span> Staff<span class="token punctuation">(</span>salary<span class="token punctuation">,</span>insurance<span class="token punctuation">)</span> <span class="token comment">--复合索引</span></code></pre></div><p>注意：数据类型为TEXT、NTEXT、IMAGE或BIT的列不能作为索引的列。 由于索引的宽度不能超过900个字节，因此数据类型为CHAR、VARCHAR、BINARY和VARBINARY的列的列宽度超过了900字节，或数据类型为NCHAR、NVARCHAR的列的列宽度超过了450个字节时也不能作为索引的列。</p><blockquote><p><del><code>未完待续...</code></del> <code>完结</code> 下篇请见<a href="/2021/10/14/SQL/SQL%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/">SQL 基础语法</a>)</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>九月网抑云</title>
    <link href="/2021/09/23/others/%E9%9F%B3%E4%B9%90/%E4%B9%9D%E6%9C%88%E7%BD%91%E6%8A%91%E4%BA%91/"/>
    <url>/2021/09/23/others/%E9%9F%B3%E4%B9%90/%E4%B9%9D%E6%9C%88%E7%BD%91%E6%8A%91%E4%BA%91/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="jsandcss/player/APlayer.min.css"><script src="/jsandcss/player/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/jsandcss/player/Meting.min.js"></script>    <div id="aplayer-HImNVVkM" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="1805077132" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="none" data-theme=" #C20C0C"    ></div>    <div id="aplayer-PIBJvAdg" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="1827600686" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="none" data-theme=" #C20C0C"    ></div>    <div id="aplayer-JPUBLBZU" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="512376326" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="none" data-theme=" #C20C0C"    ></div>    <div id="aplayer-IGqkvEeA" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="1489064589" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="none" data-theme=" #C20C0C"    ></div>]]></content>
    
    
    <categories>
      
      <category>音乐</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网抑云</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Kyokyo】Good Time绝美好日子！</title>
    <link href="/2021/09/19/others/%E5%A8%B1%E4%B9%90/KyokyoDance/"/>
    <url>/2021/09/19/others/%E5%A8%B1%E4%B9%90/KyokyoDance/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="jsandcss/player/APlayer.min.css"><script src="/jsandcss/player/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/jsandcss/player/Meting.min.js"></script><blockquote><h2 id="汉堡王天下第一"><a href="#汉堡王天下第一" class="headerlink" title="汉堡王天下第一"></a><font color="hotpink">汉堡王天下第一</font></h2></blockquote><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>娱乐</tag>
      
      <tag>BeautifulGirl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>鹿小草｜《On The Ground》翻唱</title>
    <link href="/2021/09/19/others/%E5%A8%B1%E4%B9%90/%E9%B9%BF%E5%B0%8F%E8%8D%89%EF%BD%9C%E3%80%8AOn%20The%20Ground%E3%80%8B%E7%BF%BB%E5%94%B1/"/>
    <url>/2021/09/19/others/%E5%A8%B1%E4%B9%90/%E9%B9%BF%E5%B0%8F%E8%8D%89%EF%BD%9C%E3%80%8AOn%20The%20Ground%E3%80%8B%E7%BF%BB%E5%94%B1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="jsandcss/player/APlayer.min.css"><script src="/jsandcss/player/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/jsandcss/player/Meting.min.js"></script><blockquote><h2 id="YYDS"><a href="#YYDS" class="headerlink" title="YYDS"></a><font color="hotpink">YYDS</font></h2></blockquote><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>娱乐</tag>
      
      <tag>BeautifulGirl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在java中使用正则表达式、</title>
    <link href="/2021/09/15/java/%E5%9C%A8java%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2021/09/15/java/%E5%9C%A8java%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="jsandcss/player/APlayer.min.css"><script src="/jsandcss/player/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/jsandcss/player/Meting.min.js"></script><h2 id="什么是正则表达式"><a href="#什么是正则表达式" class="headerlink" title="什么是正则表达式"></a>什么是正则表达式</h2><p>如何判断一个字符串是否是’10086’，在java中可以这样：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"abcde"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token operator">==</span><span class="token string">"10086"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里返回false</span>        <span class="token class-name">String</span> ss <span class="token operator">=</span> <span class="token string">"10086"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ss<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"10086"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>那么怎么判断一个字符串是否是’10’开头’86’结尾，中间只有一个其他数字的字符串呢？</p><p>只要匹配到开头两个数字和末尾两个数字，判断中间只有一个数字就行，很容易通过编程实现这个目标，但是如果要匹配其他情况呢？编写很多程序是不可靠的，这时候就要使用<code>&lt;b&gt;正则表达式&lt;/b&gt;</code></p><p>回到刚才那个问题，如何判断一个字符串是否是’10’开头’86’结尾，中间只有一个其他数字的字符串。</p><p>我们使用<b>“10\d86”</b>来匹配”10086”,其中\d就代表’10’和’86’的中间可以有一个任意的数字，类似于一个宅占位符。</p><p>在<code>&lt;b&gt;java.util.regex&lt;/b&gt;</code>中内置了正则表达式引擎。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token comment">//java.util.regex</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">"10\\d86"</span><span class="token punctuation">;</span><span class="token comment">//对于java来书\是转义字符，所以用'\\'代表'\'</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10086"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"100086"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出false</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10e86"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出false</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h2 id="正则表达式匹配规则"><a href="#正则表达式匹配规则" class="headerlink" title="正则表达式匹配规则"></a>正则表达式匹配规则</h2><h3 id="精准匹配"><a href="#精准匹配" class="headerlink" title="精准匹配"></a>精准匹配</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">"10086"</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10586"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出false</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10086"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出true</span>    <span class="token comment">//如果有特殊字符就用'\'转义</span>    <span class="token class-name">String</span> regexs <span class="token operator">=</span> <span class="token string">"10086\""</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10086\""</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regexs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="匹配任意字符"><a href="#匹配任意字符" class="headerlink" title="匹配任意字符."></a>匹配任意字符<code>.</code></h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">"10.86"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10086"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10e86"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>    <span class="token punctuation">&#125;</span></code></pre></div><h3 id="匹配数字-d"><a href="#匹配数字-d" class="headerlink" title="匹配数字\d"></a>匹配数字<code>\d</code></h3><p>‘\D’与之相反匹配非数字</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">"10\\d86"</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10086"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10e86"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="匹配常用字符-w"><a href="#匹配常用字符-w" class="headerlink" title="匹配常用字符\w"></a>匹配常用字符<code>\w</code></h3><p><code>\w</code>能匹配：字母、数字、’_’</p><p>不能匹配：<code>!</code>, <code>&#123;</code>, <code>&#125;</code>, <code>[</code>, <code>]</code>, <code>~</code>, <code>!</code>, <code>！</code>, <code>@</code>, <code>#</code>, <code>$</code>, <code>%</code>, <code>^</code>, <code>&amp;</code>, <code>*</code>, <code>(</code>, <code>)</code>, <code>-</code>, <code>+</code>, <code>/</code>, <code>?</code>, <code>&quot;</code>, <code>|</code>等</p><p>但是<code>\W</code>却与之相反</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">"10\\w86"</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10_86"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10086"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10d86"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10=86"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10#86"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10 86"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="匹配空格-s"><a href="#匹配空格-s" class="headerlink" title="匹配空格\s"></a>匹配空格<code>\s</code></h3><p>‘\S’与其相反</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">"10\\s86"</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10 86"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="重复匹配"><a href="#重复匹配" class="headerlink" title="重复匹配*"></a>重复匹配<code>*</code></h3><p>当匹配多个数字时可以：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">"10\\d*86"</span><span class="token punctuation">;</span><span class="token comment">//*匹配任意多字符</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10123456789086"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>    <span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">"10\\d&#123;3&#125;86"</span><span class="token punctuation">;</span><span class="token comment">//匹配3个数字</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1012386"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><table><thead><tr><th style='text-align:left;' ><span>正则表达式</span></th><th style='text-align:left;' ><span>规则</span></th><th style='text-align:left;' ><span>可以匹配</span></th></tr></thead><tbody><tr><td style='text-align:left;' ><code>A</code></td><td style='text-align:left;' ><span>指定字符</span></td><td style='text-align:left;' ><code>A</code></td></tr><tr><td style='text-align:left;' ><code>\u548c</code></td><td style='text-align:left;' ><span>指定Unicode字符</span></td><td style='text-align:left;' ><code>和</code></td></tr><tr><td style='text-align:left;' ><code>.</code></td><td style='text-align:left;' ><span>任意字符</span></td><td style='text-align:left;' ><code>a</code><span>，</span><code>b</code><span>，</span><code>&amp;</code><span>，</span><code>0</code></td></tr><tr><td style='text-align:left;' ><code>\d</code></td><td style='text-align:left;' ><span>数字0~9</span></td><td style='text-align:left;' ><code>0</code><span>~</span><code>9</code></td></tr><tr><td style='text-align:left;' ><code>\w</code></td><td style='text-align:left;' ><span>大小写字母，数字和下划线</span></td><td style='text-align:left;' ><code>a</code><span>~</span><code>z</code><span>，</span><code>A</code><span>~</span><code>Z</code><span>，</span><code>0</code><span>~</span><code>9</code><span>，</span><code>_</code></td></tr><tr><td style='text-align:left;' ><code>\s</code></td><td style='text-align:left;' ><span>空格、Tab键</span></td><td style='text-align:left;' ><span>空格，Tab</span></td></tr><tr><td style='text-align:left;' ><code>\D</code></td><td style='text-align:left;' ><span>非数字</span></td><td style='text-align:left;' ><code>a</code><span>，</span><code>A</code><span>，</span><code>&amp;</code><span>，</span><code>_</code><span>，……</span></td></tr><tr><td style='text-align:left;' ><code>\W</code></td><td style='text-align:left;' ><span>非\w</span></td><td style='text-align:left;' ><code>&amp;</code><span>，</span><code>@</code><span>，</span><code>中</code><span>，……</span></td></tr><tr><td style='text-align:left;' ><code>\S</code></td><td style='text-align:left;' ><span>非\s</span></td><td style='text-align:left;' ><code>a</code><span>，</span><code>A</code><span>，</span><code>&amp;</code><span>，</span><code>_</code><span>，……</span></td></tr><tr><td colspan=3 style='text-align:left;' ><span>在文末菜鸟教程的链接中有更多其他字符。</span></td></tr></tbody></table><p><font color="blue">另外：</font></p><p><code>\d+</code> <code>\w+</code>  <code>\s+</code> 可以匹配一个或者多个数字，空格，字母,<code>(.*)</code> 或 <code>.*</code>  可以匹配多个任意字符</p><p>如以下结果全为 <code>true</code>：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> regex1 <span class="token operator">=</span> <span class="token string">"\\d+"</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"123456789"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> regex2 <span class="token operator">=</span> <span class="token string">"\\s+"</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"       "</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> regex3 <span class="token operator">=</span> <span class="token string">"\\w+"</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"abcdefg"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//当要使用+时就要使用转义字符</span>    <span class="token class-name">String</span> regex4 <span class="token operator">=</span> <span class="token string">"\\d\\+"</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1+"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//匹配.时要使用转义字符</span>    <span class="token class-name">String</span> regex5 <span class="token operator">=</span> <span class="token string">".*\\.baidu\\..*"</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"www.baidu."</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//System.out.println("www,baidu.".matches(regex5));//false</span><span class="token punctuation">&#125;</span></code></pre></div><p><code>?</code> 表示括号中的选项时可选的</p><p>如：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> regex1 <span class="token operator">=</span> <span class="token string">"\\d+(\\w)?"</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"123456789"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"123456789s"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token punctuation">&#125;</span></code></pre></div><p><code>matches</code> 方法也可以这样使用</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> regex1 <span class="token operator">=</span> <span class="token string">"\\d+(\\w)?"</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex1<span class="token punctuation">,</span><span class="token string">"123456789"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token punctuation">&#125;</span></code></pre></div><h2 id="复杂的匹配规则"><a href="#复杂的匹配规则" class="headerlink" title="复杂的匹配规则"></a>复杂的匹配规则</h2><h3 id="匹配开头结尾"><a href="#匹配开头结尾" class="headerlink" title="匹配开头结尾^,$"></a>匹配开头结尾<code>^</code>,<code>$</code></h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">"^A\\d&#123;3&#125;$"</span><span class="token punctuation">;</span><span class="token comment">//^表示开头，$表示结尾</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A234"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true               </span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="匹配指定范围"><a href="#匹配指定范围" class="headerlink" title="匹配指定范围"></a>匹配指定范围</h3><p>1.用<code>[]</code>指定可以是哪些元素，用<code>&#123;&#125;</code>指定多少个或者第几个到第几个</p><p><code>[1-3]</code> <code>[1,2,3]</code>代表1到3的数字.</p><p><font color="red"><strong>注意:</strong></font></p><p><font color="red"><i><b><code>&#123;1,3&#125;</code>代表存在1到3个</b></i></font></p><p><font color="red"><i><b><code>&#123;1,&#125;</code>代表存在至少1个</b></i></font></p><p><font color="red"><i><b><code>&#123;3&#125;</code>代表有3个</b></i></font></p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> regex1 <span class="token operator">=</span> <span class="token string">"\\d&#123;2,3&#125;"</span><span class="token punctuation">;</span><span class="token comment">//表示有2到3个</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"12"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>    <span class="token class-name">String</span> regex2 <span class="token operator">=</span> <span class="token string">"\\d&#123;3&#125;"</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1234"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true表示有3个</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="和"><a href="#和" class="headerlink" title="^和|"></a><code>^</code>和<code>|</code></h3><p><code>^</code>:代表取反</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> regex1 <span class="token operator">=</span> <span class="token string">"[^1,2,3,4]\\d&#123;1,3&#125;"</span><span class="token punctuation">;</span>   <span class="token comment">//有2到4个除了1，2，3，4的数字</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"5555"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>    <span class="token class-name">String</span> regex2 <span class="token operator">=</span> <span class="token string">"[^2-4]\\d&#123;1,2&#125;(.*)$"</span><span class="token punctuation">;</span>    <span class="token comment">//有2到3个除了2，3，4的数字，后面接着是任意个字符(.*)表示任意个任意字符，除了`\n`</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"567abcd"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token punctuation">&#125;</span></code></pre></div><p><code>|</code>:代表或</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> regex1 <span class="token operator">=</span> <span class="token string">"[1,2,3,4]\\d&#123;1,3&#125;|abc"</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1234"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>    <span class="token class-name">String</span> regex2 <span class="token operator">=</span> <span class="token string">"[1-4]\\d&#123;1,2&#125;|[5-9]\\d&#123;3,4&#125;"</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"5678"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="使用"><a href="#使用" class="headerlink" title="使用()"></a>使用()</h3><p>以下两种正则表达式等效</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s<span class="token operator">=</span><span class="token string">"learn\sjava|learn\sphp|learn\sgo"</span></code></pre></div><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"learn\\s(java|php|go)"</span></code></pre></div><h2 id="分组匹配"><a href="#分组匹配" class="headerlink" title="分组匹配"></a>分组匹配</h2><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"(\\d&#123;3,4&#125;)-(\\d&#123;7,8&#125;)"</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"010-12345678"</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>    <span class="token class-name">Pattern</span> p <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"(\\d&#123;3,4&#125;)-(\\d&#123;7,8&#125;)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Matcher</span> m <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">"010-12345678"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//010-12345678</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//010</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//12345678</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"匹配失败!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p><a href="https://www.runoob.com/java/java-regular-expressions.html">归纳：参见菜鸟教程</a></p><h2 id="Pattern-amp-Matcher"><a href="#Pattern-amp-Matcher" class="headerlink" title="Pattern&amp;Matcher"></a>Pattern&amp;Matcher</h2><h3 id="Pattern"><a href="#Pattern" class="headerlink" title="Pattern"></a>Pattern</h3><p>基本方法</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token class-name">Pattern</span> <span class="token function">compole</span><span class="token punctuation">(</span><span class="token class-name">String</span> regex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将给定的正则表达式编译为模式</span><span class="token keyword">static</span> <span class="token class-name">Pattern</span> <span class="token function">compole</span><span class="token punctuation">(</span><span class="token class-name">String</span> regex，<span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将给定的正则表达式编译为具有给定标志的模式。</span><span class="token class-name">String</span> <span class="token function">pattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回编译此模式的正则表达式。  </span><span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span><span class="token class-name">String</span> regex<span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 编译给定的正则表达式并尝试将给定的输入与其匹配</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//围绕此模式的匹配拆分给定的输入序列。  </span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> input<span class="token punctuation">,</span> <span class="token keyword">int</span> limit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 围绕此模式的匹配拆分给定的输入序列。</span></code></pre></div><p>使用Pattern 创建一个匹配此模式的给定输入的匹配器。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Matcher</span> <span class="token function">matcher</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> input<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><p>如：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"java([0-5])"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">"java1.8isyyds"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><h3 id="Matcher"><a href="#Matcher" class="headerlink" title="Matcher"></a>Matcher</h3><p>关于分组：</p><p>：组是用括号划分的正则表达式，可以根据组的编号来引用这个组。组号为0表示整个表达式，组号为1表示被第一对括号括起的组，依次类推，例如A(B(C))D，组0是ABCD，组1是BC，组2是C;如(AB)(CD)，组0时ABCD,组1是AB，组2是CD；</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Pattern</span> <span class="token function">pattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回此匹配器解释的模式 </span><span class="token keyword">boolean</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//尝试查找与模式匹配的输入序列的下一个子序列。  </span><span class="token keyword">boolean</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//重置此匹配器，然后尝试从指定的索引处开始查找与模式匹配的输入序列的下一个子序列。</span><span class="token keyword">boolean</span> <span class="token function">lookingAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//尝试将从区域开头开始的输入序列与模式匹配。</span><span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//尝试将整个区域与模式匹配。</span><span class="token keyword">int</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回上一个匹配的起始索引。  </span><span class="token keyword">int</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">int</span> group<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回上一个匹配操作期间给定组捕获的子序列的起始索引。  </span><span class="token keyword">int</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回最后一个字符匹配后的偏移量。  </span><span class="token keyword">int</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token keyword">int</span> group<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回在上一个匹配操作期间由给定组捕获的子序列的最后一个字符之后的偏移量。  </span><span class="token keyword">int</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回在上一个匹配操作期间由给定 named-capturing group捕获的子序列的最后一个字符之后的偏移量;</span><span class="token class-name">String</span> <span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回上一个匹配项匹配的输入子序列。  </span><span class="token class-name">String</span> <span class="token function">group</span><span class="token punctuation">(</span><span class="token keyword">int</span> group<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回上一个匹配操作期间给定组捕获的输入子序列。  </span><span class="token class-name">String</span> <span class="token function">group</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回在上一个匹配操作期间由给定 named-capturing group捕获的输入子序列。</span><span class="token keyword">int</span> <span class="token function">groupCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回此匹配器模式中捕获组的数量。</span></code></pre></div><p>例如：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"(jdk([0-9].?[0-9]))"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">"jdk1.8 is yyds,jdk11 is yyds too"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">groupCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2 表示一共有2个组</span></code></pre></div><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"(jdk([0-9].?[0-9]))"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">"jdk1.8 is yyds,jdk11 is yyds too"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true   相当与find(0),创建一个匹配器从头匹配</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//jdk1.8   返回第一组的匹配序列</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0   返回第一组的匹配序列的开始索引</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//6    返回第一组的匹配序列的结束索引的后一个索引。</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1.8   返回第二组的匹配序列</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//6</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true   重置匹配器，将从下标为2的元素开始，创建一个新的匹配，这里也可以使用find(),相当于查找第三行代码查找序列的下一个子序列。</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//jdk11   </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//15</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//20</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//11</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//18</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//20</span></code></pre></div><p><font color="blue">tips:每次进行group(),start(),end()操作前都要进行find()操作，也就是先创建一个匹配器。</font></p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>51单片机学习记录</title>
    <link href="/2021/09/11/others/51%E5%8D%95%E7%89%87%E6%9C%BA%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <url>/2021/09/11/others/51%E5%8D%95%E7%89%87%E6%9C%BA%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="jsandcss/player/APlayer.min.css"><script src="/jsandcss/player/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/jsandcss/player/Meting.min.js"></script><h2 id="简单认识普中51单片机的8个灯"><a href="#简单认识普中51单片机的8个灯" class="headerlink" title="简单认识普中51单片机的8个灯"></a>简单认识普中51单片机的8个灯</h2><p>在A2开发版中，P2管脚的结构如图</p><p><img src="/images/51%E5%8D%95%E7%89%87%E6%9C%BAP2.png" alt="51单片机P2"></p><h3 id="点亮一个灯"><a href="#点亮一个灯" class="headerlink" title="点亮一个灯"></a>点亮一个灯</h3><p>其中1234位高电位（1），当5678位低电位（0）时，对应的灯就会亮</p><div class="code-wrapper"><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"reg52.h"</span></span>sbit led1 <span class="token operator">=</span> P2<span class="token operator">^</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">//将P2.0管脚定义为led1</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    led1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">//当led1为低电位(0)时，第一颗灯常亮。</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>在开发时，为了方便，使用如下定义</p><div class="code-wrapper"><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> u16<span class="token punctuation">;</span>   <span class="token comment">//int 为两个字节</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> u8<span class="token punctuation">;</span>   <span class="token comment">//char 为一个字节</span></code></pre></div><p>延时函数</p><div class="code-wrapper"><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> u16<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> u8<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span>u16 times<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//使用时time不应该大于65535.</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>times<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="灯珠闪烁"><a href="#灯珠闪烁" class="headerlink" title="灯珠闪烁"></a>灯珠闪烁</h3><div class="code-wrapper"><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"reg52.h"</span></span>sbit led1 <span class="token operator">=</span> P2<span class="token operator">^</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        led1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">50000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        led1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">50000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="LED流水灯"><a href="#LED流水灯" class="headerlink" title="LED流水灯"></a>LED流水灯</h3><ol><li></li></ol><div class="code-wrapper"><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"reg52.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">led</span> <span class="token expression">P2</span></span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> u16<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> u8<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span>u16 time<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span>time<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>led <span class="token operator">=</span> <span class="token number">0xfe</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>led <span class="token operator">=</span> <span class="token punctuation">(</span>led<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">50000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>led<span class="token operator">==</span><span class="token number">0x7f</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>led <span class="token operator">=</span> <span class="token number">0xfe</span><span class="token punctuation">;</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">50000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>2.改进版</p><div class="code-wrapper"><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"reg52.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">led</span> <span class="token expression">P2</span></span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> u16<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> u8<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span>u16 time<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span>time<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>u8 i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>led <span class="token operator">=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">0x1</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//此处将1左移i,使得8位中只有一位等于1，再取反就得到一个为0;</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">50000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>3使用左移_crol_ 右移、_cror_ 函数</p><div class="code-wrapper"><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"reg52.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"intrins.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">led</span> <span class="token expression">P2</span></span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> u16<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> u8<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span>u16 time<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span>time<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">de</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">50000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>u8 i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>led <span class="token operator">=</span> <span class="token operator">~</span><span class="token number">0x01</span><span class="token punctuation">;</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">50000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">7</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>led <span class="token operator">=</span> <span class="token function">_crol_</span><span class="token punctuation">(</span>led<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//每次左移1，也可以设置2等等</span><span class="token function">de</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">7</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>led <span class="token operator">=</span> <span class="token function">_cror_</span><span class="token punctuation">(</span>led<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右移1</span><span class="token function">de</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Others</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL指令积累</title>
    <link href="/2021/09/08/SQL/MySQL%E6%8C%87%E4%BB%A4%E7%A7%AF%E7%B4%AF/"/>
    <url>/2021/09/08/SQL/MySQL%E6%8C%87%E4%BB%A4%E7%A7%AF%E7%B4%AF/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="jsandcss/player/APlayer.min.css"><script src="/jsandcss/player/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/jsandcss/player/Meting.min.js"></script><h2 id="MySQL安装教程推荐："><a href="#MySQL安装教程推荐：" class="headerlink" title="MySQL安装教程推荐："></a>MySQL安装教程推荐：</h2><p>one:<a href="https://zhuanlan.zhihu.com/p/323343217">https://zhuanlan.zhihu.com/p/323343217</a></p><p>two:<a href="https://zhuanlan.zhihu.com/p/336788776">https://zhuanlan.zhihu.com/p/336788776</a></p><h2 id="MySQL对数据的简单操作"><a href="#MySQL对数据的简单操作" class="headerlink" title="MySQL对数据的简单操作"></a>MySQL对数据的简单操作</h2><h3 id="登录于创建"><a href="#登录于创建" class="headerlink" title="登录于创建"></a>登录于创建</h3><p>登录用户</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">mysql <span class="token operator">-</span>u username <span class="token operator">-</span>p<span class="token punctuation">;</span>   <span class="token comment">#;是一条命令结束的标志。</span></code></pre></div><p>创建一个数据库</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> 数据库名<span class="token punctuation">;</span></code></pre></div><p>删除某个数据库</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">database</span> 数据库名<span class="token punctuation">;</span></code></pre></div><p>显示数据库</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span></code></pre></div><p>使用某个数据库</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">use</span> database_name<span class="token punctuation">;</span></code></pre></div><p>显示该数据库中的表</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span></code></pre></div><p>在使用某个数据库后在其中新建表</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> table_name<span class="token punctuation">(</span>  <span class="token comment">#这里没有';'是用的回车换行</span>   字段 <span class="token keyword">INT</span> <span class="token keyword">UNSIGNED</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>   <span class="token comment">#auto_inrement在插入数据时会自动插入，自动添加。</span>   字段 <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>   字段 <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>   字段 <span class="token keyword">DATE</span><span class="token punctuation">,</span>   <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span> 字段 <span class="token punctuation">)</span><span class="token comment">//这里设置某个字段对于不同条的数据不能相同</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>   <span class="token comment">#分号结束这条命令</span></code></pre></div><table><thead><tr><th align="center">大小</th><th align="left">类型</th><th align="left">范围（有符号）</th><th align="left">范围（无符号）</th><th align="left">用途</th></tr></thead><tbody><tr><td align="center">1 byte</td><td align="left">TINYINT</td><td align="left">(-128，127)</td><td align="left">(0，255)</td><td align="left">小整数值</td></tr><tr><td align="center">2 bytes</td><td align="left">SMALLINT</td><td align="left">(-32 768，32 767)</td><td align="left">(0，65 535)</td><td align="left">大整数值</td></tr><tr><td align="center">3 bytes</td><td align="left">MEDIUMINT</td><td align="left">(-8 388 608，8 388 607)</td><td align="left">(0，16 777 215)</td><td align="left">大整数值</td></tr><tr><td align="center">4 bytes</td><td align="left">INT或INTEGER</td><td align="left">(-2 147 483 648，2 147 483 647)</td><td align="left">(0，4 294 967 295)</td><td align="left">大整数值</td></tr><tr><td align="center">8 bytes</td><td align="left">BIGINT</td><td align="left">(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)</td><td align="left">(0，18 446 744 073 709 551 615)</td><td align="left">极大整数值</td></tr><tr><td align="center">4 bytes</td><td align="left">FLOAT</td><td align="left">(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td><td align="left">0，(1.175 494 351 E-38，3.402 823 466 E+38)</td><td align="left">单精度 浮点数值</td></tr><tr><td align="center">8 bytes</td><td align="left">DOUBLE</td><td align="left">(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td align="left">0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td align="left">双精度 浮点数值</td></tr><tr><td align="center">对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td><td align="left">DECIMAL</td><td align="left">依赖于M和D的值</td><td align="left">依赖于M和D的值</td><td align="left">小数值</td></tr></tbody></table><p>显示表中数据</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> table_name<span class="token punctuation">;</span></code></pre></div><p>使用某个数据库后删除其中的表</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> table_name<span class="token punctuation">;</span></code></pre></div><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p>向表中插入数据(<font color="red">tips:</font>插入数据的字段需要于表中的字段对应 )</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> table_name<span class="token punctuation">(</span>字段<span class="token number">1</span><span class="token punctuation">,</span>字段<span class="token number">2</span><span class="token punctuation">,</span>字段<span class="token number">3.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>    <span class="token comment">#...是省略的意思，后面有多少数据就写多少。</span><span class="token keyword">values</span><span class="token punctuation">(</span>字段<span class="token number">1</span>的值<span class="token punctuation">,</span>字段<span class="token number">2</span>的值<span class="token punctuation">,</span>字段<span class="token number">3</span>的值<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">#该行可以不加';'而书写多行末尾加','，最后一行添加';',用于添加多组数据。</span></code></pre></div><p>也可以直接在没有设置自动添加时直接添加对应字段的值</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> table_name<span class="token keyword">values</span><span class="token punctuation">(</span>字段<span class="token number">1</span>的值<span class="token punctuation">,</span>字段<span class="token number">2</span>的值<span class="token punctuation">,</span>字段<span class="token number">3</span>的值<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>   </code></pre></div><p>如果第一个为自动添加的数据</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token string">'table_name'</span><span class="token punctuation">(</span>字段<span class="token number">2</span><span class="token punctuation">,</span>字段<span class="token number">3.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>    <span class="token comment">#...是省略的意思，后面有多少数据就写多少。</span><span class="token keyword">values</span><span class="token punctuation">(</span>字段<span class="token number">2</span>的值<span class="token punctuation">,</span>字段<span class="token number">3</span>的值<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">#字段一的值系统自动添加，比如id，前面有一个id=99，则自动添加该行id=100;</span></code></pre></div><h3 id="查找数据"><a href="#查找数据" class="headerlink" title="查找数据"></a>查找数据</h3><p>查寻两个表的数据，并将相关属性相等的保留</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> table1<span class="token punctuation">,</span>bable2   <span class="token comment">#这句会执行乘积运算执行</span><span class="token keyword">where</span> table2<span class="token punctuation">.</span>属性<span class="token operator">=</span>table2<span class="token punctuation">.</span>属性<span class="token punctuation">;</span>   <span class="token comment">#筛选乘积运算的数据</span></code></pre></div><p>稍微完整的语法</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column_name<span class="token punctuation">,</span>column_name<span class="token keyword">FROM</span> table_name<span class="token punctuation">[</span><span class="token keyword">WHERE</span> Clause<span class="token punctuation">]</span>   <span class="token comment">#条件</span><span class="token punctuation">[</span><span class="token keyword">LIMIT</span> N<span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token keyword">OFFSET</span> M<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">#limit限制查找条数，offset设置偏移量，默认为0</span></code></pre></div><p>例如：</p><p>执行</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test<span class="token punctuation">;</span></code></pre></div><p>结果为：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">+----+------+------+------------+| id | name | 性别 | date       |+----+------+------+------------+|  1 | a    | 女   | 2021-09-10 ||  2 | bfsd | 男   | 2021-09-10 ||  3 | c    | 男   | 2021-09-10 ||  4 | d    | 女   | 2021-09-10 ||  5 | qq   | 男   | 2021-09-10 ||  6 | qq   | 男   | 2021-09-10 |+----+------+------+------------+</code></pre></div><p>执行</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test <span class="token keyword">limit</span> <span class="token number">3</span> <span class="token keyword">OFFSET</span> <span class="token number">2</span><span class="token punctuation">;</span></code></pre></div><p>结果为：</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">+----+------+------+------------+| id | name | 性别 | date       |+----+------+------+------------+|  3 | c    | 男   | 2021-09-10 ||  4 | d    | 女   | 2021-09-10 ||  5 | qq   | 男   | 2021-09-10 |+----+------+------+------------+</code></pre></div><p>从第三条开始查找3条记录。<font color="red">值得注意的时offset要和limit一起使用。</font></p><h3 id="update更新"><a href="#update更新" class="headerlink" title="update更新"></a>update更新</h3><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">UPDATE</span> table_name <span class="token keyword">SET</span> field1<span class="token operator">=</span>newvalue<span class="token punctuation">[</span><span class="token keyword">WHERE</span> Clause<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre></div><h3 id="delete删除"><a href="#delete删除" class="headerlink" title="delete删除"></a>delete删除</h3><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> table_name <span class="token punctuation">[</span><span class="token keyword">WHERE</span> Clause<span class="token punctuation">]</span></code></pre></div><h3 id="like子句"><a href="#like子句" class="headerlink" title="like子句"></a>like子句</h3><p>like可以用于where子句，使用like子句替代’&#x3D;’，可以再like子句中使用’%’，类似于一个元字符的搜索。</p><p>还可以使用’and’和’or’指定一个或多个条件。</p><p>再’delete’和’update’中同样可以使用where…like子句。</p><p>简单的语法如下：</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">'table_name'</span> <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'条件'</span><span class="token punctuation">;</span></code></pre></div><p>如：</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#先来看看表中的数据。</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+----------+------+------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name     <span class="token operator">|</span> 性别 <span class="token operator">|</span> <span class="token keyword">date</span>       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+----------+------+------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> fds<span class="token punctuation">.</span>com  <span class="token operator">|</span> 女   <span class="token operator">|</span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">10</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> gerf<span class="token punctuation">.</span>com <span class="token operator">|</span> 男   <span class="token operator">|</span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">10</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span> c        <span class="token operator">|</span> 男   <span class="token operator">|</span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">10</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">4</span> <span class="token operator">|</span> 哈哈哈   <span class="token operator">|</span> 女   <span class="token operator">|</span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">10</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">5</span> <span class="token operator">|</span> qq       <span class="token operator">|</span> 男   <span class="token operator">|</span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">10</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+----------+------+------------+</span><span class="token comment">#选择name中带有'.com'的数据。</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'%.com'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+----------+------+------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name     <span class="token operator">|</span> 性别 <span class="token operator">|</span> <span class="token keyword">date</span>       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+----------+------+------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> fds<span class="token punctuation">.</span>com  <span class="token operator">|</span> 女   <span class="token operator">|</span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">10</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> gerf<span class="token punctuation">.</span>com <span class="token operator">|</span> 男   <span class="token operator">|</span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">10</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+----------+------+------------+</span><span class="token comment">#选择name中带有'.com'和'q'的数据。</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'%.com'</span> <span class="token operator">or</span> name <span class="token operator">like</span> <span class="token string">'%q'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+----------+------+------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name     <span class="token operator">|</span> 性别 <span class="token operator">|</span> <span class="token keyword">date</span>       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+----------+------+------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> fds<span class="token punctuation">.</span>com  <span class="token operator">|</span> 女   <span class="token operator">|</span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">10</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> gerf<span class="token punctuation">.</span>com <span class="token operator">|</span> 男   <span class="token operator">|</span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">10</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">5</span> <span class="token operator">|</span> qq       <span class="token operator">|</span> 男   <span class="token operator">|</span> <span class="token number">2021</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">10</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+----------+------+------------+</span></code></pre></div><p>like 匹配&#x2F;模糊匹配，会与 <strong>%</strong> 和 <strong>_</strong> 结合使用。</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token string">'%a'</span>     <span class="token comment">#以a结尾的数据</span><span class="token string">'a%'</span>     <span class="token comment">#以a开头的数据</span><span class="token string">'%a%'</span>    <span class="token comment">#含有a的数据</span><span class="token string">'_a_'</span>    <span class="token comment">#三位且中间字母是a的</span><span class="token string">'_a'</span>     <span class="token comment">#两位且结尾字母是a的</span><span class="token string">'a_'</span>     <span class="token comment">#两位且开头字母是a的</span></code></pre></div><h2 id="MySQL对用户的操作"><a href="#MySQL对用户的操作" class="headerlink" title="MySQL对用户的操作"></a>MySQL对用户的操作</h2><h3 id="查询用户"><a href="#查询用户" class="headerlink" title="查询用户"></a>查询用户</h3><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#再系统默认的MySQL数据库中的user表中存有用户信息。</span><span class="token comment">#显示所有用户</span><span class="token keyword">select</span> <span class="token keyword">user</span> <span class="token keyword">from</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">;</span><span class="token comment">#显示本地登录用户</span><span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">,</span>host <span class="token keyword">from</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">;</span></code></pre></div><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#仅能本地登录用户</span><span class="token keyword">create</span> <span class="token keyword">user</span> <span class="token string">'用户名'</span><span class="token variable">@'localhost'</span> identified <span class="token keyword">by</span> <span class="token string">'密码'</span><span class="token punctuation">;</span><span class="token comment">#远程登录用户</span><span class="token keyword">create</span> <span class="token keyword">user</span> <span class="token string">'用户名'</span><span class="token variable">@'%'</span> identified <span class="token keyword">by</span> <span class="token string">'密码'</span><span class="token punctuation">;</span><span class="token comment">#可以将%替换为其他ip试试。</span></code></pre></div><p>如</p><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">user</span> <span class="token string">'test'</span><span class="token variable">@'localhost'</span> identified <span class="token keyword">by</span> <span class="token string">'123456'</span><span class="token punctuation">;</span></code></pre></div><h3 id="用户重命名"><a href="#用户重命名" class="headerlink" title="用户重命名"></a>用户重命名</h3><div class="code-wrapper"><pre class="language-none"><code class="language-none"></code></pre></div><p><font color="red">待更新……烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫烫</font></p><p>SQL基础和命令见<a href="/2021/09/27/SQL/SQL%E5%9F%BA%E7%A1%80/">SQL services基础</a>)</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaGui编程2</title>
    <link href="/2021/08/26/java/JavaGui%E7%BC%96%E7%A8%8B2/"/>
    <url>/2021/08/26/java/JavaGui%E7%BC%96%E7%A8%8B2/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="jsandcss/player/APlayer.min.css"><script src="/jsandcss/player/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/jsandcss/player/Meting.min.js"></script><blockquote><h2 id="布局管理器"><a href="#布局管理器" class="headerlink" title="布局管理器"></a><font color="#ff00ff">布局管理器</font></h2></blockquote><span id="more"></span><div class="success"><blockquote><p> BorderLayout</p></blockquote></div><p>BorderLayout(边界布局管理器)是一种较为复杂的布局方式,它将容器划分为5个区域,分别是页头(PAGE_START)、页尾(PAGE_END)、行首(LINE_START)、行尾(LINE_END)、中部(CENTER)。组件可以被放置在这5个区域中的任意一个位置</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GUI2</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">CreatGui</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//创建明为BorderLayout的顶级容器。</span><span class="token class-name">JFrame</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"BorderLayout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置布局管理器为BorderLayout</span>f<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置显示的位置</span><span class="token comment">//创建5个按钮组件</span><span class="token class-name">JButton</span> but1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"PAGE_START"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JButton</span> but2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"PAGE_END"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JButton</span> but3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"LINE_START"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JButton</span> but4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"LINE_END"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JButton</span> but5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"CENTER"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//讲按钮添加到窗体中</span>f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>but1<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>PAGE_START<span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>but2<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>PAGE_END<span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>but3<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>LINE_START<span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>but4<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>LINE_END<span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>but5<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">JFrame</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">SwingUtilities</span><span class="token punctuation">.</span><span class="token function">invokeLater</span><span class="token punctuation">(</span>GUI2<span class="token operator">::</span><span class="token class-name">CreatGui</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><div class="success"><blockquote><p>FlowLayout布局布局管理器</p></blockquote></div><p>FlowLayout(流式布局管理器)是最简单的布局管理器,在这种布局下,容器会将组件按照添加顺序从左向右放置,当到达容器的边界时,会自动将组件放到下一行的开始位置。这些组件可以按左对齐,居中对齐(默认方式)或右对齐的方式排列。FlowLayout类有三个构造方法:</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">FlowLayot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FlowLayot</span><span class="token punctuation">(</span><span class="token keyword">int</span> align<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//指定对齐方式</span><span class="token class-name">FlowLayot</span><span class="token punctuation">(</span><span class="token keyword">int</span> align<span class="token punctuation">,</span><span class="token keyword">int</span> hgap<span class="token punctuation">,</span><span class="token keyword">int</span> vgap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//指定对齐方式和间距</span></code></pre></div><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GUI3</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">createGUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//创建Flowlayout窗体</span><span class="token class-name">JFrame</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"Flowlayout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token class-name">FlowLayout</span><span class="token punctuation">.</span>CENTER<span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左对齐，水平距离20，垂直间距30；</span>f<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加组件</span>f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"second"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"sird"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"forth"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"fiveth"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">JFrame</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">SwingUtilities</span><span class="token punctuation">.</span><span class="token function">invokeLater</span><span class="token punctuation">(</span>GUI3<span class="token operator">::</span><span class="token function">createGUI</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><div class="success"><blockquote><p>GridLayout</p></blockquote></div><p>GridLayout(网格布局管理器)使用纵横线将容器分成n行m列大小相等的网格,每个网格中可以添加一个组件。添加到容器中的组件首先放置在第1行第1列(左上角)的网格中,然后在第1行的网格中从左向右依次放置其他组件,行满后,继续在下一行中从左到右放置组件。与FlowLayout不同的是,放置在GridLayout布局管理器中的组件将自动占据网格的整个区域。GridLayout类有三个构造方法:</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//默认一行一列</span><span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token keyword">int</span> rows<span class="token punctuation">,</span><span class="token keyword">int</span> cols<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//指定行数列数</span><span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token keyword">int</span> rows<span class="token punctuation">,</span><span class="token keyword">int</span> cols<span class="token punctuation">,</span><span class="token keyword">int</span> hgap<span class="token punctuation">,</span><span class="token keyword">int</span> vgap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//指定行列数之间的水平垂直间距</span></code></pre></div><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GUI4</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">creatGUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">JFrame</span> f<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"GridLayout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Button</span> btn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>f<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">JFrame</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">SwingUtilities</span><span class="token punctuation">.</span><span class="token function">invokeLater</span><span class="token punctuation">(</span>GUI4<span class="token operator">::</span><span class="token function">creatGUI</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>JavaGui</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaGui编程1</title>
    <link href="/2021/08/23/java/JavaGui%E7%BC%96%E7%A8%8B1/"/>
    <url>/2021/08/23/java/JavaGui%E7%BC%96%E7%A8%8B1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="jsandcss/player/APlayer.min.css"><script src="/jsandcss/player/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/jsandcss/player/Meting.min.js"></script><h1 id="关于GUI编程"><a href="#关于GUI编程" class="headerlink" title="关于GUI编程"></a><font color="#00FFFF">关于GUI编程</font></h1><p>GUI全称是Graphical User Interface,即图形用户接口,就是用来提供给用户操作的图形界面的接口,通过这些提供的图形用户接口就可以实现包括窗口,菜单、按钮、工具栏和其他各种图形界面元素,从而实现程序的图形用户界面来方便用户操作。</p><span id="more"></span><h1 id="Swing顶级容器"><a href="#Swing顶级容器" class="headerlink" title="Swing顶级容器"></a>Swing顶级容器</h1><p>Swing 提供了三个主要的顶级容器类:<font color="red">JFrame</font>,<font color="red">JDialog</font>和<font color="red">JApplet</font>,其中JFrame和JDialog 是最为常用也是最为简单的顶级容器。</p><h1 id="JFrame容器"><a href="#JFrame容器" class="headerlink" title="JFrame容器"></a><span id="jump1">JFrame容器</span></h1><p>JFrame容器是一个独立的容器（窗口），不能放在其他容器中。支持窗口所有的基本功能。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GUI</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">createGui</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//创建JFrame容器窗口</span><span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"Test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置关闭窗口默认操作</span>frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">JFrame</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置窗口尺寸</span>frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">520</span><span class="token punctuation">,</span><span class="token number">520</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//展示窗口</span>frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//调用createGui方法显示窗口</span><span class="token class-name">SwingUtilities</span><span class="token punctuation">.</span><span class="token function">invokeLater</span><span class="token punctuation">(</span>GUI<span class="token operator">::</span><span class="token function">createGui</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>运行就会出现一个空白的窗口了。</p><h1 id="JDialog容器"><a href="#JDialog容器" class="headerlink" title="JDialog容器"></a>JDialog容器</h1><p>JDialog是Swing 的另外一个顶级容器,通常用来表示对话框窗口。JDialog对话框可分为两种:模态对话框和非模态对话框。所谓模态对话框是指用户需要等到处理完对话框后才能继续与其他窗口交互,而非模态对话框允许用户在处理对话框的同时与其他窗口交互。</p><p>下面再原本的<a href="#jump1">JFrame容器</a>的基础上加上JDialog容器</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GUI</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">createGui</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//创建JFrame容器窗口</span><span class="token class-name">JFrame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"Test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置关闭窗口默认操作</span>frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">JFrame</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置窗口尺寸</span>frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">520</span><span class="token punctuation">,</span><span class="token number">520</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//展示窗口</span>frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在JFramer容器上方创建JDialog容器窗口，modal为true时，关闭JDialog后才可以操作JFrame</span><span class="token class-name">JDialog</span> dialog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JDialog</span><span class="token punctuation">(</span>frame<span class="token punctuation">,</span><span class="token string">"JDialog对话框"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dialog<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">JDialog</span><span class="token punctuation">.</span>HIDE_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>dialog<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dialog<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//调用createGui方法显示窗口</span><span class="token class-name">SwingUtilities</span><span class="token punctuation">.</span><span class="token function">invokeLater</span><span class="token punctuation">(</span>GUI<span class="token operator">::</span><span class="token function">createGui</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>运行就会出现两个叠在一起的空白窗口</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>JavaGui</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习笔记基础篇</title>
    <link href="/2021/07/31/java/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/07/31/java/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="jsandcss/player/APlayer.min.css"><script src="/jsandcss/player/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/jsandcss/player/Meting.min.js"></script><blockquote><p><font color = "red">Tips:</font>本文记录我了学<font color = "blue">java</font>的一些内容,仅为自己学习记录查看。</p></blockquote><span id="more"></span><h2 id="JAVA基础"><a href="#JAVA基础" class="headerlink" title="JAVA基础"></a>JAVA基础</h2><h3 id="第一个java程序"><a href="#第一个java程序" class="headerlink" title="第一个java程序"></a>第一个java程序</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java">  <span class="token keyword">package</span> <span class="token class-name">Puppy</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">,</span><span class="token class-name">String</span> sex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> age<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> sex<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span><span class="token class-name">String</span> sex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span>sex<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">People</span> zs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>zs<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>zs<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>zs<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名："</span> <span class="token operator">+</span> zs<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"年龄："</span> <span class="token operator">+</span> zs<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"性别："</span> <span class="token operator">+</span> zs<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//自己敲得但不是自己写的，这就很尴尬。</span></code></pre></div><h3 id="Java中的包"><a href="#Java中的包" class="headerlink" title="Java中的包"></a>Java中的包</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token comment">/*加上路径*/</span><span class="token punctuation">;</span></code></pre></div><h3 id="java中的导包"><a href="#java中的导包" class="headerlink" title="java中的导包"></a>java中的导包<!--类似于c语言头文件--></h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span></code></pre></div><h3 id="java的输入"><a href="#java的输入" class="headerlink" title="java的输入"></a>java的输入</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Text</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/*main函数*/</span>        <span class="token class-name">Scanner</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*有ln会换行*/</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextlnt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*用于输入整形*/</span>        <span class="token keyword">char</span> m <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*charAt(0)输入第一个字符，若是2则是输入第三个字符*/</span>        <span class="token class-name">String</span> a <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*接收string类型，输入一个字符串遇到空格就停*/</span>        <span class="token class-name">String</span> b <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*接收整行，输入带有空格的一句话*/</span>        <span class="token class-name">Float</span> c <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*接收float类型*/</span>        <span class="token class-name">Double</span> d <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*用于接收double类型*/</span>        input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*关闭输入*/</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*以上除了input.nextLine()以外的所有函数都不会取走末尾的回车，若使用nextLine()的前面有其他输入，可以用input.nextLine()将其取出后在用input.nextLine()接受自己想要的内容，next.Line()虽然会取走回车，但是不会将回车返回，也就是不会读取到变量中。next().charAt(n)会取走一句中的第n+1个字符，并且改行字符全部从缓存区取走。*/</span></code></pre></div><h3 id="Switch语句"><a href="#Switch语句" class="headerlink" title="Switch语句"></a>Switch语句</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">switch</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//支持 byte short int char String(1.7)</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span><span class="token punctuation">&#125;</span>    </code></pre></div><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="内置数据类型"><a href="#内置数据类型" class="headerlink" title="内置数据类型"></a>内置数据类型</h4><table><thead><tr><th><strong>数据类型</strong></th><th align="left"><strong>默认值</strong></th><th>字节数&#x2F;位数</th></tr></thead><tbody><tr><td>byte</td><td align="left">0</td><td>1(字节)</td></tr><tr><td>short</td><td align="left">0</td><td>2(字节)</td></tr><tr><td>int</td><td align="left">0</td><td>4(字节)</td></tr><tr><td>long</td><td align="left">0L</td><td>8(字节)</td></tr><tr><td>float</td><td align="left">0.0f</td><td>4(字节)</td></tr><tr><td>double</td><td align="left">0.0d</td><td>8(字节)</td></tr><tr><td>char</td><td align="left">‘u0000’</td><td>2(字节)</td></tr><tr><td>String (or any object)</td><td align="left">null</td><td></td></tr><tr><td>boolean</td><td align="left">false</td><td>1(位)</td></tr></tbody></table><p><font color="red">tips:1位(byte)&#x3D;8字节(bit)</font></p><p>long类型和float类型定义</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">123445435L</span><span class="token punctuation">;</span><span class="token keyword">float</span> j <span class="token operator">=</span> <span class="token number">1234.4f</span><span class="token punctuation">;</span></code></pre></div><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token class-name">Pi</span> <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span></code></pre></div><h4 id="Java语言支持的变量类型有"><a href="#Java语言支持的变量类型有" class="headerlink" title="Java语言支持的变量类型有"></a>Java语言支持的变量类型有</h4><p>类变量：独立于方法之外的变量，用 static 修饰。<br>实例变量：独立于方法之外的变量，不过没有 static 修饰。<br>局部变量：类的方法中的变量。</p><h5 id="实例变量"><a href="#实例变量" class="headerlink" title="实例变量"></a>实例变量</h5><p>声明在一个类中，方法、构造方法和语句块之外，实例变量的值应该至少被一个方法、构造方法或者语句块引用，实例变量可以声明在使用前或者使用后；</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token punctuation">&#123;</span>    <span class="token comment">//实例变量对子类可见</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token comment">//私有变量，仅在该类可见</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> salary<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h5 id="类变量（静态变量）sss"><a href="#类变量（静态变量）sss" class="headerlink" title="类变量（静态变量）sss"></a>类变量（静态变量）sss</h5><p>在类中以 static 关键字声明，必须在方法之外。</p><p>静态变量是指声明为 public&#x2F;private，final 和 static 类型的变量，在声明后不可更改。静态变量储存在静态存储区。经常被声明为常量，很少单独使用 static 声明变量。</p>  <div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//salary是静态的私有变量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">double</span> salary<span class="token punctuation">;</span>    <span class="token comment">// DEPARTMENT是一个常量</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> DEPARTMENT <span class="token operator">=</span> <span class="token string">"开发人员"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    salary <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>DEPARTMENT<span class="token operator">+</span><span class="token string">"平均工资:"</span><span class="token operator">+</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div><h2 id="面像对象"><a href="#面像对象" class="headerlink" title="面像对象"></a>面像对象</h2><h3 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h3><h4 id="关键词extends"><a href="#关键词extends" class="headerlink" title="关键词extends"></a>关键词extends</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Test1</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"yocaishu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Test2</span> <span class="token keyword">extends</span> <span class="token class-name">Test1</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Test2</span> i<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h4 id="用super访问父类的成员变量，成员方法"><a href="#用super访问父类的成员变量，成员方法" class="headerlink" title="用super访问父类的成员变量，成员方法"></a>用super访问父类的成员变量，成员方法</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">TestF</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1234</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">TestS</span> <span class="token keyword">extends</span> <span class="token class-name">TestF</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> m<span class="token operator">=</span><span class="token keyword">super</span><span class="token punctuation">.</span>i<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Learn</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">TestS</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        输出为        父类        1234        */</span>test<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>test<span class="token punctuation">.</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h4 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h4><p>1.final关键字修饰的类不可继承</p><p>2.当类的方法被final修饰，该类不可被重写</p><p>3.final修饰的变量只能被赋值一次</p><h3 id="抽象类和接口"><a href="#抽象类和接口" class="headerlink" title="抽象类和接口"></a>抽象类和接口</h3><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><p>关键字：abstract</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"非抽象方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">fun3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Test2</span> <span class="token keyword">extends</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"编写fun1的方法体"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"编写fun3的方法体"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Learn</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Test2</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>test<span class="token punctuation">.</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>test<span class="token punctuation">.</span><span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>test<span class="token punctuation">.</span><span class="token function">fun3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><p>所有方法都为抽象方法</p><p>关键词：interface</p><p>格式：</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*修饰符*/</span><span class="token keyword">interface</span> <span class="token class-name">Test1</span> <span class="token comment">/*extends 接口1，接口2...*/</span><span class="token punctuation">&#123;</span><span class="token comment">/*修饰符*/</span> <span class="token comment">/*static*/</span><span class="token operator">/</span><span class="token operator">*</span><span class="token keyword">final</span><span class="token operator">*</span><span class="token operator">/</span> 常量类型 常量名 <span class="token operator">=</span> 常量<span class="token punctuation">;</span><span class="token comment">/*public*/</span> <span class="token comment">/*abstract*/</span> 返回值 方法名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//默认自动添加public static final</span><span class="token comment">//默认方法</span><span class="token comment">/*public*/</span> <span class="token keyword">default</span> 返回值 方法名<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//默认方法和静态方法自动添加public</span><span class="token comment">//默认方法体;</span><span class="token punctuation">&#125;</span><span class="token comment">/*publid*/</span> <span class="token keyword">static</span> 返回值 方法名<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//静态方法方法体</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Test1</span> <span class="token punctuation">&#123;</span><span class="token keyword">void</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">fun3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"默认方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">Test2</span> <span class="token keyword">extends</span> <span class="token class-name">Test1</span> <span class="token punctuation">&#123;</span><span class="token keyword">void</span> <span class="token function">fun4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Test3</span> <span class="token keyword">implements</span> <span class="token class-name">Test2</span> <span class="token punctuation">&#123;</span><span class="token comment">// 接口是public省略，此处不可省略</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"实现父类1的fun方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"实现父类2的fun4方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Learn</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Test3</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>test<span class="token punctuation">.</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Test1</span><span class="token punctuation">.</span><span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 此处静态方法直接访问;</span>test<span class="token punctuation">.</span><span class="token function">fun3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>test<span class="token punctuation">.</span><span class="token function">fun4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">implements</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"汪汪"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">implements</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喵喵"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Learn</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Dog</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Cat</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dog<span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cat<span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>转型</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">implements</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"汪汪"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">implements</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喵喵"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Ability</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"抓老鼠"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Learn</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Animal</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向上转型</span><span class="token class-name">Animal</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Cat cat2 = (Cat)cat;向下转型</span>        <span class="token comment">//cat2.Ability();向下转型才能使用</span>dog<span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cat<span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Dog dog2= (Dog)cat;向下转型出错,运行出错。</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><h4 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> out<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> in<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is inner"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"out="</span> <span class="token operator">+</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Inner</span> inner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"This is Outer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"in="</span> <span class="token operator">+</span> inner<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Learn</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Outer</span> outer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Outer<span class="token punctuation">.</span>Inner</span> inner <span class="token operator">=</span> outer<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>outer<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>inner<span class="token punctuation">.</span><span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h4 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">&#123;</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> out<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> in<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is inner"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"out="</span> <span class="token operator">+</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">Inner</span> inner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>inner<span class="token punctuation">.</span><span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"This is Outer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"in="</span> <span class="token operator">+</span> inner<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Learn</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Outer</span> outer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>outer<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">&#123;</span><span class="token keyword">static</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">&#123;</span><span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i="</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 访问外部静态变量</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Learn</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Outer<span class="token punctuation">.</span>Inner</span> inner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer<span class="token punctuation">.</span>Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 直接访问静态内部类</span>inner<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span><span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token class-name">Ability</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Learn</span> <span class="token punctuation">&#123;</span><span class="token comment">// 定义静态方法，必须</span><span class="token comment">// Fun的参数是一个对象</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Fun</span><span class="token punctuation">(</span><span class="token class-name">Animal</span> dog<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dog<span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name"><span class="token namespace">dog<span class="token punctuation">.</span></span>Ability</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 此处Fun的参数是一个实例化对象,然后执行Fun函数</span><span class="token class-name">Fun</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"汪汪"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Ability</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"看家"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><h4 id="Lambda入门"><a href="#Lambda入门" class="headerlink" title="Lambda入门"></a>Lambda入门</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span><span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Learn</span> <span class="token punctuation">&#123;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Fun</span><span class="token punctuation">(</span><span class="token class-name">Animal</span> dog<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dog<span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 使用lambda表达式</span><span class="token class-name">Fun</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"汪汪汪"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h4 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span><span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">Sum</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Learn</span> <span class="token punctuation">&#123;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Fun</span><span class="token punctuation">(</span><span class="token class-name">Animal</span> dog<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dog<span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Fun2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token class-name">Sum</span> sum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token string">"+"</span><span class="token operator">+</span>b<span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span>sum<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 使用lambda表达式</span><span class="token class-name">Fun</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"汪汪汪"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Fun2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">-></span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//(x,y)可以指代sun函数,x+y就相当于sum函数函数体。</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h4 id="方法引用与构造器引用"><a href="#方法引用与构造器引用" class="headerlink" title="方法引用与构造器引用"></a>方法引用与构造器引用</h4><h5 id="类名引用静态方法"><a href="#类名引用静态方法" class="headerlink" title="类名引用静态方法"></a>类名引用静态方法</h5><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//定义一个接口，有一个参数</span><span class="token keyword">interface</span> <span class="token class-name">Calcable</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Math</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token operator">-</span>num<span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Learn</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//使用abs函数和Calcable接口</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Abs</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token class-name">Calcable</span> calcable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//这里可以理解为Abs的第二个参数是一个使用一个参数返回一个int类型的函数。</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>calcable<span class="token punctuation">.</span><span class="token function">calc</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//Lambda表达式</span><span class="token class-name">Abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span>n <span class="token operator">-></span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//方法引用的方式</span><span class="token class-name">Abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token class-name">Math</span><span class="token operator">::</span><span class="token function">abs</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h5 id="对象名引用方法"><a href="#对象名引用方法" class="headerlink" title="对象名引用方法"></a>对象名引用方法</h5><p>与1的区别就在于类中的方法不是静态(未用static修饰)，所以不能直接用类名引用。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Print</span><span class="token punctuation">&#123;</span><span class="token keyword">void</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Stringchang</span><span class="token punctuation">&#123;</span><span class="token comment">//此处不是静态方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">StringUp</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Learn</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span><span class="token class-name">Print</span> <span class="token class-name">S</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">S</span><span class="token punctuation">.</span><span class="token function">p</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Stringchang</span> <span class="token class-name">S</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stringchang</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//Lambda</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span>s<span class="token operator">-></span><span class="token class-name">S<span class="token punctuation">.</span>StringUp</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//对象名引用</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">,</span><span class="token class-name">S</span><span class="token operator">::</span><span class="token class-name">StringUp</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h5 id="构造器应用方法"><a href="#构造器应用方法" class="headerlink" title="构造器应用方法"></a>构造器应用方法</h5><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">PersonBuild</span> <span class="token punctuation">&#123;</span><span class="token class-name">Person</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回Person类</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token comment">//主要是这又构造函数，用new+类名时直接使用参数</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">PersonName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Learn</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//这里要用public static void</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">PersonBuild</span> build<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>build<span class="token punctuation">.</span><span class="token function">p</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PersonName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// Lambda</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token string">"牛逼"</span><span class="token punctuation">,</span> name <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里的Lambda表达式理解为是build对象的p方法体，返回一个初始化了name的Person对象。</span><span class="token comment">// 构造器引用方式</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token string">"格拉斯"</span><span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h5 id="类名引用普通方法"><a href="#类名引用普通方法" class="headerlink" title="类名引用普通方法"></a>类名引用普通方法</h5><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Print</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token class-name">Sum</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Sum</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Learn</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token class-name">Sum</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token class-name">Print</span> ff<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ff<span class="token punctuation">.</span><span class="token function">p</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// Lambda</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">260</span><span class="token punctuation">,</span> <span class="token number">260</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>object<span class="token punctuation">,</span> t<span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token operator">-></span> object<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里就很神奇,sum有两个参数，这两个参数来自ff，ff的参数来自于fun。</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token class-name">Sum</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>exception：异常</p><p><img src="C:\Users\q1512\AppData\Roaming\Typora\typora-user-images\image-20210508200455793.png" alt="image-20210508200455793"></p><h4 id="try…catch…"><a href="#try…catch…" class="headerlink" title="try…catch…"></a>try…catch…</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Learn</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> result <span class="token operator">=</span> x <span class="token operator">/</span> y<span class="token punctuation">;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"捕获异常信息为："</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// TODO: handle exception</span><span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序异常也要运行，除非try中有System.exit(0)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h4 id="throws"><a href="#throws" class="headerlink" title="throws"></a>throws</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Learn</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//抛出异常，此处会编译错误。抛出异常后必须进行处理。</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> result <span class="token operator">=</span> x <span class="token operator">/</span> y<span class="token punctuation">;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h4 id="使用try···catch捕获处理"><a href="#使用try···catch捕获处理" class="headerlink" title="使用try···catch捕获处理"></a>使用try···catch捕获处理</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Learn</span> <span class="token punctuation">&#123;</span><span class="token comment">// 抛出异常</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> result <span class="token operator">=</span> x <span class="token operator">/</span> y<span class="token punctuation">;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// TODO: handle exception</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发现"</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"的异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h4 id="throw"><a href="#throw" class="headerlink" title="throw"></a>throw</h4><p>与throws不同，throw用于方法体内部，抛出一个异常对象，而throws用在声明中可能抛出多个异常。</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Learn</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"除数不能为0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// throws需要throw</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> result <span class="token operator">=</span> x <span class="token operator">/</span> y<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结果是："</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将会输出除数不能为0</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h4 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//创建一个类继承Exception类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WarringByMy</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token comment">/** *  */</span><span class="token comment">// private static final long serialVersionUID = 1L;</span><span class="token keyword">public</span> <span class="token class-name">WarringByMy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用Exception无参构造方法</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">WarringByMy</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用Exception有参构造方法</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Learn</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//抛出异常</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">WarringByMy</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">WarringByMy</span><span class="token punctuation">(</span><span class="token string">"除数是0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> re <span class="token operator">=</span> x <span class="token operator">/</span> y<span class="token punctuation">;</span><span class="token keyword">return</span> re<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">WarringByMy</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h2 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h2><h3 id="String类和StringBuffer类"><a href="#String类和StringBuffer类" class="headerlink" title="String类和StringBuffer类"></a>String类和StringBuffer类</h3><h4 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Learn</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"aBcdeFghijklmnoPqrsTuvwxyz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"aBcdeFghijklmnoPqrsTuvwxyz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> m <span class="token operator">=</span> <span class="token string">"qwer-tyui-op"</span><span class="token punctuation">;</span><span class="token class-name">String</span> n <span class="token operator">=</span> <span class="token string">" a b cdf  "</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字符串长度"</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 26</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第3+1个字符"</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// d</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字符c第一次出现的位置"</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token char">'c'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字符m最后一次出现的位置"</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token char">'m'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 12</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字符串cd第一次出现的位置"</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"cd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字符串ji第一次出现的位置"</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"jl"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// -1</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"以指定的字符串a开始吗？:"</span><span class="token operator">+</span>s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"以指定的字符串z结尾吗？:"</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"z"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字符串与w内容相同吗？:"</span><span class="token operator">+</span>s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字符串与w地址相同吗？:"</span><span class="token operator">+</span><span class="token punctuation">(</span>s<span class="token operator">==</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字符串为空吗？:"</span><span class="token operator">+</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字符串是否包含了jkl字符序列?:"</span><span class="token operator">+</span>s<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"jkl"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"转换为大写后的字符是:"</span><span class="token operator">+</span>s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"转换为小写后的字符是:"</span><span class="token operator">+</span>s<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"将123456789转换为字符串:"</span><span class="token operator">+</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">123456789</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"转换s为字符数组c[2]:"</span><span class="token operator">+</span>c<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用哈哈哈替换aBc后的输出:"</span><span class="token operator">+</span>s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"aBc"</span><span class="token punctuation">,</span><span class="token string">"哈哈哈"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"将n去除前后空格:"</span><span class="token operator">+</span>n<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"返回的第3+1个字符开始到最后的字符串是:"</span><span class="token operator">+</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"返回从2角标到13-1个字符的字符串:"</span><span class="token operator">+</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">Array</span> <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token class-name">Array</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token class-name">Array</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h4 id="StrringBuffer类"><a href="#StrringBuffer类" class="headerlink" title="StrringBuffer类"></a>StrringBuffer类</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Learn</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">StringBuffer</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"abcdef"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加abcdef到s末尾:"</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"hhh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加hhh到指定位置:"</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除指定位置字符:"</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 替换2到4-1的字符</span>s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"cd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"替换指定位置字符:"</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">setCharAt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token char">'w'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"设置指定位置的字符:"</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> ss <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"转换为字符串:"</span> <span class="token operator">+</span> ss<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"反转后输出为"</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 清空缓存区,从0开始，到最后结束(s.length-1)</span>s<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*运行结果添加abcdef到s末尾:abcdef添加hhh到指定位置:abhhhcdef删除指定位置字符:abhhcdef替换指定位置字符:abcdcdef设置指定位置的字符:abwdcdef转换为字符串:abwdcdef反转后输出为fedcdwba*/</span></code></pre></div><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p>String 类是final类一旦定义，不能改变，修改实际是重新指向字符串常量，StringBuffer类创建的对象在缓存中，可以随意修改；</p><p><font color="blue">tips:</font> 据网友所说，String相加实际会优化为StringBuilder; &#96;</p><p>String类重写了Object类的equals方法，StringBuffer没有；</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Learn</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"1234"</span><span class="token punctuation">;</span><span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token string">"1234"</span><span class="token punctuation">;</span><span class="token class-name">StringBuffer</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">StringBuffer</span> s4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"asdf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s4<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"asdf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 比较的字符串是否相同</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span class="token comment">// 比较的对象是否为同一个</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>String类对象可以用+链接，StringBuffer类对象不可以;</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Learn</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"qwer"</span><span class="token punctuation">;</span><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"tyuiop"</span><span class="token punctuation">;</span><span class="token class-name">String</span> s3 <span class="token operator">=</span> s1 <span class="token operator">+</span> s2<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">StringBuffer</span> ss1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">StringBuffer</span> ss2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ss1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"asdf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ss2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"ghjkl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">StringBuffer</span> ss3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 错误</span><span class="token comment">// ss3 = ss1 + ss2;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="System类与Runtime类"><a href="#System类与Runtime类" class="headerlink" title="System类与Runtime类"></a>System类与Runtime类</h3><h5 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h5><h6 id="getProperties"><a href="#getProperties" class="headerlink" title="getProperties"></a>getProperties</h6><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//获取系统全部属性</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><h6 id="currentTimeMillis"><a href="#currentTimeMillis" class="headerlink" title="currentTimeMillis"></a>currentTimeMillis</h6><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Learn</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取时间，单位毫秒</span><span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//时间戳1970年1月1日</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><h6 id="arraycopy"><a href="#arraycopy" class="headerlink" title="arraycopy"></a>arraycopy</h6><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> srcPos<span class="token punctuation">,</span> dest<span class="token punctuation">,</span> destPos<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//src:原数组，srcPos:拷贝元素起始位置，dest:目标数组，destPos:目标数组拷贝起始位置，length:拷贝个数</span></code></pre></div><h6 id="exit"><a href="#exit" class="headerlink" title="exit"></a>exit</h6><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭java虚拟机，0为正常退出，否则为异常终止</span></code></pre></div><h6 id="gc"><a href="#gc" class="headerlink" title="gc"></a>gc</h6><p>启动垃圾回收器</p><h5 id="Runtime类"><a href="#Runtime类" class="headerlink" title="Runtime类"></a>Runtime类</h5><h6 id="getRuntime"><a href="#getRuntime" class="headerlink" title="getRuntime()"></a>getRuntime()</h6><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Runtime</span> rt <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"处理器个数"</span><span class="token operator">+</span>rt<span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//单位是字节;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"空闲内存"</span><span class="token operator">+</span>rt<span class="token punctuation">.</span><span class="token function">freeMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1024</span><span class="token operator">/</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最大内存"</span><span class="token operator">+</span>rt<span class="token punctuation">.</span><span class="token function">maxMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1024</span><span class="token operator">/</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>exec()</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">&#123;</span><span class="token class-name">Runtime</span> rt <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>rt<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"notepad.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打开记事本程序</span><span class="token punctuation">&#125;</span></code></pre></div><p>destroy，结束进程</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span><span class="token class-name">Runtime</span> rt <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Process</span> p <span class="token operator">=</span> rt<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"notepad.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//暂停3000秒</span>p<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h3><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"绝对值:"</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正弦:"</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token number">3.1415926</span><span class="token operator">/</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"余弦"</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正切:"</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">tan</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"平方根:"</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"立方根:"</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">cbrt</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"乘方:"</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"大于参数的最小整数:"</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">4.32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回double类型</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小于参数的最大整数:"</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回double类型</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"四舍五入小数:"</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回int类型</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"两数最大:"</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">423</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"两数最小:"</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"大于0.0小于1.0的随机数:"</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="Random类"><a href="#Random类" class="headerlink" title="Random类"></a>Random类</h3><p>java.util 包中有Random类,用于生成随机数</p><h4 id="Random"><a href="#Random" class="headerlink" title="Random()"></a>Random()</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//创建随机数生成器</span><span class="token class-name">Random</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"布尔类型随机数:"</span><span class="token operator">+</span>r<span class="token punctuation">.</span><span class="token function">nextBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"double随机数:"</span><span class="token operator">+</span>r<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"float随机数:"</span><span class="token operator">+</span>r<span class="token punctuation">.</span><span class="token function">nextFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"int随机数:"</span><span class="token operator">+</span>r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Long随机数:"</span><span class="token operator">+</span>r<span class="token punctuation">.</span><span class="token function">nextLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><h4 id="Random-long-seed"><a href="#Random-long-seed" class="headerlink" title="Random(long seed)"></a>Random(long seed)</h4><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment">//根据种子生成随机数，种子一样，随机数一样</span><span class="token class-name">Random</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"布尔类型随机数:"</span><span class="token operator">+</span>r<span class="token punctuation">.</span><span class="token function">nextBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"double随机数:"</span><span class="token operator">+</span>r<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"float随机数:"</span><span class="token operator">+</span>r<span class="token punctuation">.</span><span class="token function">nextFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"int随机数:"</span><span class="token operator">+</span>r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Long随机数:"</span><span class="token operator">+</span>r<span class="token punctuation">.</span><span class="token function">nextLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><h3 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h3><p>自动装箱：将基本数据类型的变量赋值给对应的包装类变量；</p><p>自动拆箱：将包装类对象类型直接赋值对应的基本数据类型；</p><table><thead><tr><th>基本数据类型</th><th>对应的包装类</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>boolean</td><td>Boolean</td></tr></tbody></table><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"999"</span><span class="token punctuation">;</span><span class="token comment">//用valueOf将基本类型转换为String类</span><span class="token class-name">String</span> s<span class="token operator">=</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将基本类型和字符串转换为包装类</span><span class="token class-name">Integer</span> integer <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> integer2 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用构造方法</span><span class="token class-name">Integer</span> integer3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从9弃用</span><span class="token class-name">Integer</span> integer4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//too</span><span class="token comment">//用包装类的parseXxx将字符类型转换为基本类型</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用包装类toString()方法转换为字符串</span><span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>总结：</p><p>1.valueOf转换为自身类型</p><p>除Character类，包装类都有parseXxx(String s)和valueOf(String s)方法；</p><h3 id="时间与日期类"><a href="#时间与日期类" class="headerlink" title="时间与日期类"></a>时间与日期类</h3><h4 id="Date类"><a href="#Date类" class="headerlink" title="Date类*"></a>Date类*</h4><p>在java.util包中</p><p>jdk1.1后被Calendar类中的方法替代，现在已经用不了了</p><h4 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h4><p>Calendar是抽象类，无法实例化</p><p>通过一下方法创建对象</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Calendar</span> calendar <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><h5 id="int-get"><a href="#int-get" class="headerlink" title="int get();"></a>int get();</h5><p>返回日历字段，有以下用法</p><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Calendar</span> calendar <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> year <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> month <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>MONTH<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">;</span><span class="token comment">//从0开始，所以加1</span><span class="token keyword">int</span> date <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DATE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> hour <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>HOUR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> minute <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>MINUTE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> second <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>SECOND<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前时间为"</span><span class="token operator">+</span>year<span class="token operator">+</span><span class="token string">"年"</span><span class="token operator">+</span>month<span class="token operator">+</span><span class="token string">"月"</span><span class="token operator">+</span>date<span class="token operator">+</span><span class="token string">"月"</span><span class="token operator">+</span>hour<span class="token operator">+</span><span class="token string">"时"</span><span class="token operator">+</span>minute<span class="token operator">+</span><span class="token string">"分"</span><span class="token operator">+</span>second<span class="token operator">+</span><span class="token string">"秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>STL容器简单应用</title>
    <link href="/2021/07/24/c++/STL%E5%AE%B9%E5%99%A8/"/>
    <url>/2021/07/24/c++/STL%E5%AE%B9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="jsandcss/player/APlayer.min.css"><script src="/jsandcss/player/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/jsandcss/player/Meting.min.js"></script><blockquote><p>简介<br><font color="0000FF">STL</font>的一个重要特点是数据结构和算法的分离。尽管这是个简单的概念，但这种分离确实使得STL变得非常通用。例如，由于STL的sort()函数是完全通用的，你可以用它来操作几乎任何数据集合，包括链表，容器和数组。</p></blockquote><span id="more"></span><p>STL另一个重要特性是它不是面向对象的。为了具有足够通用性，STL主要依赖于模板而不是封装，继承和虚函数（多态性）。你在STL中找不到任何明显的类继承关系。这好像是一种倒退，但这正好是使得STL的组件具有广泛通用性的底层特征。另外，由于STL是基于模板，内联函数的使用使得生成的代码短小高效。<br>STL的头文件与其他头文件不同，它是“开源”的。如果你想深入了解STL到底是怎么实现的，最好的办法是写个简单的程序，将程序中涉及到的模板源码给复制下来，稍作整理，就能看懂了。<br>STL组件主要包括容器（Container）、迭代器（Iterator）、算法（Algorithm）等。容器是管理某类对象的集合，迭代器用于在对象集合上的遍历，而算法用于处理集合内的元素。<br>STL组件都存在于std命名空间中。</p><h1 id="string"><a href="#string" class="headerlink" title="string"></a>string</h1><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    string s<span class="token punctuation">;</span>string s<span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">/</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">//字符串长度</span>s<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>string str<span class="token punctuation">)</span>  <span class="token comment">//s里找str,返回第一次匹配的位置,没有则返回-1</span>s<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>string str<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">)</span> <span class="token comment">//从pos位置开始找  没有返回-1</span>s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token comment">//返回从pos位置开始长度为len的字符串</span>s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">)</span> <span class="token comment">//返回pos位置后到结尾的字符串</span><span class="token comment">//将s从pos位置长度为len的字符串替换为str</span>s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span>string str<span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>it1<span class="token punctuation">,</span> it2<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//迭代器起始位置到结束位置,如:s.replace(s.begin(),s.begin()+3,"str")或s.replace(s.begin(),s.end(),"str")</span>s<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//清空</span><span class="token comment">//在pos位置(s[pos])插入字符串str</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span>string str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//在s[pos]前插入n个c</span>    s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//清空s[pos]及其后的字符</span>s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//清空pos后n个字符,包括pos</span>    s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stack></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">mian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>stack <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> s<span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//入栈</span>s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//弹出</span><span class="token keyword">int</span> stacktop <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取栈首</span><span class="token keyword">bool</span> isempty <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//栈为空的判断</span><span class="token keyword">int</span> stacksize <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//栈内元素数量</span><span class="token punctuation">&#125;</span></code></pre></div><h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//入队</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//弹出</span><span class="token keyword">int</span> qfront <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取队首</span><span class="token keyword">int</span> qback <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取队尾</span><span class="token keyword">bool</span> isempty <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//队为空的判断</span><span class="token keyword">int</span> qsize <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//队内元素数量</span></code></pre></div><h1 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h1><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>priority_queue <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> p<span class="token punctuation">;</span>  <span class="token comment">//默认的大顶堆,就是先输出大数据 "5 4 3 2 1",对于字符比较的是ASCII码</span>priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> p<span class="token punctuation">;</span>  p<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//入队，有一个参数</span>    p<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//取队首</span>p<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//出队</span>p<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//判断是否为空</span>p<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre></div><h1 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h1><p>不要对deque使用迭代器，因为：</p><p>在deque中增加任何元素都将使deque的所有迭代器失效。</p><p>在deque的中间删除元素将使所有的迭代器失效。</p><p>在deque的头或（d1.begin(),d1.end()）删除元素时，只有指向该元素的迭代器失效。</p><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;deque></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//deque特有的操作如下：</span>    d<span class="token punctuation">[</span>i<span class="token punctuation">]</span>：<span class="token comment">//返回d中下标为i的元素的引用。</span>    d<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：<span class="token comment">//返回第一个元素的引用。</span>    d<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：<span class="token comment">//返回最后一个元素的引用。</span>    d<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：<span class="token comment">//删除尾部的元素。该函数没有返回值。</span>    d<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：<span class="token comment">//删除头部的元素。该函数没有返回值。</span>    d<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>：<span class="token comment">//在尾部添加一个元素e的副本。</span>    d<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>：<span class="token comment">//在头部添加一个元素e的副本。</span><span class="token punctuation">&#125;</span></code></pre></div><h1 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h1><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>    v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向量尾部增加元素</span>    ite<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向量的迭代器前面增加一个元素</span>    v<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>iterator ite<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除迭代器指向元素</span>    v<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除向量最后一个元素</span>    v<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清空向量</span>    v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回向量中元素个数</span>    v<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断向量为空</span>    v<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回首元素引用</span>    v<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回尾元素引用</span>    <span class="token comment">//begin end头尾指针</span><span class="token punctuation">&#125;</span></code></pre></div><h1 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h1><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token keyword">int</span> main<span class="token punctuation">&#123;</span>    map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>string<span class="token operator">></span> m<span class="token punctuation">;</span>    m<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>或m<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token comment">//返回一个引用，指向键为3时的对应值。注意，//它和数组下标完全不是一回事儿！</span>    <span class="token comment">//如果元素不存在，map会自动建立这个元素。</span>    m<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">//返回s中键为3的具体数目。但对于map来说，返回值不是0就是1</span>    m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">//返回指向键为3的元素的迭代器。如果不存在，则返回//m.end()。</span>    m<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//判断映射是否为空映射。</span>    m<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//返回映射的元素数量。</span>    m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>pair<span class="token punctuation">)</span><span class="token comment">//将元素插入到set中。pair的first是键，second是值</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;utility></span> </span>        可以定义一个pair：pair <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> string<span class="token operator">></span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     也可以用<span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>utility<span class="token operator">></span><span class="token punctuation">)</span>建立一个pair <span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token comment">//将区间[begin, end)中的值插入到s中。该区间应该是map类型的。</span>    m<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token comment">//将键为e的元素删除。返回值为被删除的e的数量（对于multimap来说，被删除的可能不止一个元素）。</span>    m<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token comment">//将pos处的元素删除。</span>    m<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token comment">//将[begin, end)处的元素删除。</span><span class="token punctuation">&#125;</span></code></pre></div><p>示例：</p><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">///定义</span>map <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> string<span class="token operator">></span>m<span class="token punctuation">;</span><span class="token comment">///insert()插入pair</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> string<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"first"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"第一次插入后:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> m<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> m<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">/*但是当map中有元素时，insert不会插入数据,如*/</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> string<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"first1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"重复插入后数据不变:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> m<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> m<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">///insert()插入value_type数据</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">map</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> string<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">value_type</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"second"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">///使用形似数组的方式插入</span>m<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"third"</span><span class="token punctuation">;</span><span class="token comment">//数组方式可以覆盖原有数据</span>m<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"first1"</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"使用数组形式插入后:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> m<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> m<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//或者cout &lt;&lt; m[1] &lt;&lt; endl;</span><span class="token comment">///判断insert是否插入成功</span><span class="token comment">//创建一个pair变量,isSuccess.second位bool变量，成功为true</span>pair<span class="token operator">&lt;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> string<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span> isSuccess<span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">map</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> string<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">value_type</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>isSuccess<span class="token punctuation">.</span>second<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Success"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Fail"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">///查找元素,先创建一个迭代器变量</span>map <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> string <span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator iter <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//auto iter = m.find(1);</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"遍历输出"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>iter <span class="token operator">!=</span> m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Find it:"</span> <span class="token operator">&lt;&lt;</span> iter<span class="token operator">-></span>second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"No find"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">///遍历输出</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> iter <span class="token operator">:</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> iter<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> iter<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">///删除与清空</span><span class="token comment">//迭代器刪除</span>iter <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*if (iter != m.end())*/</span> m<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>iter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用关键字刪除</span><span class="token keyword">bool</span> n <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//如果刪除了會返回1，否則返回0</span><span class="token comment">//用迭代器范围刪除 : 把整个map清空</span>m<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等同于mapStudent.clear()</span><span class="token comment">///map大小</span><span class="token keyword">int</span> nSize <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> nSize <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>m<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"asdf"</span><span class="token punctuation">;</span>nSize <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> nSize <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">///删除</span>m<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清空</span>map <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> string<span class="token operator">></span> m2<span class="token punctuation">;</span>m2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"two"</span><span class="token punctuation">;</span>m2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"tree"</span><span class="token punctuation">;</span>m2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"four"</span><span class="token punctuation">;</span>m2<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">auto</span> it <span class="token operator">=</span> m2<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//it->first是2</span><span class="token comment">//it->second是"tree"</span>m2<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span>m2<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>m2<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m2<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//m2.clear();与前一个相同作用</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><p>集合（set）是按照特定顺序存储唯一元素的容器。就是自动排序(从小到大)和去重</p><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    set<span class="token operator">&lt;</span> <span class="token keyword">int</span><span class="token punctuation">,</span> less<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> s<span class="token punctuation">;</span> <span class="token comment">//内部升序排列</span>    set<span class="token operator">&lt;</span> <span class="token keyword">int</span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> s<span class="token punctuation">;</span> <span class="token comment">//内部降序排列</span>    s<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//返回s中值为10的具体数目。但对于set来说，返回值不是0就是1。</span>    s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断集合是否为空集。</span>    s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回集合的元素数量。</span>    s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将e插入到set中。</span>    s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将区间[begin, end)中的值插入到s中。</span>    s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将e删除。返回值为e的数量（对于multiset来说，被删除的可能不止一个数）。</span>    s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将pos处的元素删除。</span>    s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将[begin, end)处的元素删除。</span><span class="token punctuation">&#125;</span></code></pre></div><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>set <span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span>s<span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token char">'w'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token char">'w'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>string ss<span class="token punctuation">&#123;</span> <span class="token string">"qwer"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>ss<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ss<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">auto</span> t <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><h1 id="表"><a href="#表" class="headerlink" title="表"></a>表</h1><p>list使用双向链表管理元素。显然list不支持随机存取，也不能对list使用“[]”运算符，但是元素的插入和删除速度很快。</p><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;list></span></span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>l<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//1.  元素存取</span>    l<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：<span class="token comment">//返回第一个元素。不检查第一个元素是否存在。</span>    l<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：<span class="token comment">//返回最后一个元素。不检查最后一个元素是否存在。</span><span class="token comment">//2.  插入元素</span>    l<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> e<span class="token punctuation">)</span>：<span class="token comment">//在pos位置插入元素e的副本，并返回新元素位置。</span>    l<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> n<span class="token punctuation">,</span> e<span class="token punctuation">)</span>：<span class="token comment">//在pos位置插入n个元素e的副本。</span>    l<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> begin<span class="token punctuation">,</span> end<span class="token punctuation">)</span>：<span class="token comment">//在pos位置插入区间[begin, end)内所有元素的副本。</span>    l<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>：<span class="token comment">//在尾部添加一个元素e的副本。</span>    l<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>：<span class="token comment">//在头部添加一个元素e的副本。</span><span class="token comment">//3.  移除元素</span>    l<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：<span class="token comment">//移除最后一个元素。没有返回值。</span>    l<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：<span class="token comment">//移除第一个元素。没有返回值。</span>    l<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span>：<span class="token comment">//删除pos位置的元素，返回下一个元素的位置。</span>    l<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span> end<span class="token punctuation">)</span>：<span class="token comment">//删除区间[begin, end)内所有元素，返回下一个元素的位置。</span>    l<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>：<span class="token comment">//移除所有值为val的元素。</span>    l<span class="token punctuation">.</span><span class="token function">remove_if</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span>：<span class="token comment">//移除所有满足“op(val)==true”的元素。</span>    l<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：<span class="token comment">//移除所有元素，清空容器。</span>    l<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>：<span class="token comment">//将元素数量改为num（增加的元素用默认构造函数产生，多余的元素被删除）。</span>    l<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span>e<span class="token punctuation">)</span>：<span class="token comment">//将元素数量改为num（增加的元素是e的副本）。</span><span class="token comment">//4.  其他操作 </span>    l<span class="token punctuation">.</span><span class="token function">unique</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：<span class="token comment">//移除重复元素。</span>    l<span class="token punctuation">.</span><span class="token function">unique</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span>：<span class="token comment">//移除满足“op(val) == true”的重复元素。</span>    l1<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> l2<span class="token punctuation">)</span>：<span class="token comment">//将l2内的所有元素转移到l1的迭代器之前。</span>    l1<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> l2<span class="token punctuation">,</span> l2pos<span class="token punctuation">)</span>：<span class="token comment">//将l2内l2pos所指元素转移到l1内的pos之前。</span>    l1<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> l2<span class="token punctuation">,</span> l2begin<span class="token punctuation">,</span> l2end<span class="token punctuation">)</span>：<span class="token comment">//将l2内[l2begin, l2end)区间内所有元素转移到l1的pos之前。</span>    l<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：<span class="token comment">//以operator &lt;为准则对所有元素排序。</span>    l<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span>：<span class="token comment">//以op（定义“小于”关系）为准则对所有元素排序。</span>    l1<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span>：<span class="token comment">//假设l1和l2都已排序，将l2全部元素转移到l1并保证合并后仍是有序表。</span>    l<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：<span class="token comment">//将所有元素反序</span><span class="token comment">//无论是安插，还是删除，指向其他元素的指针、引用和迭代器都不会失效。</span><span class="token punctuation">&#125;</span></code></pre></div><h1 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h1><table><thead><tr><th></th><th><strong>vector</strong></th><th><strong>deque</strong></th><th><strong>list</strong></th><th><strong>map&#x2F;multimap</strong></th><th><strong>set&#x2F;multiset</strong></th></tr></thead><tbody><tr><td><strong>内部结构</strong></td><td>动态数组</td><td>数组的数组</td><td>双向链表</td><td>平衡二叉树</td><td>平衡二叉树</td></tr><tr><td><strong>元素形式</strong></td><td>值</td><td>值</td><td>值</td><td>键—值</td><td>值</td></tr><tr><td><strong>元素是否可以重复</strong></td><td>√</td><td>√</td><td>√</td><td>map：×（键）  multimap：√</td><td>set：×  multiset：√</td></tr><tr><td><strong>可随机存取</strong></td><td>√</td><td>√</td><td>×</td><td>map：√（键）  multimap：×</td><td>×</td></tr><tr><td><strong>迭代器类型</strong></td><td>随机存取</td><td>随机存取</td><td>双向</td><td>双向  键被视为常数</td><td>双向  值被视为常数</td></tr><tr><td><strong>元素搜寻速度</strong></td><td>慢</td><td>慢</td><td>非常慢</td><td>对键来说快</td><td>快</td></tr><tr><td><strong>在哪里安插、移除速度快</strong></td><td>尾部</td><td>头尾两端</td><td>任何位置</td><td>×</td><td>×</td></tr><tr><td><strong>何时安插、移除会导致迭代器失效</strong></td><td>重新分配时</td><td>任何时候</td><td>不会</td><td>不会</td><td>不会</td></tr></tbody></table><h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><div class="code-wrapper"><pre class="language-none"><code class="language-none">1) 正向迭代器，定义方法如下：容器类名::iterator  迭代器名;2) 常量正向迭代器，定义方法如下：容器类名::const_iterator  迭代器名;3) 反向迭代器，定义方法如下：容器类名::reverse_iterator  迭代器名;4) 常量反向迭代器，定义方法如下：容器类名::const_reverse_iterator  迭代器名;</code></pre></div><h1 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h1><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> a <span class="token operator">></span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//当传入参数有cmp，可以从大到小排序</span><span class="token function">sort</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span> end<span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div><h1 id="结构体运算符重载"><a href="#结构体运算符重载" class="headerlink" title="结构体运算符重载"></a>结构体运算符重载</h1><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"> <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> msg <span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span>  priority  <span class="token operator">&lt;</span> b<span class="token punctuation">.</span> priority<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cpp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++万能头文件</title>
    <link href="/2021/07/22/c++/C++%20%E4%B8%87%E8%83%BD%E5%A4%B4%E6%96%87%E4%BB%B6/"/>
    <url>/2021/07/22/c++/C++%20%E4%B8%87%E8%83%BD%E5%A4%B4%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="jsandcss/player/APlayer.min.css"><script src="/jsandcss/player/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/jsandcss/player/Meting.min.js"></script><h2 id="include-“God-h”"><a href="#include-“God-h”" class="headerlink" title="#include “God.h”"></a><font color = "#00FFFF">#include “God.h”</font></h2><p>可以快速导入常用的STL容器类等；</p><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;deque></span><span class="token comment">//双端队列</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span><span class="token comment">//向量</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span><span class="token comment">//对列</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span><span class="token comment">//String</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span><span class="token comment">//映射</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stack></span><span class="token comment">//栈</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set></span><span class="token comment">//集合</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;list></span><span class="token comment">//表</span></span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cpp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++time库的简单使用</title>
    <link href="/2021/07/17/c++/Cpp%20time%E5%BA%93%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/07/17/c++/Cpp%20time%E5%BA%93%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="jsandcss/player/APlayer.min.css"><script src="/jsandcss/player/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/jsandcss/player/Meting.min.js"></script><p><font color="red">tips:使用的开发工具是VS2019，所以一些函数使用可能会有所不同</font></p><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>time_t timer<span class="token punctuation">;</span>timer <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tm t<span class="token punctuation">;</span><span class="token function">localtime_s</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">,</span> <span class="token operator">&amp;</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> t<span class="token punctuation">.</span>tm_year <span class="token operator">+</span> <span class="token number">1900</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"年"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> t<span class="token punctuation">.</span>tm_mon <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"月"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//从0开始</span>cout <span class="token operator">&lt;&lt;</span> t<span class="token punctuation">.</span>tm_mday <span class="token operator">&lt;&lt;</span> <span class="token string">"日"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"周"</span> <span class="token operator">&lt;&lt;</span> t<span class="token punctuation">.</span>tm_wday <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> t<span class="token punctuation">.</span>tm_hour <span class="token operator">&lt;&lt;</span> <span class="token string">"时"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> t<span class="token punctuation">.</span>tm_min <span class="token operator">&lt;&lt;</span> <span class="token string">"分"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> t<span class="token punctuation">.</span>tm_sec <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"秒"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//从0开始</span><span class="token comment">/*ctime将时间转为有格式的字符*/</span><span class="token keyword">char</span> cp<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">ctime_s</span><span class="token punctuation">(</span>cp<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> cp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cpp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>进制转换</title>
    <link href="/2021/07/15/c++/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/"/>
    <url>/2021/07/15/c++/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="jsandcss/player/APlayer.min.css"><script src="/jsandcss/player/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/jsandcss/player/Meting.min.js"></script><blockquote><p>进制转在平时编程中也长有用处，本文简略的记录以下一般的进制转换</p></blockquote><h1 id="关于进制转换"><a href="#关于进制转换" class="headerlink" title="关于进制转换"></a><font color = "#00FF00">关于进制转换</font></h1><p>进制转换在初高中就已经涉及，10进制转换为其他进制一般采用连续取余的方法，例如下面是将10进制转换为8进制的简单程序</p><p><span id = "jump1">例1</span></p><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stack></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>stack <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> s<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> base<span class="token punctuation">&#123;</span><span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//数字，base为基数</span><span class="token comment">//cin >> n >> base;</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span><span class="token keyword">bool</span> is<span class="token punctuation">&#123;</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>is <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>n <span class="token operator">%</span> base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>n <span class="token operator">/=</span> base<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-"</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//当输入为15 8时，输出为17</span></code></pre></div><p>其他进制的转换，如2进制转换为15进制，将其转换为10进制，在连续取余转换为15进制即可。</p><p>如：</p><p><span id = "jump2">例2</span></p><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> base<span class="token punctuation">;</span>n <span class="token operator">=</span> <span class="token number">1111</span><span class="token punctuation">;</span> base <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//原数值和进制。</span><span class="token keyword">int</span> m <span class="token operator">=</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> x<span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> w<span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>x <span class="token operator">+=</span> m <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>m <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>w<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div><p>之后将其用<a href="#jump1">例1</a>的方法转转换为其他15进制即可。</p><h1 id="基数为负数的整数进制转换"><a href="#基数为负数的整数进制转换" class="headerlink" title="基数为负数的整数进制转换"></a>基数为负数的整数进制转换</h1><p>针对于基数为正整数的整数的进制转换并不需要考虑太多因素，很如一就做出来，但是，当遇到基数为负数的进制转换在采用同样的方法明显就不适用了，例如在<a href="#jump1">例1</a>中，如果输入10 -2,结果将会是1010，结果是存在问题的。因此有了以下方法。</p><p><span id = "jump3">列3:</span></p><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stack></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span> <span class="token string">"0123456789ABCDEFGHIJK"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>stack <span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> s<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> base<span class="token punctuation">;</span><span class="token comment">//数值，10进制，base为基数</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> base<span class="token punctuation">;</span><span class="token keyword">bool</span> is<span class="token punctuation">&#123;</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>is <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> x <span class="token operator">=</span> n <span class="token operator">%</span> base<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>x <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">/</span> base <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> base<span class="token punctuation">;</span>n <span class="token operator">=</span> n <span class="token operator">/</span> base <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>n <span class="token operator">/=</span> base<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>这样可以解决基数为负数的情况。</p><p><a href="#jump3">例3</a>是用来解决10进制转换为负数进制的问题的，如果是其他负数进制相互转换可以用<a href="#jump2">例2</a>的方法转换为10进制,然后再进行转换。</p><p><code>未完不一定续...</code> </p>]]></content>
    
    
    <categories>
      
      <category>Blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cpp</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VS2019扩展</title>
    <link href="/2021/07/15/tool/VS%E6%89%A9%E5%B1%95/"/>
    <url>/2021/07/15/tool/VS%E6%89%A9%E5%B1%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="jsandcss/player/APlayer.min.css"><script src="/jsandcss/player/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/jsandcss/player/Meting.min.js"></script><h1 id="VS2019常用扩展"><a href="#VS2019常用扩展" class="headerlink" title="VS2019常用扩展"></a>VS2019常用扩展</h1><p><font color="red">tips(“来自北邮一位老师的推荐”)</font></p><h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><p>首先要安装微软自己开发的扩展：Productivity Power Tools 2017&#x2F;2019。这是一个扩展套装，其中包含12个扩展(截至2019年6月）。只要安装这一个扩展套装，也就安装了其中包含的12个扩展。这12个扩展是：</p><ol><li>Align Assignments</li><li>Copy As Html</li><li>Double-Click Maximize</li><li>Fix Mixed Tabs</li><li>Match Margin</li><li>Middle Click Scroll</li><li>Peek Help</li><li>Power Commands for Visual Studio</li><li>Quick Launch Tasks</li><li>Solution Error Visualizer</li><li>Shrink Empty Lines</li><li>Time Stamp Margin</li></ol><h2 id="二-CodeMaid"><a href="#二-CodeMaid" class="headerlink" title="二:CodeMaid"></a>二:CodeMaid</h2><p>安装CodeMaid</p><p>CodeMaid能够帮助我们在保存代码的时候，清理代码中无用的空格和空行</p><h2 id="三-Open-In-Explorer"><a href="#三-Open-In-Explorer" class="headerlink" title="三:Open In Explorer"></a>三:Open In Explorer</h2><p>Open In Explorer</p><p>该扩展在解决方案管理器中添加了一些类似文件资源管理器的功能。只要在解决方案管理器中单击鼠标右键，在弹出菜单中就能看到“在资源管理器中打开文件夹”、“拷贝文件”等功能</p><h2 id="四-Trailing-Whitespace-Visualizer"><a href="#四-Trailing-Whitespace-Visualizer" class="headerlink" title="四:Trailing Whitespace Visualizer"></a>四:Trailing Whitespace Visualizer</h2><p>Trailing Whitespace Visualizer</p><p>该扩展能够显示行尾无用的空格。当然，如果安装了CodeMaid扩展的话，在保存代码时，CodeMaid会自动将行尾五用空格删除</p><h2 id="五-Viasfora"><a href="#五-Viasfora" class="headerlink" title="五:Viasfora"></a>五:Viasfora</h2><p>Viasfora</p><p>该扩展可以使程序中的成对匹配的大中小括号以不同的颜色显示，便于我们将括号的左右半边匹配</p><h2 id="六-Visual-Studio-IntelliCode"><a href="#六-Visual-Studio-IntelliCode" class="headerlink" title="六:Visual Studio IntelliCode"></a>六:Visual Studio IntelliCode</h2><p>Visual Studio IntelliCode</p><p>基于机器学习的代码编写辅助工具。目前功能还比较弱。感兴趣可以尝尝鲜</p><h2 id="七-PowerMode"><a href="#七-PowerMode" class="headerlink" title="七:PowerMode"></a>七:PowerMode</h2><p>PowerMode</p><p>敲键盘写代码的时候，字符会出现烟花效果。本课程中相当一部分示例都有该效果。</p><h2 id="八-Snippetica"><a href="#八-Snippetica" class="headerlink" title="八:Snippetica"></a>八:Snippetica</h2><p>Snippetica</p><p>代码片段工具。按下特定的字符或者字符组合，然后按TAB键，Snippetica就会将该扩展中存储的一些代码片段直接粘贴到你的编辑器中。</p><p>该工具能比较有效地提升编码的速度。你可以尝试输入 forr 然后按tab键，它会自动将基于范围的for循环的框架代码贴到你的编辑器中。</p><h2 id="九-VSColorOutput"><a href="#九-VSColorOutput" class="headerlink" title="九:VSColorOutput"></a>九:VSColorOutput</h2><p>VSColorOutput</p><p>该扩展与Output enhancer扩展的功能类似，但是比Output enhancer好用，所以如果同时安装了Output enhancer扩展的话，将其禁用即可</p><h2 id="十-Smooth-Scroll"><a href="#十-Smooth-Scroll" class="headerlink" title="十:Smooth Scroll"></a>十:Smooth Scroll</h2><p>Smooth Scroll</p><p>让代码编辑器窗口的滚动更平滑。</p><h2 id="十一-Word-Highlight-With-Margin"><a href="#十一-Word-Highlight-With-Margin" class="headerlink" title="十一:Word Highlight With Margin"></a>十一:Word Highlight With Margin</h2><p>Word Highlight With Margin</p><p>当你用鼠标选中某个单词&#x2F;标识符后，该扩展可以将所有的单词&#x2F;标识符同时加亮显示。</p><p>这是一个非常有用的扩展</p>]]></content>
    
    
    <categories>
      
      <category>Blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++链表</title>
    <link href="/2021/07/02/c++/Cpp-%E9%93%BE%E8%A1%A8/"/>
    <url>/2021/07/02/c++/Cpp-%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="jsandcss/player/APlayer.min.css"><script src="/jsandcss/player/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/jsandcss/player/Meting.min.js"></script><p>上次的链表创建与删除释放有些麻烦，我的老师给了我一些建议</p><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">L</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> num<span class="token punctuation">;</span>L<span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//创建头节点且不用于储存数据。</span>L<span class="token operator">*</span> Head <span class="token operator">=</span> <span class="token keyword">new</span> L<span class="token punctuation">;</span>Head<span class="token operator">-></span>num <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>L<span class="token operator">*</span> p <span class="token operator">=</span> Head<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入要创建的链表长度:"</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span><span class="token comment">//创建链表</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>p<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token keyword">new</span> L<span class="token punctuation">;</span>p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>p<span class="token operator">-></span>num <span class="token operator">=</span> i<span class="token punctuation">;</span>p<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出看看</span>p <span class="token operator">=</span> Head<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> p<span class="token operator">-></span>num <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>L<span class="token operator">*</span> q <span class="token operator">=</span> Head<span class="token punctuation">;</span>p <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入要删除的值："</span><span class="token punctuation">;</span>cin <span class="token operator">>></span> m<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>num <span class="token operator">==</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>q<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token keyword">delete</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>p <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>q <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>p <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出看看</span>p <span class="token operator">=</span> Head<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> p<span class="token operator">-></span>num <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//全部释放，此处不释放头节点</span>p <span class="token operator">=</span> Head<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>q <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token keyword">delete</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>p <span class="token operator">=</span> q<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">delete</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><p>测试结果：</p><p><img src="/images/Cpp%E9%93%BE%E8%A1%A8-21-7-2.png"></p>]]></content>
    
    
    <categories>
      
      <category>Blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cpp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python学习笔记</title>
    <link href="/2021/07/01/python/%E5%88%9D%E8%AF%86Python/"/>
    <url>/2021/07/01/python/%E5%88%9D%E8%AF%86Python/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="jsandcss/player/APlayer.min.css"><script src="/jsandcss/player/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/jsandcss/player/Meting.min.js"></script><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><blockquote><p>初级学习</p><p>仅为学习记录</p></blockquote><span id="more"></span><p>python2</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token string">'hello world!'</span></code></pre></div><p>一般</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello world!'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#输出1</span></code></pre></div><p>还可以这样</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%d\n%d\n%d'</span><span class="token operator">%</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#%d(整型)占位数据来源是后面的x,y,z。\n是换行符。</span></code></pre></div><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token number">6</span><span class="token operator">**</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">6</span> <span class="token comment">#次方运算</span><span class="token number">42</span></code></pre></div><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token number">6</span> <span class="token operator">^</span> <span class="token number">2</span> <span class="token comment">#二进制相同位同为1，异为1</span><span class="token number">4</span></code></pre></div><p>值和类型</p><h3 id="int、float、str"><a href="#int、float、str" class="headerlink" title="int、float、str"></a>int、float、str</h3><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"> <span class="token builtin">type</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'int '</span><span class="token operator">></span> <span class="token builtin">type</span> <span class="token punctuation">(</span><span class="token number">42.0</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'float '</span><span class="token operator">></span> <span class="token builtin">type</span> <span class="token punctuation">(</span><span class="token string">'Hello ,␣ World !'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'str '</span><span class="token operator">></span> <span class="token builtin">type</span> <span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'str '</span><span class="token operator">></span> <span class="token builtin">type</span> <span class="token punctuation">(</span><span class="token string">'42.0 '</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'str '</span><span class="token operator">></span></code></pre></div><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"> <span class="token number">1</span> <span class="token punctuation">,</span><span class="token number">000</span> <span class="token punctuation">,</span><span class="token number">000</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">#将1,000,000当作整型数序列</span></code></pre></div><p>赋值语句</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">message <span class="token operator">=</span> <span class="token string">'And ␣now ␣ for ␣ something ␣ completely ␣ different '</span>n <span class="token operator">=</span> <span class="token number">17</span>pi <span class="token operator">=</span> <span class="token number">3.141592653589793</span></code></pre></div><p>变量名错误</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"> <span class="token number">76</span> trombones <span class="token operator">=</span> <span class="token string">'big ␣ parade '</span>SyntaxError <span class="token punctuation">:</span> invalid syntax more@ <span class="token operator">=</span> <span class="token number">1000000</span>SyntaxError <span class="token punctuation">:</span> invalid syntax <span class="token keyword">class</span> <span class="token operator">=</span> <span class="token string">'Advanced ␣ Theoretical ␣ Zymurgy '</span>SyntaxError <span class="token punctuation">:</span> invalid syntax</code></pre></div><h3 id="python关键词"><a href="#python关键词" class="headerlink" title="python关键词"></a>python关键词</h3><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token boolean">False</span> <span class="token keyword">class</span> <span class="token class-name">finally</span> <span class="token keyword">is</span> <span class="token keyword">return</span><span class="token boolean">None</span> <span class="token keyword">continue</span> <span class="token keyword">for</span> <span class="token keyword">lambda</span> <span class="token keyword">try</span><span class="token boolean">True</span> <span class="token keyword">def</span> <span class="token keyword">from</span> <span class="token keyword">nonlocal</span> <span class="token keyword">while</span><span class="token keyword">and</span> <span class="token keyword">del</span> <span class="token keyword">global</span> <span class="token keyword">not</span> <span class="token keyword">with</span><span class="token keyword">as</span> <span class="token keyword">elif</span> <span class="token keyword">if</span> <span class="token keyword">or</span> <span class="token keyword">yield</span><span class="token keyword">assert</span> <span class="token keyword">else</span> <span class="token keyword">import</span> <span class="token keyword">pass</span><span class="token keyword">break</span> <span class="token keyword">except</span> <span class="token keyword">in</span> <span class="token keyword">raise</span></code></pre></div><h3 id="字符串的运算-和"><a href="#字符串的运算-和" class="headerlink" title="字符串的运算(*和+)"></a>字符串的运算(*和+)</h3><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"> first <span class="token operator">=</span> <span class="token string">'throat '</span> second <span class="token operator">=</span> <span class="token string">'warbler '</span> first <span class="token operator">+</span> secondthroatwarbl<span class="token string">'Spam'</span><span class="token operator">*</span><span class="token number">3</span><span class="token string">'SpamSpamSpam'</span></code></pre></div><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>Python 提供了能够将值从一种类型转换为另一种类型的内建函数。函数 int 接受任意<br>值，并在其能做到的情况下，将该值转换成一个整型数，否则会报错：</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"> <span class="token builtin">int</span> <span class="token punctuation">(</span><span class="token string">'32 '</span><span class="token punctuation">)</span><span class="token number">32</span> <span class="token builtin">int</span> <span class="token punctuation">(</span><span class="token string">'Hello '</span><span class="token punctuation">)</span>ValueError <span class="token punctuation">:</span> invalid literal <span class="token keyword">for</span> <span class="token builtin">int</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> Hello</code></pre></div><p>int 能将浮点数转换为整型数，但是它并不进行舍入；只是截掉了小数点部分：</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"> <span class="token builtin">int</span> <span class="token punctuation">(</span><span class="token number">3.99999</span><span class="token punctuation">)</span><span class="token number">3</span> <span class="token builtin">int</span><span class="token punctuation">(</span>−<span class="token number">2.3</span><span class="token punctuation">)</span>−<span class="token number">2</span></code></pre></div><p>float 可以将整型数和字符串转换为浮点数:</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"> <span class="token builtin">float</span> <span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token number">32.0</span> <span class="token builtin">float</span> <span class="token punctuation">(</span><span class="token string">'3.14159 '</span><span class="token punctuation">)</span><span class="token number">3.14159</span></code></pre></div><p>str 可以将其实参转换成字符</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"> <span class="token builtin">str</span> <span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token string">'32 '</span> <span class="token builtin">str</span> <span class="token punctuation">(</span><span class="token number">3.14159</span><span class="token punctuation">)</span><span class="token string">'3.14159 '</span></code></pre></div><h3 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h3><p>函数导入</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> math</code></pre></div><p>函数使用</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">ratio <span class="token operator">=</span> signal_power <span class="token operator">/</span> noise_powerdecibels <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> math <span class="token punctuation">.</span> log10 <span class="token punctuation">(</span> ratio <span class="token punctuation">)</span>radians <span class="token operator">=</span> <span class="token number">0.7</span>height <span class="token operator">=</span> math <span class="token punctuation">.</span> sin <span class="token punctuation">(</span> radians <span class="token punctuation">)</span></code></pre></div><p>增加新函数</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">print_lyrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ikjsdofijoaiogj"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"joasidjfaf"</span><span class="token punctuation">)</span></code></pre></div><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">print_twice</span> <span class="token punctuation">(</span> bruce <span class="token punctuation">)</span> <span class="token punctuation">:</span><span class="token keyword">print</span> <span class="token punctuation">(</span> bruce <span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span> bruce <span class="token punctuation">)</span> print_twice <span class="token punctuation">(</span><span class="token string">'Spam '</span><span class="token punctuation">)</span>SpamSpam print_twice <span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token number">42</span><span class="token number">42</span> print_twice <span class="token punctuation">(</span> math <span class="token punctuation">.</span> pi <span class="token punctuation">)</span><span class="token number">3.14159265359</span><span class="token number">3.14159265359</span></code></pre></div><h3 id="turtle模块"><a href="#turtle模块" class="headerlink" title="turtle模块"></a>turtle模块</h3><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> turtlebob <span class="token operator">=</span> turtle<span class="token punctuation">.</span>Turtle<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bob<span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">bob<span class="token punctuation">.</span>pd<span class="token comment">#放下笔</span>bob<span class="token punctuation">.</span>pu<span class="token comment">#抬笔</span>bob<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token comment">#走100</span>bob<span class="token punctuation">.</span>lt<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token comment">#旋转90度</span>bob<span class="token punctuation">.</span>rt<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token comment">#右转90度</span></code></pre></div><p>在pycharm中绘图一闪而过，可以加上</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">turtle<span class="token punctuation">.</span>done<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div><p>将一部分代码包装在函数里被称作 封装 (encapsulation) 。封装的好处之一，为这些代<br>码赋予一个名字，这充当了某种文档说明。另一个好处是，如果你重复使用这些代码，<br>调用函数两次比拷贝粘贴函数体要更加简洁</p><h4 id="泛化"><a href="#泛化" class="headerlink" title="泛化"></a>泛化</h4><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">polygon</span> <span class="token punctuation">(</span>t <span class="token punctuation">,</span> n <span class="token punctuation">,</span> length <span class="token punctuation">)</span> <span class="token punctuation">:</span>angle <span class="token operator">=</span> <span class="token number">360</span> <span class="token operator">/</span> n  <span class="token comment">#python2 中可能会因为整型常量出现偏差，可以用360.0/n,有点像C语言哈哈</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span> <span class="token punctuation">(</span>n <span class="token punctuation">)</span> <span class="token punctuation">:</span>t <span class="token punctuation">.</span> fd <span class="token punctuation">(</span> length <span class="token punctuation">)</span>t <span class="token punctuation">.</span> lt <span class="token punctuation">(</span> angle <span class="token punctuation">)</span><span class="token keyword">import</span> turtlebob<span class="token operator">=</span>turtle<span class="token punctuation">.</span>Turtle<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#一定要定义bob！！！！！！</span>polygon <span class="token punctuation">(</span> bob <span class="token punctuation">,</span> <span class="token number">7</span> <span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">)</span></code></pre></div><p>下面是一个画弧的程序</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> math<span class="token keyword">import</span> turtle<span class="token keyword">def</span> <span class="token function">arc</span> <span class="token punctuation">(</span>t<span class="token punctuation">,</span>r<span class="token punctuation">,</span>angle<span class="token punctuation">)</span><span class="token punctuation">:</span>    arc_length <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> math <span class="token punctuation">.</span> pi <span class="token operator">*</span> r <span class="token operator">*</span> angle <span class="token operator">/</span> <span class="token number">360</span><span class="token comment">#周长</span>    n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>arc_length <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token comment">#三等分为n</span>    step_length <span class="token operator">=</span> arc_length <span class="token operator">/</span> n<span class="token comment">#每次作图的长度（路径）</span>    step_angle <span class="token operator">=</span> angle <span class="token operator">/</span> n<span class="token comment">#角度</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#执行n次，前后呼应</span>        t <span class="token punctuation">.</span> fd<span class="token punctuation">(</span>step_length<span class="token punctuation">)</span>        t <span class="token punctuation">.</span> lt<span class="token punctuation">(</span>step_angle<span class="token punctuation">)</span>t <span class="token operator">=</span> turtle<span class="token punctuation">.</span>Turtle<span class="token punctuation">(</span><span class="token punctuation">)</span>arc<span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">270</span><span class="token punctuation">)</span><span class="token comment">#t是小乌龟，100是半径，270是弧度</span>turtle<span class="token punctuation">.</span>done<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div><p>地板除法</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"> minutes <span class="token operator">=</span> <span class="token number">105</span> minutes <span class="token operator">/</span> <span class="token number">60</span><span class="token number">1.75</span> minutes <span class="token operator">=</span> <span class="token number">105</span> hours <span class="token operator">=</span> minutes <span class="token operator">//</span> <span class="token number">60</span><span class="token comment">#直接抛弃小数部分</span> hours<span class="token number">1</span></code></pre></div><p>布尔表达式（bool）</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"> <span class="token builtin">type</span> <span class="token punctuation">(</span> <span class="token boolean">True</span> <span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'bool '</span><span class="token operator">></span> <span class="token builtin">type</span> <span class="token punctuation">(</span> <span class="token boolean">False</span> <span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'bool '</span><span class="token operator">></span></code></pre></div><h3 id="逻辑运算（and-、or-和-not。）"><a href="#逻辑运算（and-、or-和-not。）" class="headerlink" title="逻辑运算（and 、or 和 not。）"></a>逻辑运算（and 、or 和 not。）</h3><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token number">42</span> <span class="token keyword">and</span> <span class="token boolean">True</span><span class="token boolean">True</span></code></pre></div><p>严格来讲，逻辑运算符的运算数应该是布尔表达式，但是 Python 并不严格要求。任何<br>非 0 的数字都被解释成为真 ( True )。</p><h3 id="if、else、elif"><a href="#if、else、elif" class="headerlink" title="if、else、elif"></a>if、else、elif</h3><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> x <span class="token operator">&lt;</span> y <span class="token punctuation">:</span><span class="token comment">#是“:”,不是“()”</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'x␣is␣ less ␣ than ␣y'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> x <span class="token operator">></span> y <span class="token punctuation">:</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'x␣is␣ greater ␣ than ␣y'</span><span class="token punctuation">)</span><span class="token keyword">else</span> <span class="token punctuation">:</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'x␣and ␣y␣are ␣ equal '</span><span class="token punctuation">)</span></code></pre></div><p>python提供（允许）一下写法</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&lt;</span> x <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'x␣is␣a␣ positive ␣single−digit ␣ number .'</span><span class="token punctuation">)</span></code></pre></div><p>递归</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">countdown</span> <span class="token punctuation">(</span> n <span class="token punctuation">)</span> <span class="token punctuation">:</span><span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'Blastoff !'</span><span class="token punctuation">)</span><span class="token keyword">else</span> <span class="token punctuation">:</span><span class="token keyword">print</span> <span class="token punctuation">(</span>n <span class="token punctuation">)</span>countdown <span class="token punctuation">(</span>n−<span class="token number">1</span><span class="token punctuation">)</span></code></pre></div><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">print_n</span> <span class="token punctuation">(</span>s <span class="token punctuation">,</span> n <span class="token punctuation">)</span> <span class="token punctuation">:</span><span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token keyword">return</span><span class="token comment">#用来退出循环</span><span class="token keyword">print</span> <span class="token punctuation">(</span>s <span class="token punctuation">)</span>print_n <span class="token punctuation">(</span>s <span class="token punctuation">,</span> n−<span class="token number">1</span><span class="token punctuation">)</span></code></pre></div><p>输入(input)</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"> text <span class="token operator">=</span> <span class="token builtin">input</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#Python 2 中，这个函数的名字叫 raw_input 。</span>What are you waiting <span class="token keyword">for</span> ? text<span class="token string">'What are you waiting for ?'</span> name <span class="token operator">=</span> <span class="token builtin">input</span> <span class="token punctuation">(</span><span class="token string">'What ... is␣ your ␣ name ?\n'</span><span class="token punctuation">)</span><span class="token comment">#提示语‘\n’是换行</span>What <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">is</span> your name ?<span class="token comment">#当上一个语句敲下回车，显示此句话提示</span>Arthur <span class="token punctuation">,</span> King of the Britons !<span class="token comment">#之句话是输入的</span> nameArthur <span class="token punctuation">,</span> King of the Britons !</code></pre></div><p>亦可以这样</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"> prompt <span class="token operator">=</span> <span class="token string">'What ... is␣the ␣ airspeed ␣ velocity ␣of␣an␣ unladen ␣ swallow ?\n'</span><span class="token comment">#将提示语句的字符串给一个菜参数</span> speed <span class="token operator">=</span> <span class="token builtin">input</span> <span class="token punctuation">(</span> prompt <span class="token punctuation">)</span>What <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">is</span> the airspeed velocity of an unladen swallow ?<span class="token number">42</span> <span class="token builtin">int</span> <span class="token punctuation">(</span> speed <span class="token punctuation">)</span><span class="token number">42</span></code></pre></div><p>如果用户输入不是数字构成的字符串，会获得一个错误：</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"> speed <span class="token operator">=</span> <span class="token builtin">input</span> <span class="token punctuation">(</span> prompt <span class="token punctuation">)</span>What <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">is</span> the airspeed velocity of an unladen swallow ?What do you mean <span class="token punctuation">,</span> an African <span class="token keyword">or</span> a European swallow ? <span class="token builtin">int</span> <span class="token punctuation">(</span> speed <span class="token punctuation">)</span>ValueError <span class="token punctuation">:</span> invalid literal <span class="token keyword">for</span> <span class="token builtin">int</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">with</span> base <span class="token number">10</span><span class="token comment">#不是数字的错误</span></code></pre></div><h3 id="time模块"><a href="#time模块" class="headerlink" title="time模块"></a>time模块</h3><p>time 模块提供了一个可以返回当前格林威治标准时间的函数，名字也是time</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> timetime<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#会显示时间，以纪元以来的秒数表示（Win,Unix1970年1月1日）</span></code></pre></div><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>函数在未执行任何 return 语句的情况下终止，返回值将是 None ，这可不是 0 的绝对值</p><p>python提供一个abs用来计算绝对值</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token builtin">abs</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span></code></pre></div><p>Python打开文件</p><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python">td<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'D/TTT/TTT.txt'</span><span class="token punctuation">,</span><span class="token string">'a+'</span><span class="token punctuation">)</span>td<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言链表删除</title>
    <link href="/2021/06/29/c++/C%E8%AF%AD%E8%A8%80%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4/"/>
    <url>/2021/06/29/c++/C%E8%AF%AD%E8%A8%80%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="jsandcss/player/APlayer.min.css"><script src="/jsandcss/player/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/jsandcss/player/Meting.min.js"></script><p>s</p><div class="code-wrapper"><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">S</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> first<span class="token punctuation">;</span><span class="token keyword">int</span> second<span class="token punctuation">;</span>S<span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">;</span>S<span class="token operator">*</span> Head<span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token operator">*</span>q<span class="token punctuation">,</span><span class="token operator">*</span>_head<span class="token punctuation">;</span><span class="token comment">//创建长为10的链表</span>Head<span class="token operator">=</span><span class="token punctuation">(</span>S<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Head<span class="token operator">-></span>first<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>Head<span class="token operator">-></span>second<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>p<span class="token operator">=</span>Head<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">9</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>p<span class="token operator">-></span>next<span class="token operator">=</span><span class="token punctuation">(</span>S<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>p<span class="token operator">-></span>next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>p<span class="token operator">-></span>first<span class="token operator">=</span>i<span class="token punctuation">;</span>p<span class="token operator">-></span>second<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//p指向头</span>p<span class="token operator">=</span>Head<span class="token punctuation">;</span><span class="token comment">//输出</span><span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d,%d\n"</span><span class="token punctuation">,</span>p<span class="token operator">-></span>first<span class="token punctuation">,</span>p<span class="token operator">-></span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//删除</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please input a number of delete:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token operator">=</span>Head<span class="token punctuation">;</span>p<span class="token operator">=</span>q<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果是头节点,特殊处理</span><span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">-></span>first<span class="token operator">==</span>n<span class="token operator">||</span>q<span class="token operator">-></span>second<span class="token operator">==</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Head<span class="token operator">=</span>Head<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token comment">//此时q还等于Head,释放</span><span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token operator">=</span>Head<span class="token punctuation">;</span>p<span class="token operator">=</span>q<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token comment">//如果到最后q还满足关系，将q释放</span><span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>q<span class="token operator">-></span>first<span class="token operator">==</span>n<span class="token operator">||</span>q<span class="token operator">-></span>second<span class="token operator">==</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>Head<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//头节点不用释放，判断q->next也就是p</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>first<span class="token operator">==</span>n<span class="token operator">||</span>p<span class="token operator">-></span>second<span class="token operator">==</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//q->next指向p->next,将p跳过</span>q<span class="token operator">-></span>next<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token operator">=</span>q<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//如果不是，则两个指针向后移动一位</span>q<span class="token operator">=</span>q<span class="token operator">-></span>next<span class="token punctuation">;</span>p<span class="token operator">=</span>q<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Output:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token operator">=</span>Head<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d,%d\n"</span><span class="token punctuation">,</span>p<span class="token operator">-></span>first<span class="token punctuation">,</span>p<span class="token operator">-></span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div><p>最后输出</p><div class="code-wrapper"><pre class="language-none"><code class="language-none">0,00,11,22,33,44,55,66,77,88,9Please input a number of delete:6Output:0,00,11,22,33,44,57,88,9</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C/C++ 二维数组动态内存分配</title>
    <link href="/2021/06/19/c++/C-C-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/"/>
    <url>/2021/06/19/c++/C-C-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="jsandcss/player/APlayer.min.css"><script src="/jsandcss/player/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/jsandcss/player/Meting.min.js"></script><h2 id="c"><a href="#c" class="headerlink" title="c++"></a>c++</h2><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token operator">*</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//或</span><span class="token comment">//int** array;</span><span class="token comment">//array = new int* [5];</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">+</span> j<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">delete</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">delete</span> array<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div><h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><div class="code-wrapper"><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>array<span class="token punctuation">;</span>array<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token operator">*</span><span class="token number">5</span><span class="token operator">+</span>j<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//释放内存</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">free</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">free</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cpp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>举个栗子-my_first_blog</title>
    <link href="/2021/06/19/others/Firstblog/"/>
    <url>/2021/06/19/others/Firstblog/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="jsandcss/player/APlayer.min.css"><script src="/jsandcss/player/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/jsandcss/player/Meting.min.js"></script><h1 id="This-is-my-first-blog"><a href="#This-is-my-first-blog" class="headerlink" title="This is my first blog."></a>This is my first blog.</h1><p>开始于2021&#x2F;6&#x2F;19</p><p>over</p>]]></content>
    
    
    <categories>
      
      <category>日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Live</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
